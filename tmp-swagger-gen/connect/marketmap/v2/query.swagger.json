{
  "swagger": "2.0",
  "info": {
    "title": "connect/marketmap/v2/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/connect/marketmap/v2/last_updated": {
      "get": {
        "summary": "LastUpdated returns the last height the market map was updated at.",
        "operationId": "LastUpdated",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connect.marketmap.v2.LastUpdatedResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/connect/marketmap/v2/market": {
      "get": {
        "summary": "Market returns a market stored in the x/marketmap\nmodule.",
        "operationId": "Market",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connect.marketmap.v2.MarketResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "currency_pair.Base",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "currency_pair.Quote",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/connect/marketmap/v2/marketmap": {
      "get": {
        "summary": "MarketMap returns the full market map stored in the x/marketmap\nmodule.  NOTE: the value returned by this query is not safe for on-chain\ncode.",
        "operationId": "MarketMap",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connect.marketmap.v2.MarketMapResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/connect/marketmap/v2/markets": {
      "get": {
        "summary": "Market returns all stored in the x/marketmap\nmodule as a sorted list.",
        "operationId": "Markets",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connect.marketmap.v2.MarketsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/connect/marketmap/v2/params": {
      "get": {
        "summary": "Params returns the current x/marketmap module parameters.",
        "operationId": "Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/connect.marketmap.v2.ParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "connect.marketmap.v2.LastUpdatedResponse": {
      "type": "object",
      "properties": {
        "last_updated": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "LastUpdatedResponse is the response type for the Query/LastUpdated RPC\nmethod."
    },
    "connect.marketmap.v2.Market": {
      "type": "object",
      "properties": {
        "ticker": {
          "$ref": "#/definitions/connect.marketmap.v2.Ticker",
          "description": "Ticker represents a price feed for a given asset pair i.e. BTC/USD. The\nprice feed is scaled to a number of decimal places and has a minimum number\nof providers required to consider the ticker valid."
        },
        "provider_configs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connect.marketmap.v2.ProviderConfig"
          },
          "description": "ProviderConfigs is the list of provider-specific configs for this Market."
        }
      },
      "description": "Market encapsulates a Ticker and its provider-specific configuration."
    },
    "connect.marketmap.v2.MarketMap": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/connect.marketmap.v2.Market"
          },
          "description": "Markets is the full list of tickers and their associated configurations\nto be stored on-chain."
        }
      },
      "description": "MarketMap maps ticker strings to their Markets."
    },
    "connect.marketmap.v2.MarketMapResponse": {
      "type": "object",
      "properties": {
        "market_map": {
          "$ref": "#/definitions/connect.marketmap.v2.MarketMap",
          "description": "MarketMap defines the global set of market configurations for all providers\nand markets."
        },
        "last_updated": {
          "type": "string",
          "format": "uint64",
          "description": "LastUpdated is the last block height that the market map was updated.\nThis field can be used as an optimization for clients checking if there\nis a new update to the map."
        },
        "chain_id": {
          "type": "string",
          "description": "ChainId is the chain identifier for the market map."
        }
      },
      "description": "MarketMapResponse is the query response for the MarketMap query."
    },
    "connect.marketmap.v2.MarketResponse": {
      "type": "object",
      "properties": {
        "market": {
          "$ref": "#/definitions/connect.marketmap.v2.Market",
          "description": "Market is the configuration of a single market to be price-fetched for."
        }
      },
      "description": "MarketResponse is the query response for the Market query."
    },
    "connect.marketmap.v2.MarketsResponse": {
      "type": "object",
      "properties": {
        "markets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connect.marketmap.v2.Market"
          },
          "description": "Markets is a sorted list of all markets in the module."
        }
      },
      "description": "MarketsResponse is the query response for the Markets query."
    },
    "connect.marketmap.v2.Params": {
      "type": "object",
      "properties": {
        "market_authorities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "MarketAuthorities is the list of authority accounts that are able to\ncontrol updating the marketmap."
        },
        "admin": {
          "type": "string",
          "description": "Admin is an address that can remove addresses from the MarketAuthorities\nlist. Only governance can add to the MarketAuthorities or change the Admin."
        }
      },
      "description": "Params defines the parameters for the x/marketmap module."
    },
    "connect.marketmap.v2.ParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/connect.marketmap.v2.Params"
        }
      },
      "description": "ParamsResponse is the response type for the Query/Params RPC method."
    },
    "connect.marketmap.v2.ProviderConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name corresponds to the name of the provider for which the configuration is\nbeing set."
        },
        "off_chain_ticker": {
          "type": "string",
          "description": "OffChainTicker is the off-chain representation of the ticker i.e. BTC/USD.\nThe off-chain ticker is unique to a given provider and is used to fetch the\nprice of the ticker from the provider."
        },
        "normalize_by_pair": {
          "$ref": "#/definitions/connect.types.v2.CurrencyPair",
          "description": "NormalizeByPair is the currency pair for this ticker to be normalized by.\nFor example, if the desired Ticker is BTC/USD, this market could be reached\nusing: OffChainTicker = BTC/USDT NormalizeByPair = USDT/USD This field is\noptional and nullable."
        },
        "invert": {
          "type": "boolean",
          "title": "Invert is a boolean indicating if the BASE and QUOTE of the market should\nbe inverted. i.e. BASE -\u003e QUOTE, QUOTE -\u003e BASE"
        },
        "metadata_JSON": {
          "type": "string",
          "description": "MetadataJSON is a string of JSON that encodes any extra configuration\nfor the given provider config."
        }
      }
    },
    "connect.marketmap.v2.Ticker": {
      "type": "object",
      "properties": {
        "currency_pair": {
          "$ref": "#/definitions/connect.types.v2.CurrencyPair",
          "description": "CurrencyPair is the currency pair for this ticker."
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "description": "Decimals is the number of decimal places for the ticker. The number of\ndecimal places is used to convert the price to a human-readable format."
        },
        "min_provider_count": {
          "type": "string",
          "format": "uint64",
          "description": "MinProviderCount is the minimum number of providers required to consider\nthe ticker valid."
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled is the flag that denotes if the Ticker is enabled for price\nfetching by an oracle."
        },
        "metadata_JSON": {
          "type": "string",
          "description": "MetadataJSON is a string of JSON that encodes any extra configuration\nfor the given ticker."
        }
      },
      "description": "Ticker represents a price feed for a given asset pair i.e. BTC/USD. The price\nfeed is scaled to a number of decimal places and has a minimum number of\nproviders required to consider the ticker valid."
    },
    "connect.types.v2.CurrencyPair": {
      "type": "object",
      "properties": {
        "Base": {
          "type": "string"
        },
        "Quote": {
          "type": "string"
        }
      },
      "title": "CurrencyPair is the standard representation of a pair of assets, where one\n(Base) is priced in terms of the other (Quote)"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
