{
  "swagger": "2.0",
  "info": {
    "title": "cosmos/consensus/v1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/cosmos/consensus/v1/params": {
      "get": {
        "summary": "Params queries the parameters of x/consensus module.",
        "operationId": "Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/cosmos.consensus.v1.QueryParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "cosmos.consensus.v1.QueryParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/tendermint.types.ConsensusParams",
          "description": "params are the tendermint consensus params stored in the consensus module.\nPlease note that `params.version` is not populated in this response, it is\ntracked separately in the x/upgrade module."
        }
      },
      "description": "QueryParamsResponse defines the response type for querying x/consensus parameters."
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "tendermint.types.ABCIParams": {
      "type": "object",
      "properties": {
        "vote_extensions_enable_height": {
          "type": "string",
          "format": "int64",
          "description": "vote_extensions_enable_height configures the first height during which\nvote extensions will be enabled. During this specified height, and for all\nsubsequent heights, precommit messages that do not contain valid extension data\nwill be considered invalid. Prior to this height, vote extensions will not\nbe used or accepted by validators on the network.\n\nOnce enabled, vote extensions will be created by the application in ExtendVote,\npassed to the application for validation in VerifyVoteExtension and given\nto the application to use when proposing a block during PrepareProposal."
        }
      },
      "description": "ABCIParams configure functionality specific to the Application Blockchain Interface."
    },
    "tendermint.types.BlockParams": {
      "type": "object",
      "properties": {
        "max_bytes": {
          "type": "string",
          "format": "int64",
          "title": "Max block size, in bytes.\nNote: must be greater than 0"
        },
        "max_gas": {
          "type": "string",
          "format": "int64",
          "title": "Max gas per block.\nNote: must be greater or equal to -1"
        }
      },
      "description": "BlockParams contains limits on the block size."
    },
    "tendermint.types.ConsensusParams": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/tendermint.types.BlockParams"
        },
        "evidence": {
          "$ref": "#/definitions/tendermint.types.EvidenceParams"
        },
        "validator": {
          "$ref": "#/definitions/tendermint.types.ValidatorParams"
        },
        "version": {
          "$ref": "#/definitions/tendermint.types.VersionParams"
        },
        "abci": {
          "$ref": "#/definitions/tendermint.types.ABCIParams"
        }
      },
      "description": "ConsensusParams contains consensus critical parameters that determine the\nvalidity of blocks."
    },
    "tendermint.types.EvidenceParams": {
      "type": "object",
      "properties": {
        "max_age_num_blocks": {
          "type": "string",
          "format": "int64",
          "description": "Max age of evidence, in blocks.\n\nThe basic formula for calculating this is: MaxAgeDuration / {average block\ntime}."
        },
        "max_age_duration": {
          "type": "string",
          "description": "Max age of evidence, in time.\n\nIt should correspond with an app's \"unbonding period\" or other similar\nmechanism for handling [Nothing-At-Stake\nattacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed)."
        },
        "max_bytes": {
          "type": "string",
          "format": "int64",
          "title": "This sets the maximum size of total evidence in bytes that can be committed in a single block.\nand should fall comfortably under the max block bytes.\nDefault is 1048576 or 1MB"
        }
      },
      "description": "EvidenceParams determine how we handle evidence of malfeasance."
    },
    "tendermint.types.ValidatorParams": {
      "type": "object",
      "properties": {
        "pub_key_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "ValidatorParams restrict the public key types validators can use.\nNOTE: uses ABCI pubkey naming, not Amino names."
    },
    "tendermint.types.VersionParams": {
      "type": "object",
      "properties": {
        "app": {
          "type": "string",
          "format": "uint64"
        }
      },
      "description": "VersionParams contains the ABCI application version."
    }
  }
}
