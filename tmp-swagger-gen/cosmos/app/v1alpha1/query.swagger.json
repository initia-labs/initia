{
  "swagger": "2.0",
  "info": {
    "title": "cosmos/app/v1alpha1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "cosmos.app.v1alpha1.Config": {
      "type": "object",
      "properties": {
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cosmos.app.v1alpha1.ModuleConfig"
          },
          "description": "modules are the module configurations for the app."
        },
        "golang_bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cosmos.app.v1alpha1.GolangBinding"
          },
          "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is global (not module specific)."
        }
      },
      "description": "Config represents the configuration for a Cosmos SDK ABCI app.\nIt is intended that all state machine logic including the version of\nbaseapp and tx handlers (and possibly even Tendermint) that an app needs\ncan be described in a config object. For compatibility, the framework should\nallow a mixture of declarative and imperative app wiring, however, apps\nthat strive for the maximum ease of maintainability should be able to describe\ntheir state machine with a config object alone."
    },
    "cosmos.app.v1alpha1.GolangBinding": {
      "type": "object",
      "properties": {
        "interface_type": {
          "type": "string",
          "title": "interface_type is the interface type which will be bound to a specific implementation type"
        },
        "implementation": {
          "type": "string",
          "title": "implementation is the implementing type which will be supplied when an input of type interface is requested"
        }
      },
      "description": "GolangBinding is an explicit interface type to implementing type binding for dependency injection."
    },
    "cosmos.app.v1alpha1.ModuleConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the unique name of the module within the app. It should be a name\nthat persists between different versions of a module so that modules\ncan be smoothly upgraded to new versions.\n\nFor example, for the module cosmos.bank.module.v1.Module, we may chose\nto simply name the module \"bank\" in the app. When we upgrade to\ncosmos.bank.module.v2.Module, the app-specific name \"bank\" stays the same\nand the framework knows that the v2 module should receive all the same state\nthat the v1 module had. Note: modules should provide info on which versions\nthey can migrate from in the ModuleDescriptor.can_migration_from field."
        },
        "config": {
          "$ref": "#/definitions/google.protobuf.Any",
          "description": "config is the config object for the module. Module config messages should\ndefine a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension."
        },
        "golang_bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cosmos.app.v1alpha1.GolangBinding"
          },
          "description": "golang_bindings specifies explicit interface to implementation type bindings which\ndepinject uses to resolve interface inputs to provider functions.  The scope of this\nfield's configuration is module specific."
        }
      },
      "description": "ModuleConfig is a module configuration for an app."
    },
    "cosmos.app.v1alpha1.QueryConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/cosmos.app.v1alpha1.Config",
          "description": "config is the current app config."
        }
      },
      "description": "QueryConfigResponse is the Query/Config response type."
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    }
  }
}
