{
  "swagger": "2.0",
  "info": {
    "title": "initia/move/v1/query.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/initia/move/v1/accounts/{address}/modules": {
      "get": {
        "summary": "Modules gets the module infos",
        "operationId": "Modules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryModulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the owner address of the modules to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/accounts/{address}/modules/{module_name}": {
      "get": {
        "summary": "Module gets the module info",
        "operationId": "Module",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryModuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the owner address of the module to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_name",
            "description": "module_name is the module name to query",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/accounts/{address}/modules/{module_name}/view_functions/{function_name}": {
      "post": {
        "summary": "Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch\nLegacyView execute view function and return the view result.",
        "operationId": "LegacyView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryLegacyViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "Address is the owner address of the module to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "module_name",
            "description": "ModuleName is the module name of the entry function to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "function_name",
            "description": "FunctionName is the name of a function to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryLegacyViewRequest"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/accounts/{address}/resources": {
      "get": {
        "summary": "Resources gets the module infos",
        "operationId": "Resources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryResourcesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the owner address of the module to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/accounts/{address}/resources/by_struct_tag": {
      "get": {
        "summary": "Resource gets the module info",
        "operationId": "Resource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the owner address of the module to query",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "struct_tag",
            "description": "struct_tag is the unique identifier of the resource to query.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/denom": {
      "get": {
        "summary": "Denom converts denom to metadata",
        "operationId": "Denom",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryDenomResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/metadata": {
      "get": {
        "summary": "Metadata converts metadata to denom",
        "operationId": "Metadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/params": {
      "get": {
        "summary": "Params queries all parameters.",
        "operationId": "Params",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryParamsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/script/abi": {
      "post": {
        "summary": "ScriptABI decode script bytes into ABI",
        "operationId": "ScriptABI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryScriptABIResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryScriptABIRequest"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/tables/{address}": {
      "get": {
        "summary": "Query table info of the given address",
        "operationId": "TableInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryTableInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the table handle",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/tables/{address}/entries": {
      "get": {
        "summary": "Query table entries with pagination",
        "operationId": "TableEntries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryTableEntriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the table handle",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pagination.key",
            "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "pagination.offset",
            "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.limit",
            "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.count_total",
            "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pagination.reverse",
            "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/tables/{address}/entries/by_key_bytes": {
      "get": {
        "summary": "Query table entry of the given key",
        "operationId": "TableEntry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryTableEntryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "description": "address is the table handle",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_bytes",
            "description": "a key of the table entry.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/view": {
      "post": {
        "summary": "Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch\nView execute view function and return the view result",
        "operationId": "View",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewRequest"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/view/batch": {
      "post": {
        "summary": "Deprecated: Use Query/ViewJSON or Query/ViewJSONBatch\nViewBatch execute multiple view functions and return the view results",
        "operationId": "ViewBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewBatchRequest"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/view/json": {
      "post": {
        "summary": "ViewJSON execute view function with json arguments and return the view result",
        "operationId": "ViewJSON",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewJSONResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewJSONRequest"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    },
    "/initia/move/v1/view/json/batch": {
      "post": {
        "summary": "ViewJSONBatch execute multiple view functions with json arguments and return the view results",
        "operationId": "ViewJSONBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewJSONBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/grpc.gateway.runtime.Error"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/initia.move.v1.QueryViewJSONBatchRequest"
            }
          }
        ],
        "tags": [
          "Query"
        ]
      }
    }
  },
  "definitions": {
    "cosmos.base.query.v1beta1.PageRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "format": "byte",
          "description": "key is a value returned in PageResponse.next_key to begin\nquerying the next page most efficiently. Only one of offset or key\nshould be set."
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "description": "offset is a numeric offset that can be used when key is unavailable.\nIt is less efficient than using key. Only one of offset or key should\nbe set."
        },
        "limit": {
          "type": "string",
          "format": "uint64",
          "description": "limit is the total number of results to be returned in the result page.\nIf left empty it will default to a value to be set by each app."
        },
        "count_total": {
          "type": "boolean",
          "description": "count_total is set to true  to indicate that the result set should include\na count of the total number of items available for pagination in UIs.\ncount_total is only respected when offset is used. It is ignored when key\nis set."
        },
        "reverse": {
          "type": "boolean",
          "description": "reverse is set to true if results are to be returned in the descending order.\n\nSince: cosmos-sdk 0.43"
        }
      },
      "description": "message SomeRequest {\n         Foo some_parameter = 1;\n         PageRequest pagination = 2;\n }",
      "title": "PageRequest is to be embedded in gRPC request messages for efficient\npagination. Ex:"
    },
    "cosmos.base.query.v1beta1.PageResponse": {
      "type": "object",
      "properties": {
        "next_key": {
          "type": "string",
          "format": "byte",
          "description": "next_key is the key to be passed to PageRequest.key to\nquery the next page most efficiently. It will be empty if\nthere are no more results."
        },
        "total": {
          "type": "string",
          "format": "uint64",
          "title": "total is total number of results available if PageRequest.count_total\nwas set, its value is undefined otherwise"
        }
      },
      "description": "PageResponse is to be embedded in gRPC response messages where the\ncorresponding request message has used PageRequest.\n\n message SomeResponse {\n         repeated Bar results = 1;\n         PageResponse page = 2;\n }"
    },
    "google.protobuf.Any": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "grpc.gateway.runtime.Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/google.protobuf.Any"
          }
        }
      }
    },
    "initia.move.v1.Module": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "module_name": {
          "type": "string"
        },
        "abi": {
          "type": "string"
        },
        "raw_bytes": {
          "type": "string",
          "format": "byte"
        },
        "upgrade_policy": {
          "$ref": "#/definitions/initia.move.v1.UpgradePolicy"
        }
      },
      "title": "Module is data for the uploaded contract move code"
    },
    "initia.move.v1.Params": {
      "type": "object",
      "properties": {
        "base_denom": {
          "type": "string"
        },
        "base_min_gas_price": {
          "type": "string"
        },
        "contract_shared_revenue_ratio": {
          "type": "string",
          "title": "CSR: Percentage of fees distributed to developers"
        },
        "script_enabled": {
          "type": "boolean",
          "title": "flag whether to enable script execution"
        },
        "allowed_publishers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "It is a list of addresses with permission to distribute contracts,\nand an empty list is interpreted as allowing anyone to distribute."
        }
      },
      "description": "Params defines the set of move parameters."
    },
    "initia.move.v1.QueryDenomResponse": {
      "type": "object",
      "properties": {
        "denom": {
          "type": "string"
        }
      },
      "description": "QueryDenomResponse is the response type for the Query/Denom RPC method."
    },
    "initia.move.v1.QueryLegacyViewRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "Address is the owner address of the module to query"
        },
        "module_name": {
          "type": "string",
          "title": "ModuleName is the module name of the entry function to query"
        },
        "function_name": {
          "type": "string",
          "title": "FunctionName is the name of a function to query"
        },
        "type_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TypeArgs is the type arguments of a function to execute\nex) \"0x1::BasicCoin::Initia\", \"bool\", \"u8\", \"u64\""
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "Args is the arguments of a function to execute\n- number: little endian\n- string: base64 bytes"
        }
      },
      "title": "QueryLegacyViewRequest is the request type for the QueryLegacyView\nRPC method"
    },
    "initia.move.v1.QueryLegacyViewResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.VMEvent"
          }
        },
        "gas_used": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "QueryLegacyViewResponse is the response type for the\nQueryLegacyView RPC method"
    },
    "initia.move.v1.QueryMetadataResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "string"
        }
      },
      "description": "QueryMetadataResponse is the response type for the Query/Metadata RPC method."
    },
    "initia.move.v1.QueryModuleResponse": {
      "type": "object",
      "properties": {
        "module": {
          "$ref": "#/definitions/initia.move.v1.Module"
        }
      },
      "title": "QueryModuleResponse is the response type for the Query/Module RPC\nmethod"
    },
    "initia.move.v1.QueryModulesResponse": {
      "type": "object",
      "properties": {
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.Module"
          }
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "title": "QueryModulesResponse is the response type for the\nQuery/Modules RPC method"
    },
    "initia.move.v1.QueryParamsResponse": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/initia.move.v1.Params",
          "description": "params defines the parameters of the module."
        }
      },
      "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
    },
    "initia.move.v1.QueryResourceResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/initia.move.v1.Resource"
        }
      },
      "title": "QueryResourceResponse is the response type for the Query/Resource RPC\nmethod"
    },
    "initia.move.v1.QueryResourcesResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.Resource"
          }
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "title": "QueryResourcesResponse is the response type for the Query/Resources RPC\nmethod"
    },
    "initia.move.v1.QueryScriptABIRequest": {
      "type": "object",
      "properties": {
        "code_bytes": {
          "type": "string",
          "format": "byte",
          "title": "CodeBytes is the script code for query operation"
        }
      },
      "title": "QueryScriptABIRequest is the request type for the Query/ScriptABI\nRPC method"
    },
    "initia.move.v1.QueryScriptABIResponse": {
      "type": "object",
      "properties": {
        "abi": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "QueryScriptABIResponse is the response type for the\nQuery/ScriptABI RPC method"
    },
    "initia.move.v1.QueryTableEntriesResponse": {
      "type": "object",
      "properties": {
        "table_entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.TableEntry"
          }
        },
        "pagination": {
          "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
          "description": "pagination defines the pagination in the response."
        }
      },
      "title": "QueryTableEntriesResponse is the response type for the Query/TableEntries RPC\nmethod"
    },
    "initia.move.v1.QueryTableEntryResponse": {
      "type": "object",
      "properties": {
        "table_entry": {
          "$ref": "#/definitions/initia.move.v1.TableEntry"
        }
      },
      "title": "QueryTableEntryResponse is the response type for the Query/TableEntry RPC\nmethod"
    },
    "initia.move.v1.QueryTableInfoResponse": {
      "type": "object",
      "properties": {
        "table_info": {
          "$ref": "#/definitions/initia.move.v1.TableInfo"
        }
      },
      "title": "QueryTableInfoResponse is the response type for the Query/TableInfo RPC\nmethod"
    },
    "initia.move.v1.QueryViewBatchRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.QueryViewRequest"
          }
        }
      },
      "title": "QueryViewBatchRequest is the request type for the QueryViewBatch\nRPC method"
    },
    "initia.move.v1.QueryViewBatchResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.QueryViewResponse"
          }
        }
      },
      "title": "QueryViewBatchResponse is the response type for the\nQueryViewBatch RPC method"
    },
    "initia.move.v1.QueryViewJSONBatchRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.QueryViewJSONRequest"
          }
        }
      },
      "title": "QueryViewJSONBatchRequest is the request type for the QueryViewJSONBatch\nRPC method"
    },
    "initia.move.v1.QueryViewJSONBatchResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.QueryViewJSONResponse"
          }
        }
      },
      "title": "QueryViewJSONBatchResponse is the response type for the\nQueryViewJSONBatch RPC method"
    },
    "initia.move.v1.QueryViewJSONRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "Address is the owner address of the module to query"
        },
        "module_name": {
          "type": "string",
          "title": "ModuleName is the module name of the entry function to query"
        },
        "function_name": {
          "type": "string",
          "title": "FunctionName is the name of a function to query"
        },
        "type_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TypeArgs is the type arguments of a function to execute\nex) \"0x1::BasicCoin::Initia\", \"bool\", \"u8\", \"u64\""
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Args is the arguments of a function to execute in json stringify format"
        }
      },
      "title": "QueryViewJSONRequest is the request type for the QueryViewJSON\nRPC method"
    },
    "initia.move.v1.QueryViewJSONResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.VMEvent"
          }
        },
        "gas_used": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "QueryViewJSONResponse is the response type for the\nQueryViewJSON RPC method"
    },
    "initia.move.v1.QueryViewRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "Address is the owner address of the module to query"
        },
        "module_name": {
          "type": "string",
          "title": "ModuleName is the module name of the entry function to query"
        },
        "function_name": {
          "type": "string",
          "title": "FunctionName is the name of a function to query"
        },
        "type_args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "TypeArgs is the type arguments of a function to execute\nex) \"0x1::BasicCoin::Initia\", \"bool\", \"u8\", \"u64\""
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "Args is the arguments of a function to execute\n- number: little endian\n- string: base64 bytes"
        }
      },
      "title": "QueryViewRequest is the request type for the QueryView\nRPC method"
    },
    "initia.move.v1.QueryViewResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/initia.move.v1.VMEvent"
          }
        },
        "gas_used": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "QueryViewResponse is the response type for the\nQueryView RPC method"
    },
    "initia.move.v1.Resource": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "struct_tag": {
          "type": "string"
        },
        "move_resource": {
          "type": "string"
        },
        "raw_bytes": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "Resource is data for the stored move resource"
    },
    "initia.move.v1.TableEntry": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "key_bytes": {
          "type": "string",
          "format": "byte"
        },
        "value_bytes": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "TableEntry is data stored under Table address and the key bytes"
    },
    "initia.move.v1.TableInfo": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "key_type": {
          "type": "string"
        },
        "value_type": {
          "type": "string"
        }
      },
      "title": "TableInfo is data stored under Table address"
    },
    "initia.move.v1.UpgradePolicy": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "COMPATIBLE",
        "IMMUTABLE"
      ],
      "default": "UNSPECIFIED",
      "description": "UpgradePolicy is the policy for upgrading a move module.\n\n - UNSPECIFIED: UNSPECIFIED: a placeholder for an unspecified upgrade policy.\n - COMPATIBLE: COMPATIBLE: Whether a compatibility check should be performed for upgrades. The check only passes if\na new module has (a) the same public functions (b) for existing resources, no layout change.\n - IMMUTABLE: IMMUTABLE: Whether the modules in the package are immutable and cannot be upgraded."
    },
    "initia.move.v1.VMEvent": {
      "type": "object",
      "properties": {
        "type_tag": {
          "type": "string"
        },
        "data": {
          "type": "string"
        }
      },
      "description": "VMEvent is the event emitted from vm."
    }
  }
}
