package app

import (
	"bytes"
	"context"
	"encoding/base64"
	"errors"

	sdkerrors "cosmossdk.io/errors"
	upgradetypes "cosmossdk.io/x/upgrade/types"
	"github.com/cosmos/cosmos-sdk/types/module"

	movetypes "github.com/initia-labs/initia/x/move/types"
	vmtypes "github.com/initia-labs/movevm/types"
)

const upgradeName056 = "0.5.6"
const upgradeName060 = "0.6.0"

// RegisterUpgradeHandlers returns upgrade handlers
func (app *InitiaApp) RegisterUpgradeHandlers(cfg module.Configurator) {
	app.UpgradeKeeper.SetUpgradeHandler(
		upgradeName056,
		func(ctx context.Context, _ upgradetypes.Plan, vm module.VersionMap) (module.VersionMap, error) {
			// diff: https://github.com/initia-labs/movevm/compare/v0.4.12...v0.5.0
			codes := []string{
				// cosmos.move
				"oRzrCwYAAAALAQAQAhAaAyqXAQTBAQIFwwGQBAfTBZ4FCPEKIAaRCxoQqwt0Cp8MGgy5DPUJAAAACAAPABEAEgAZACgAMAABAwAABQMAAQcHAAIOBwEAAQMQCwAGJwgAAA0AAQAEEwIDAAEUBAUAABUGAQAAFgcBAAAXCAEAAAIBCgAAGAwKAAUaDQ0AARsEDgAAHAEKAAAdDAoAAB4QAQAAHxEBAAAgEgEAACEVAQAAIhcBAAAjGQEAACQaAQAAJRwBAAAmHgEAACkfAQAAKiEBAAArIgEAACwkAQAALSUBAAAuJwEAAS8TFAAHMSkTAQIAMisBABwoBAYMCAILAwEIBAMAAQYMAQUBBggCAQYKAgQFCgIGCwMBCAQDCgYMCAILAwEIBAMIAggCAwMDCAIKBQoCBgsDAQgEAwoCCgIDAwMKAgYKAgoCCgIGCwMBCAQKAgUBCAABAgIDCAIBAwEBAwMKAgEDBgwLAwEIBAMDBQYLAwEIBAMGBgwFCAIIAgoIAgoKAgEKAgEIAgcFBQoCCgIKCgIKCgIBDQYKCAIKCgIDAwoCCgIFBwoKAgYIAgoCAwoKAgEGBgwFCAIIAgoIAgoIAg8GCggCCgoCAwMKAgoCBQcKCgIGCAIKAgMKCgIKCgIKCgIBBAYMCgIKCAIKCgIFBQoCCgoCCgoCAQsGCggCCgoCAwMFBwoKAgYIAgoCAwoKAgEEBgwKAgoIAgoIAg0GCggCCgoCAwMFBwoKAgYIAgoCAwoKAgoKAgoKAgEKBgwIAgsDAQgFCggCCAIIAgMDAwgCCgUKAgYLAwEIBQoKAgoCCgIDAwMKAg4GCggCCgoCAwMGCwMBCAUKAgUHCgoCBggCCgIDCgoCCgIKAgkGDAgCCAILAwEIBAMLAwEIBAMLAwEIBAMJBQoCCgIGCwMBCAQDBgsDAQgEAwYLAwEIBAMGBgsDAQgEBgsDAQgEBgsDAQgECgIKAgUCBgwKAgMFCgIIAAIIAAUFBgwDCAIDCAIBCAEBBgkAAggBCgIDBgwKAggABmNvc21vcwdPcHRpb25zDWFsbG93X2ZhaWx1cmULY2FsbGJhY2tfaWQMY2FsbGJhY2tfZmlkC1ZvdGVSZXF1ZXN0Bl90eXBlXwZTdHJpbmcGc3RyaW5nC3Byb3Bvc2FsX2lkBXZvdGVyBm9wdGlvbghtZXRhZGF0YQhkZWxlZ2F0ZQZPYmplY3QGb2JqZWN0CE1ldGFkYXRhDmZ1bmdpYmxlX2Fzc2V0BnNpZ25lcgphZGRyZXNzX29mBWJ5dGVzEWRlbGVnYXRlX2ludGVybmFsCHRyYW5zZmVyEXRyYW5zZmVyX2ludGVybmFsG2FsbG93X2ZhaWx1cmVfd2l0aF9jYWxsYmFjawVlcnJvchBpbnZhbGlkX2FyZ3VtZW50CGlzX2VtcHR5EGRpc2FsbG93X2ZhaWx1cmUeZGlzYWxsb3dfZmFpbHVyZV93aXRoX2NhbGxiYWNrE2Z1bmRfY29tbXVuaXR5X3Bvb2wcZnVuZF9jb21tdW5pdHlfcG9vbF9pbnRlcm5hbAxtb3ZlX2V4ZWN1dGUVbW92ZV9leGVjdXRlX2ludGVybmFsFm1vdmVfZXhlY3V0ZV93aXRoX2pzb24LbW92ZV9zY3JpcHQUbW92ZV9zY3JpcHRfaW50ZXJuYWwVbW92ZV9zY3JpcHRfd2l0aF9qc29uDG5mdF90cmFuc2ZlcgpDb2xsZWN0aW9uCmNvbGxlY3Rpb24VbmZ0X3RyYW5zZmVyX2ludGVybmFsB3BheV9mZWUQcGF5X2ZlZV9pbnRlcm5hbAhzdGFyZ2F0ZRFzdGFyZ2F0ZV9pbnRlcm5hbA1zdGFyZ2F0ZV92b3RlBHV0ZjgEanNvbgdtYXJzaGFsFXN0YXJnYXRlX3dpdGhfb3B0aW9ucwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCgIXFi9jb3Ntb3MuZ292LnYxLk1zZ1ZvdGUUY29tcGlsYXRpb25fbWV0YWRhdGEJAAMyLjADMi4wE2luaXRpYTo6bWV0YWRhdGFfdjBAAgEAAAAAAAAAFEVJTlZBTElEX0NBTExCQUNLX0lEAAIAAAAAAAAAFUVJTlZBTElEX0NBTExCQUNLX0ZJRAAAAAACAwIBAwMECgIBAgUGCAIJAwoIAgsDDAgCAAEEAAEJCwARAQ4BEQIUDgILAxEDAgQBBAAJGwsAEQEOARECFA4CDgQRAhQOBRECFA4JEQIUDAoMCwwMCwMLDAsLCwYLBwsICwoRBQIGAQAAAQUIBgAAAAAAAAAAQAsAAAAAAAAAABIAAgcBAAAPGAoABgAAAAAAAAAAJAQFBQgGAQAAAAAAAAARCCcOAREJAwwFDwYCAAAAAAAAABEIJwgOARECFAwDCwALAxIAAgMAAgAKAQAAAQUJBgAAAAAAAAAAQAsAAAAAAAAAABIAAgsBAAAPGAoABgAAAAAAAAAAJAQFBQgGAQAAAAAAAAARCCcOAREJAwwFDwYCAAAAAAAAABEIJwkOARECFAwDCwALAxIAAgwBBAABBgsAEQEOAQsCEQ0CDQACAA4BBAAWOQsAEQEOAhECFA4DEQIUDgQMBkATAAAAAAAAAAAMBwYAAAAAAAAAAAoGQRQMCAwJDAoMCwwMCgkKCCMEKAoGCglCFA0HDA0RAhQMDwsNCw9EEwsJBgEAAAAAAAAAFgwJBSsLBgEFLAUUCwcMEQkMEgsMCwELCwsKCxELBQsSEQ8CDwACABABBAAYXAsAEQEOAhECFA4DEQIUDgQMBkATAAAAAAAAAAAMBwYAAAAAAAAAAAoGQRQMCAwJDAoMCwwMCgkKCCMEKAoGCglCFA0HDA0RAhQMDwsNCw9EEwsJBgEAAAAAAAAAFgwJBSsLBgEFLAUUCwcMEQ4FDAZAEwAAAAAAAAAADBIGAAAAAAAAAAAKBkEUDAgMCQoJCggjBEsKBgoJQhQNEgwNEQIUDA8LDQsPRBMLCQYBAAAAAAAAABYMCQVOCwYBBU8FNwsSDBMIDBQLDAsBCwsLCgsRCxMLFBEPAhEBBAAbLwsAEQEOAgwEQBMAAAAAAAAAAAwFBgAAAAAAAAAACgRBFAwGDAcMCAoHCgYjBCAKBAoHQhQNBQwJEQIUDAsLCQsLRBMLBwYBAAAAAAAAABYMBwUjCwQBBSQFDAsFDA0JDA4LCAsBCw0LAwsOERICEgACABMBBAAdUgsAEQEOAgwEQBMAAAAAAAAAAAwFBgAAAAAAAAAACgRBFAwGDAcMCAoHCgYjBCAKBAoHQhQNBQwJEQIUDAsLCQsLRBMLBwYBAAAAAAAAABYMBwUjCwQBBSQFDAsFDA0OAwwEQBMAAAAAAAAAAAwOBgAAAAAAAAAACgRBFAwGDAcKBwoGIwRDCgQKB0IUDQ4MCRECFAwLCwkLC0QTCwcGAQAAAAAAAAAWDAcFRgsEAQVHBS8LDgwPCAwQCwgLAQsNCw8LEBESAhQBBAAgRAsAEQEOARECFA4CDgMMCkATAAAAAAAAAAAMCwYAAAAAAAAAAAoKQRQMDAwNDA4MDwwQCg0KDCMEJgoKCg1CFA0LDBERAhQMEwsRCxNEEwsNBgEAAAAAAAAAFgwNBSkLCgEFKgUSCwsMFQ4EEQIUDgURAhQOCRECFAwWDBcMEwsQCw8LDgsVCxMLFwsGCwcLCAsWERUCFQACABYBBAAjFAsAEQEOARECFA4CEQIUDgMOBQ4HDAkMCgsECwoLBgsJCwgRFwIXAAIAGAEEACYICwARAREKDAILAQsCERkCGQACABoBBAAqDwcAERsLAQsCCwMLBBIBDAUOBTgADAYLAAsGERgCHQEAAAEGCwARAQsBCwIRGQIFAAIAAA==",
				// coin.move
				"oRzrCwYAAAANAQAYAhhGA17pAgTHAyAF5wP4AgffBsIICKEPIAbBDzwQ/Q/jAgrgEjEMkRPmBg33GQwPgxoEAAAABAAGABYAGAAlADAAMgA3ADkASABRAAEGAAEDBwEAAQIFCwAABwABAAEACQYAAAsGAAAMCAACDgYAAhAGAAISBgAAEwYAAxUHAAIfAAAFJAcBAAABPwYAAUECAAAUAAEAAhQDAQEIABcFBAAEFwYEAQgAAgcAAAAZBwgAARoIAwEIABsAAQACGwMBAQgAHAAJAAIcAwkBCAAdCgsABB0MCwEIAB4NBAABIA4IAQgCHg8EAAAhEQQABCERBAAAIgoSAAQiDBIBCAAjABMAAiMDEwEIACYUFQACJhYVAAAnFwQABCYYBAAAKBEEAAQoEQQAACkZBAAAKhoEAAQpBgQBCAArABMAAisDEwEIACwbFQAELBwVAQgDLR0eAAEuHwgAAC8gIQAELyAhAAYxGggABzMLCwAANAEAAAM1HQsAAzYiAQAIOB0jAAk6IwgAADslBAAEPCYEAAA9KCkAAD4oKgABQCwtAARCLgQAAkMvMAACRC8xAAJFLzIAAUYvMwABRy8IAApJNQQBAgFKLwMBCAFLLzYAAEwIEgAATQcSAABOAAEAAU84EgEIA1AjAQALUjkjAQAIUx4BAANUOgQAAFUlBAABAgMCBgIIAgoCDAIOAhMCFQIeAiACIgI5NDoCPwJBCAELAQEIAgEICwEIAgELAQEJAAAEBgwFCwEBCAIDBAYMCwEBCQAFAwIFCAsBBQECAgULAQEIAgEDAgULAQEJAAIGCAAIDAEGCwEBCQACBggICAwCCwEBCAIFAgUIDAEBAQsNAQQCBggKAwEIDAIGCAcDAwYICgUDAwYIBwUDBQYMBgwFCwEBCAIDAQYMAwYMCwEBCAIDAwYMCwEBCQADAQYICwEGCgICBgUKAgMFCw0BBQICCgsBAQgCCgMDBggLAwMBCgIICgIICwEDBggLAwgLBQIGCAUFAwYICQUBBAsBAQgCBQEGCAkHBgwLDQEECAsICwIICwgLAwgKCAAIBQQICggACAUIDgMIBQgACAoCBgwKAgEIDwcGCA8LDQEECAsICwIICwgLAQYIDwEIBwEICAEICQEMAQgEAQkAAQgOCQoCCA8GCA8MCAkICAgHCAYLAQEIAgILAQEJAAUBBgkAAgcICwgLCQUFAQgLCAsICwgLCgIHCAsEY29pbg5CdXJuQ2FwYWJpbGl0eQhtZXRhZGF0YQZPYmplY3QGb2JqZWN0CE1ldGFkYXRhDmZ1bmdpYmxlX2Fzc2V0BENvaW4LZHVtbXlfZmllbGQQQ29pbkNyZWF0ZWRFdmVudA1tZXRhZGF0YV9hZGRyEEZyZWV6ZUNhcGFiaWxpdHkMTWFuYWdpbmdSZWZzCG1pbnRfcmVmB01pbnRSZWYIYnVybl9yZWYHQnVyblJlZgx0cmFuc2Zlcl9yZWYLVHJhbnNmZXJSZWYOTWludENhcGFiaWxpdHkEbmFtZQZTdHJpbmcGc3RyaW5nCHRyYW5zZmVyFnByaW1hcnlfZnVuZ2libGVfc3RvcmUQbWV0YWRhdGFfYWRkcmVzcxFhZGRyZXNzX3RvX29iamVjdAZzeW1ib2wIZGVjaW1hbHMHYmFsYW5jZQRidXJuDUZ1bmdpYmxlQXNzZXQOb2JqZWN0X2FkZHJlc3MHZGVwb3NpdAlpc19mcm96ZW4HbWF4aW11bQZPcHRpb24Gb3B0aW9uBG1pbnQHbWludF90bwxzdWRvX2RlcG9zaXQNc3Vkb190cmFuc2ZlcgpjaGVja19zdWRvBnN1cHBseQh3aXRoZHJhdwVieXRlcxVjcmVhdGVfb2JqZWN0X2FkZHJlc3MIYmFsYW5jZXMGc2lnbmVyCmFkZHJlc3Nfb2YFZXJyb3IRcGVybWlzc2lvbl9kZW5pZWQRZGVub21fdG9fbWV0YWRhdGEGbGVuZ3RoCnN1Yl9zdHJpbmcDaGV4DWRlY29kZV9zdHJpbmcIZnJvbV9iY3MKdG9fYWRkcmVzcxFmcmVlemVfY29pbl9zdG9yZQ9zZXRfZnJvemVuX2ZsYWcKaW5pdGlhbGl6ZSJpbml0aWFsaXplX2FuZF9nZW5lcmF0ZV9leHRlbmRfcmVmCUV4dGVuZFJlZhNjcmVhdGVfbmFtZWRfb2JqZWN0DkNvbnN0cnVjdG9yUmVmK2NyZWF0ZV9wcmltYXJ5X3N0b3JlX2VuYWJsZWRfZnVuZ2libGVfYXNzZXQRZ2VuZXJhdGVfbWludF9yZWYRZ2VuZXJhdGVfYnVybl9yZWYVZ2VuZXJhdGVfdHJhbnNmZXJfcmVmD2dlbmVyYXRlX3NpZ25lchxhZGRyZXNzX2Zyb21fY29uc3RydWN0b3JfcmVmBWV2ZW50BGVtaXQbb2JqZWN0X2Zyb21fY29uc3RydWN0b3JfcmVmE2dlbmVyYXRlX2V4dGVuZF9yZWYHaXNfY29pbhFpc19jb2luX2J5X3N5bWJvbBFtZXRhZGF0YV90b19kZW5vbQhpc19vd25lcgR1dGY4A2Jjcwh0b19ieXRlcxBlbmNvZGVfdG9fc3RyaW5nBmFwcGVuZBN1bmZyZWV6ZV9jb2luX3N0b3JlDG1hbmFnZWRfY29pbgdzdGFraW5nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCgIGBW1vdmUvCgIFBElOSVQKAgYFdWluaXQUY29tcGlsYXRpb25fbWV0YWRhdGEJAAMyLjADMi4wE2luaXRpYTo6bWV0YWRhdGFfdjCuAgIBAAAAAAAAAA1FVU5BVVRIT1JJWkVEAAIAAAAAAAAAG0VSUl9NQU5BR0lOR19SRUZTX05PVF9GT1VORBpNYW5hZ2luZ1JlZnMgaXMgbm90IGZvdW5kLgEQQ29pbkNyZWF0ZWRFdmVudAEEAA4EbmFtZQEBAAZzdXBwbHkBAQAGc3ltYm9sAQEAB2JhbGFuY2UBAQAHaXNfY29pbgEBAAdtYXhpbXVtAQEACGJhbGFuY2VzAQEACGRlY2ltYWxzAQEACG1ldGFkYXRhAQEACWlzX2Zyb3plbgEBABBtZXRhZGF0YV9hZGRyZXNzAQEAEWRlbm9tX3RvX21ldGFkYXRhAQEAEWlzX2NvaW5fYnlfc3ltYm9sAQEAEW1ldGFkYXRhX3RvX2Rlbm9tAQEAAAIBAgsBAQgCAwIBCAEEAgEKBQUCAQILAQEIAgYCAw0IBw8ICBEICQoCAQILAQEIAgABAAAEAwsAOAACAgEEAAQGCwALAgsBCwM4AQIEAQAABAULAAsBEQU4AgIHAQAABAMLADgDAgkBAAAEAwsAOAQCCwEAAAQECwALATgFAg0BAAEEEBMLABAAFAwCDgI4BgwDCgMpBAQLBQ0GAgAAAAAAAAAnCwMrBBABCwERDwIQAQAABAQLAAsBERECEgEAAAQECwALATgHAhQBAAAEAwsAOAgCFgEAAQQQEwsAEAIUDAIOAjgGDAMKAykEBAsFDQYCAAAAAAAAACcLAysEEAMLAREXAhgBAAEEEBQLABACFAwDDgM4BgwECgQpBAQLBQ0GAgAAAAAAAAAnCwQrBBADCwELAhEZAhoDAAAEBAsACwERGwIcAQQABAgLABEdCwELAwsCCwQ4CQIfAQAABAMLADgKAiEBAAAEBQsACwELAjgLAgUBAAAEBg4ADgERIxQRJAIlAQAABAULAAsBCwIRJgIdAAAABAoLABEnBwAhBAYFCQYBAAAAAAAAABEoJwIpAQAAJC4OABEqBgUAAAAAAAAAJAQSBwEMAQ4BDgAGAAAAAAAAAAAGBQAAAAAAAAARKwwCDgIRIyEMAwUUCQwDCwMEJw4AESoOAAYFAAAAAAAAAAwEDAUMBgsFCwQLBhErDAcOBxEsES0MCAUrBwALABEFDAgLCDgCAi4BAAEEJxQLABAEFAwCDgI4BgwDCgMpBAQLBQ0GAgAAAAAAAAAnCwMrBBAFCwEIES8CMAEAACsKCwALAQsCCwMLBAsFCwYRMQECMQEAADcyDgMRIxQMBwsACwcRMgwIDggMCQoJCwELAgsDCwQLBQsGETMKCRE0CgkRNQoJETYKCRE3DAoOCgwAEgQMDgsACw4tBAoJETgSAjgMCgk4DQwPCg8SBQoPEgALDxIDCwkROwI8AQAABAMLACkEAj0BAAAEBQsACwERBSkEAj4BAAA7Ng4AOAYMAQoAEQcLAAcAOA4MAwwECwMEFgoEDAUHAhFADAYLBQsGIQwDBRgJDAMLAwQeBwMRQAwEBR4HAAoEEQUKASEEJgsEAgcBEUAMBw4BOA8MCA4IEUINBwwJDAQLCQsEEUMLBwJEAQABBCcUCwAQBBQMAg4COAYMAwoDKQQECwUNBgIAAAAAAAAAJwsDKwQQBQsBCREvAgAABAEFAAQAAwAEAgBWAFcA",
			}

			modules := make([]vmtypes.Module, len(codes))
			for i, code := range codes {
				codeBz, err := base64.StdEncoding.DecodeString(code)
				if err != nil {
					return nil, sdkerrors.Wrap(err, "failed to decode module code")
				}

				modules[i] = vmtypes.NewModule(codeBz)
			}

			err := app.MoveKeeper.PublishModuleBundle(ctx, vmtypes.StdAddress, vmtypes.NewModuleBundle(modules...), movetypes.UpgradePolicy_COMPATIBLE)
			if err != nil {
				return nil, sdkerrors.Wrap(err, "failed to publish module bundle")
			}

			return vm, nil
		},
	)

	app.UpgradeKeeper.SetUpgradeHandler(
		upgradeName060,
		func(ctx context.Context, _ upgradetypes.Plan, vm module.VersionMap) (module.VersionMap, error) {

			// 1. publish new code module first

			encodedCodeModule := "oRzrCwcAAAoMAQAUAhQ4A0z6AQTGAiIF6AKaAweCBsQFCMYLIAbmCyIQiAzXBgrfEiAM/xL6CA35GwgAAAAEAAYADwASABUAHQAgACQANwABCAABAwQCAwEAAQIFBwAABwcAAAkGAAALCAAFFwcCAAAAAAYcBwEAAQgmBwEAAAEoAgIDAQABAAwAAQABAA4CAAABAxAEBQEAAQMRBgUBAAEEEwcHAAEAFAkAAAEFFgALAgQEAQUYDQUCBAQBBRkOAAIEBAEAGhAFAAEAGxEAAAEGHhMDAQgBBB8HBwABByEUAwABBiIVBQEIAQQjBwcAAQglABYBAAEBJxgZAgMAAQEpGQUCAwABASoZGgIDAAEAKwcAAAEALB0AAAEBLQAeAgMEAQEZHwACAwABAC4gAAABAC8UAAABADAjAAABADEkAAABADIlAAABAA0ABwABADMnAAABAREpBQIDAAEBNCkqAgMAAQA1LAAAAQE2LS4CAwABCTgwAAECAQA5MgAAAQIDAwMGCgcKCAoLEg4SEAwRFxIXExcWFxcXHxcgFyIXIy8AAQoFAgYKBQUBBQEGCgkAAQECBgoJAAYJAAEDAgEGBQEGCggCAggCAQELBgIJAAkBAQgCAgYLBgIJAAkBBgkAAwcLBgIJAAkBCQAJAQULBgIIAgEDAwYIAgMCAgICBgwLBwEIAAEIAAEGCwcBCQABBgwCCwcBCQAFAQsIAQkAAggCCAMEBwsBAgkACQELCAEJAAsIAQkAAgEHCwkCCQAJAQIJAAcJAQcFCwcBCAAFBwsJAggCCAMCBwgDBwIBBwgFAwYMCggCCgUBCwECCQAJAQMHCwECCQAJAQkACQECBgwKBQoGCggCCwECCAIIAwMDBwsBAggCCAMGCAIIAwgCAwgAAQgFBAYMCggCCgoCAgMGDAoKAgIDBQoKAgIBBwoFAwoKBQoKCAICAQoIAgIGCwECCQAJAQkAAQYJAQUKBQoIAgUIAgYIAAMGDAoIAgICBwsBAgkACQEJAAEHCQEBCAQBCQARBgoIAgcIBQIBBQYMCAADBwsBAggCCAMDAwYIAggCBwgDBwIIAwMFBgwKCAIKCgUKCggCAgRjb2RlDU1ldGFkYXRhU3RvcmUIbWV0YWRhdGEFVGFibGUFdGFibGUGU3RyaW5nBnN0cmluZw5Nb2R1bGVNZXRhZGF0YQ51cGdyYWRlX3BvbGljeRRNb2R1bGVQdWJsaXNoZWRFdmVudAltb2R1bGVfaWQLTW9kdWxlU3RvcmUSYWxsb3dlZF9wdWJsaXNoZXJzDXRvdGFsX21vZHVsZXMOYXNzZXJ0X2FsbG93ZWQGdmVjdG9yCGlzX2VtcHR5CGNvbnRhaW5zBWVycm9yEGludmFsaWRfYXJndW1lbnQVYXNzZXJ0X25vX2R1cGxpY2F0aW9uCnNpbXBsZV9tYXAGY3JlYXRlCVNpbXBsZU1hcAxjb250YWluc19rZXkDYWRkHGNhbl9jaGFuZ2VfdXBncmFkZV9wb2xpY3lfdG8SZnJlZXplX2NvZGVfb2JqZWN0Bk9iamVjdAZvYmplY3QOb2JqZWN0X2FkZHJlc3MJbm90X2ZvdW5kBnNpZ25lcgphZGRyZXNzX29mCGlzX293bmVyEXBlcm1pc3Npb25fZGVuaWVkBm9wdGlvbgRub25lBk9wdGlvbghpdGVyX211dAlUYWJsZUl0ZXILcHJlcGFyZV9tdXQIbmV4dF9tdXQWaW5jcmVhc2VfdG90YWxfbW9kdWxlcwxpbml0X2dlbmVzaXMDbmV3FnNldF9hbGxvd2VkX3B1Ymxpc2hlcnMLaW5pdF9tb2R1bGUHcHVibGlzaApwdWJsaXNoX3YyD3JlcXVlc3RfcHVibGlzaCJ2ZXJpZnlfZGVwZW5kZW5jaWVzX3VwZ3JhZGVfcG9saWN5BmJvcnJvdx12ZXJpZnlfbW9kdWxlc191cGdyYWRlX3BvbGljeQpib3Jyb3dfbXV0BWV2ZW50BGVtaXQWdmVyaWZ5X3B1Ymxpc2hfcmVxdWVzdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARRjb21waWxhdGlvbl9tZXRhZGF0YQkAAzIuMAMyLjATaW5pdGlhOjptZXRhZGF0YV92MKIGCgEAAAAAAAAAEkVVUEdSQURFX0lNTVVUQUJMRSRDYW5ub3QgdXBncmFkZSBhbiBpbW11dGFibGUgcGFja2FnZS4CAAAAAAAAABZFVVBHUkFERV9XRUFLRVJfUE9MSUNZMkNhbm5vdCBkb3duZ3JhZGUgYSBwYWNrYWdlJ3MgdXBncmFkYWJpbGl0eSBwb2xpY3kuAwAAAAAAAAAbRVVQR1JBREVfUE9MSUNZX1VOU1BFQ0lGSUVEIFVwZ3JhZGUgcG9saWN5IGlzIG5vdCBzcGVjaWZpZWQuBAAAAAAAAAAXRUlOVkFMSURfQ0hBSU5fT1BFUkFUT1I5VGhlIG9wZXJhdGlvbiBpcyBleHBlY3RlZCB0byBiZSBleGVjdXRlZCBieSBjaGFpbiBzaWduZXIuBQAAAAAAAAAbRUlOVkFMSURfQUxMT1dFRF9QVUJMSVNIRVJTJ2FsbG93ZWRfcHVibGlzaGVycyBhcmd1bWVudCBpcyBpbnZhbGlkLgYAAAAAAAAAFEVEVVBMSUNBVEVfTU9EVUxFX0lEHFRoZSBtb2R1bGUgSUQgaXMgZHVwbGljYXRlZC4HAAAAAAAAABJFTk9UX1BBQ0tBR0VfT1dORVImTm90IHRoZSBvd25lciBvZiB0aGUgcGFja2FnZSByZWdpc3RyeS4IAAAAAAAAABtFQ09ERV9PQkpFQ1RfRE9FU19OT1RfRVhJU1QdYGNvZGVfb2JqZWN0YCBkb2VzIG5vdCBleGlzdC4JAAAAAAAAABRFUEFDS0FHRV9ERVBfTUlTU0lORzpEZXBlbmRlbmN5IGNvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBhbnkgcHVibGlzaGVkIHBhY2thZ2UuCgAAAAAAAAASRURFUF9XRUFLRVJfUE9MSUNZMUEgZGVwZW5kZW5jeSBjYW5ub3QgaGF2ZSBhIHdlYWtlciB1cGdyYWRlIHBvbGljeS4BFE1vZHVsZVB1Ymxpc2hlZEV2ZW50AQQAAg10b3RhbF9tb2R1bGVzAQEAEmFsbG93ZWRfcHVibGlzaGVycwEBAAACAQILAQIIAggDAwIBCAIEAgIKCAIIAgUCAgwKBQ0DAAEAAQMABQcAKwMQABQCAQAAAAgVCgA4AAQICwABCAwCBQ4OAQwDCwALAzgBDAILAgQRBRQGBQAAAAAAAAARBCcCBQAAAA8qOAIMAQYAAAAAAAAAAAwCCgBBDAwDCgIKAyMEJQoACgJCDAwEDgEKBDgDAxQFGwsAAQsEAQYGAAAAAAAAABEEJw0BCwQUCDgECwIGAQAAAAAAAAAWDAIFKAsAAQUpBQcCCQEAAAAECwALASUCCgEAAQAbMQ4BOAUMAgoCKQAEBwUMCwABBggAAAAAAAAAEQwnCwEMAwsAEQ0MBAsDCwQ4BgQWBRkGBwAAAAAAAAARDycLAioADwE4BzgHMQE4CAwFCgU4CQMnCwUBBTAKBTgKDwIMCDECCwgVAQUhAhQAAAEDHAwHACoDDAEKARADFAsAFgsBDwMVAhUAAAEDIT4KABENBwAhBAYFCwsAAQYEAAAAAAAAABEPJw4BEQU4CwwEDgEMAwYAAAAAAAAAAAwFCgNBDAwGCgUKBiMELQoDCgVCDA0EDAcUMQESAQwJDAoLBwsKCwk4DAsFBgEAAAAAAAAAFgwFBTALAwEFMQUWCwQSAAwMCgALDC0ACwALAhEYDgFBDBEUAhkAAAAiCEADAAAAAAAAAAAGAAAAAAAAAAASAwwBCwALAS0DAhoBBAAABQsACwILAxEbAhsBBAAABgsAEQ0LAQsCERwCHAACABgBBAEDJhQLABENBwAhBAYFCQYEAAAAAAAAABEPJw4BBwARAQcAKgMPAAwCCwELAhUCHQEAAQMABQcAKwMQAxQCHgAAAQArPw4AQQEGAAAAAAAAAAAkBDwNAEUBDAMNAUUoDAQOA0EDBgAAAAAAAAAAJAQ5DQNFAwwFDQRFDAwGCgUpAAQaBR0GCQAAAAAAAAARDCcLBSsADAcKBxABCgY4DQQmBSsLBwEGCQAAAAAAAAARDCcLBxABCwY4DhACFAoCJgQ1BTgGCgAAAAAAAAARBCcFOgU7BQsFPQU+BQACIQAAAgADMaIBDgERBQcAKgMMBAoCMQEhBAwIDAYFEAoCMQIhDAYLBgQTBRoLAAELBAEGAwAAAAAAAAARBCcKABENDAcLBBAACgcRAQoHKQADLQsADAg4CxIADAkLCAsJLQAFLwsAAQYAAAAAAAAAAAwKCwcqAA8BDAsOAQwDBgAAAAAAAAAADAwKA0EMDA0KDAoNIwSUAQoDCgxCDAwOCgsuCg4UOA0EfAoOFAwPCgsLDzgPDBAKEBACFDECIwRYBWMLCwELAwELDgELEAEGAQAAAAAAAAARBCcKEBACFAoCEQkEagV1CwsBCwMBCw4BCxABBgIAAAAAAAAAEQQnCxAPAgwRCgILERUFigEKDhQKAhIBDBIMDwoLCw8LEjgMCwoGAQAAAAAAAAAWDAoLDhQKAhICOBALDAYBAAAAAAAAABYMDAWZAQsLAQsDAQWaAQU8CgoGAAAAAAAAAAAkBKEBCwoRFAWhAQIkAAACAAMACQsACwEKBBEhCwILAwsEER4CAwAAAAEAAwEA"
			codeModuleBz, err := base64.StdEncoding.DecodeString(encodedCodeModule)
			if err != nil {
				return nil, sdkerrors.Wrap(err, "failed to decode module code")
			}
			err = app.MoveKeeper.SetModule(ctx, vmtypes.StdAddress, movetypes.MoveModuleNameCode, codeModuleBz)
			if err != nil {
				return nil, err
			}

			// 2. update vm data with new seperator and add checksums of each module

			type KV struct {
				key   []byte
				value []byte
			}
			kvs := make([]KV, 0)

			//  Previous:
			// 	ModuleSeparator     = byte(0)
			// 	ResourceSeparator   = byte(1)
			// 	TableEntrySeparator = byte(2)
			//	TableInfoSeparator  = byte(3)

			//  Current:
			// 	ModuleSeparator     = byte(0)
			//	ChecksumSeparator   = byte(1)
			// 	ResourceSeparator   = byte(2)
			// 	TableEntrySeparator = byte(3)
			//	TableInfoSeparator  = byte(4)

			err = app.MoveKeeper.VMStore.Walk(ctx, nil, func(key, value []byte) (stop bool, err error) {
				cursor := movetypes.AddressBytesLength
				separator := key[cursor]

				if separator == movetypes.ModuleSeparator {
					checksum := movetypes.ModuleBzToChecksum(value)
					value = checksum[:]
				} else if separator >= movetypes.TableInfoSeparator {
					return true, errors.New("unknown prefix")
				}

				err = app.MoveKeeper.VMStore.Remove(ctx, key)
				if err != nil {
					return true, err
				}
				key[cursor] = key[cursor] + 1
				kvs = append(kvs, KV{
					key:   bytes.Clone(key),
					value: bytes.Clone(value),
				})
				return false, nil
			})
			if err != nil {
				return nil, err
			}

			for _, kv := range kvs {
				err = app.MoveKeeper.VMStore.Set(ctx, kv.key, kv.value)
				if err != nil {
					return nil, err
				}
			}

			// 3. update new modules

			// TODO: check the diff and update the code again
			codes := []string{
				// object_code_deployment.move
				"oRzrCwcAAAoMAQAUAhQmAzp9BLcBEAXHAZgBB98CoAMI/wUgBp8GJhDFBrgCCv0IFQySCfEBDYMLAgAAAAQADAANABEAEwAVABcAGQAhAAEIAAEDBgAABQYAAAcGAAAIBgABCgcBAAECCwgABBAHAAEcAgAACQABAAECCQABAAEBBgMEAQgBAw4GAQECAQAPBwEAAQASCAEAAQUUCQQAAQYWBAoAAQcYDQwBAAEIGg4BAQABARsPEAABAR0REgABAhITAQABAR4RFQABAB8XAQABASAYGQEIAQkiCgoAAQkjCgoAAQEkGhIAAQIPGwEAAQICAwUIDAkLCAoDFA8CAxwCBgwLBQEIBgABCAYBBgsFAQkAAQUBCAIBCQADBgwKCAcKCgICBgwKCgIBBgwBAwECAQoCAQYJAAIHCgkACgkAAgYMCgIBCAgBBggIAQwDBgwKCgICAQgDAQgBCQMKAgoCCgIICAYICAwCCAAEBgwKCAcKCgILBQEIBgILBQEJAAUBAQEGCAEEBgwKCAcKCgICAQgEAwUMAhZvYmplY3RfY29kZV9kZXBsb3ltZW50DE1hbmFnaW5nUmVmcwpleHRlbmRfcmVmCUV4dGVuZFJlZgZvYmplY3QGRnJlZXplDm9iamVjdF9hZGRyZXNzB1B1Ymxpc2gHVXBncmFkZRJmcmVlemVfY29kZV9vYmplY3QGT2JqZWN0DU1ldGFkYXRhU3RvcmUEY29kZQVldmVudARlbWl0B3B1Ymxpc2gGU3RyaW5nBnN0cmluZwpwdWJsaXNoX3YyBnNpZ25lcgphZGRyZXNzX29mB2FjY291bnQTZ2V0X3NlcXVlbmNlX251bWJlcgNiY3MIdG9fYnl0ZXMGdmVjdG9yBmFwcGVuZBNjcmVhdGVfbmFtZWRfb2JqZWN0DkNvbnN0cnVjdG9yUmVmD2dlbmVyYXRlX3NpZ25lchNnZW5lcmF0ZV9leHRlbmRfcmVmB3VwZ3JhZGUIaXNfb3duZXIFZXJyb3IRcGVybWlzc2lvbl9kZW5pZWQJbm90X2ZvdW5kHWdlbmVyYXRlX3NpZ25lcl9mb3JfZXh0ZW5kaW5nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEKAiMiaW5pdGlhX3N0ZDo6b2JqZWN0X2NvZGVfZGVwbG95bWVudBRjb21waWxhdGlvbl9tZXRhZGF0YQkAAzIuMAMyLjATaW5pdGlhOjptZXRhZGF0YV92MIMCAwEAAAAAAAAAJUVPQkpFQ1RfQ09ERV9ERVBMT1lNRU5UX05PVF9TVVBQT1JURUQtT2JqZWN0IGNvZGUgZGVwbG95bWVudCBmZWF0dXJlIG5vdCBzdXBwb3J0ZWQuAgAAAAAAAAAWRU5PVF9DT0RFX09CSkVDVF9PV05FUiJOb3QgdGhlIG93bmVyIG9mIHRoZSBgY29kZV9vYmplY3RgAwAAAAAAAAAbRUNPREVfT0JKRUNUX0RPRVNfTk9UX0VYSVNUHWBjb2RlX29iamVjdGAgZG9lcyBub3QgZXhpc3QuAwZGcmVlemUBBAAHUHVibGlzaAEEAAdVcGdyYWRlAQQAAAACAQIIAQICAQYFAwIBBgUEAgEGBQABBAABCAsACgERAQ4BOAASATgBAgQBBAABBAsACwIRBQIFAQQAFi8KABEGEQcGAQAAAAAAAAAWDAJACwAAAAAAAAAADAMNAwcADAQOBDgCOAMNAw4COAQ4AwsDDAULAAsFEQoMBg4GDAcKBxELDAgOCAwACgALATEBEQwKABEGEgI4BQsHEQ0SAAwKCwALCi0AAg4BBAEAHSYLABEGDAQKAwsEOAYECAULBgIAAAAAAAAAERAnDgM4AAwECgQpAAQSBRUGAwAAAAAAAAAREScLBCsAEAAREgwFDgUMAAoACwELAjEBERMLABEGEgM4BwIAAAA=",
				// coin.move
				"oRzrCwcAAAoNAQAYAhhGA160AwSSBCAFsgSBAwezB9EICIQQIAakEDwQ4BDjAgrDEzEM9BPiBw3WGwwP4hsEAAAABAAGABYAGAAlADAAMgA3ADkASABRAAEGAAEDBwEAAQIFCwAABwABAAEACQYAAAsGAAAMCAACDgYAAhAGAAISBgAAEwYAAxUHAAIfAAAFJAcBAAABPwYAAUECAAAUAAEAAQIUAwEBCAEAFwUEAAEEFwYEAQgBAAIHAAABABkHCAABARoIAwEIAQAbAAEAAQIbAwEBCAEAHAAJAAECHAMJAQgBAB0KCwABBB0MCwEIAQAeDQQAAQEgDggBCAECHg8EAAEAIREEAAEEIREEAAEAIgoSAAEEIgwSAQgBACMAEwABAiMDEwEIAQAmFBUAAQImFhUAAQAnFwQAAQQmGAQAAQAoEQQAAQQoEQQAAQApGQQAAQAqGgQAAQQpBgQBCAEAKwATAAECKwMTAQgBACwbFQABBCwcFQEIAQMtHR4AAQEuHwgAAQAvICEAAQQvICEAAQYxGggAAQczCwsAAQA0AQAAAQM1HQsAAQM2IgEAAQg4HSMAAQk6IwgAAQA7JQQAAQQ8JgQAAQA9KCkAAQA+KCoAAQFAKywAAQRCLQQAAQJDLi8AAQJELjAAAQJFLjEAAQFGLjIAAQFHLggAAQpJNAQBAgEBSi4DAQgBAUsuNQABAEwIEgABAE0HEgABAE4AAQABAU83EgEIAQNQIwEAAQtSOCMBAAEIUx4BAAEDVDkEAAEAVTsEAAEAViUEAAEBAgMCBgIIAgoCDAIOAhMCFQIeAiACIgI5MzoCPwJBCAELAQEIAgEICwEIAgELAQEJAAAEBgwFCwEBCAIDBAYMCwEBCQAFAwIFCAsBBQECAgULAQEIAgEDAgULAQEJAAIGCAAIDAEGCwEBCQACBggICAwCCwEBCAIFAgUIDAEBAQsNAQQCBggKAwEIDAIGCAcDAwYICgUDAwYIBwUDBQYMBgwFCwEBCAIDAQYMAwYMCwEBCAIDAwYMCwEBCQADAQYICwEGCgICBgUKAgMFCw0BBQICCgsBAQgCCgMDBggLAwMBCgIGCgIICwEDCAsFAgYIBQUDBggJBQEECwEBCAIFAQYICQcGDAsNAQQICwgLAggLCAsDCAoIAAgFBAgKCAAIBQgOAgYMCgIBCA8HBggPCw0BBAgLCAsCCAsICwEGCA8BCAcBCAgBCAkBDAEIBAEJAAEIDgkKAggPBggPDAgJCAgIBwgGCwEBCAICCwEBCQAFAQYJAAIHCAsICwgFCAsFCAsICwEICwoCBQYMBgwLAQEIAgoFCgMGCgUKAwMDAwUEY29pbg5CdXJuQ2FwYWJpbGl0eQhtZXRhZGF0YQZPYmplY3QGb2JqZWN0CE1ldGFkYXRhDmZ1bmdpYmxlX2Fzc2V0BENvaW4LZHVtbXlfZmllbGQQQ29pbkNyZWF0ZWRFdmVudA1tZXRhZGF0YV9hZGRyEEZyZWV6ZUNhcGFiaWxpdHkMTWFuYWdpbmdSZWZzCG1pbnRfcmVmB01pbnRSZWYIYnVybl9yZWYHQnVyblJlZgx0cmFuc2Zlcl9yZWYLVHJhbnNmZXJSZWYOTWludENhcGFiaWxpdHkEbmFtZQZTdHJpbmcGc3RyaW5nCHRyYW5zZmVyFnByaW1hcnlfZnVuZ2libGVfc3RvcmUQbWV0YWRhdGFfYWRkcmVzcxFhZGRyZXNzX3RvX29iamVjdAZzeW1ib2wIZGVjaW1hbHMHYmFsYW5jZQRidXJuDUZ1bmdpYmxlQXNzZXQOb2JqZWN0X2FkZHJlc3MHZGVwb3NpdAlpc19mcm96ZW4HbWF4aW11bQZPcHRpb24Gb3B0aW9uBG1pbnQHbWludF90bwxzdWRvX2RlcG9zaXQNc3Vkb190cmFuc2ZlcgpjaGVja19zdWRvBnN1cHBseQh3aXRoZHJhdwVieXRlcxVjcmVhdGVfb2JqZWN0X2FkZHJlc3MIYmFsYW5jZXMGc2lnbmVyCmFkZHJlc3Nfb2YFZXJyb3IRcGVybWlzc2lvbl9kZW5pZWQRZGVub21fdG9fbWV0YWRhdGEGbGVuZ3RoCnN1Yl9zdHJpbmcDaGV4DWRlY29kZV9zdHJpbmcIZnJvbV9iY3MKdG9fYWRkcmVzcxFmcmVlemVfY29pbl9zdG9yZQ9zZXRfZnJvemVuX2ZsYWcKaW5pdGlhbGl6ZSJpbml0aWFsaXplX2FuZF9nZW5lcmF0ZV9leHRlbmRfcmVmCUV4dGVuZFJlZhNjcmVhdGVfbmFtZWRfb2JqZWN0DkNvbnN0cnVjdG9yUmVmK2NyZWF0ZV9wcmltYXJ5X3N0b3JlX2VuYWJsZWRfZnVuZ2libGVfYXNzZXQRZ2VuZXJhdGVfbWludF9yZWYRZ2VuZXJhdGVfYnVybl9yZWYVZ2VuZXJhdGVfdHJhbnNmZXJfcmVmD2dlbmVyYXRlX3NpZ25lchxhZGRyZXNzX2Zyb21fY29uc3RydWN0b3JfcmVmBWV2ZW50BGVtaXQbb2JqZWN0X2Zyb21fY29uc3RydWN0b3JfcmVmE2dlbmVyYXRlX2V4dGVuZF9yZWYHaXNfY29pbhFpc19jb2luX2J5X3N5bWJvbBFtZXRhZGF0YV90b19kZW5vbQhpc19vd25lcgR1dGY4A2Jjcwh0b19ieXRlcxBlbmNvZGVfdG9fc3RyaW5nBmFwcGVuZA5zdWRvX211bHRpc2VuZBN1bmZyZWV6ZV9jb2luX3N0b3JlDG1hbmFnZWRfY29pbgdzdGFraW5nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCgIGBW1vdmUvCgIFBElOSVQKAgYFdWluaXQUY29tcGlsYXRpb25fbWV0YWRhdGEJAAMyLjADMi4wE2luaXRpYTo6bWV0YWRhdGFfdjCuAgIBAAAAAAAAAA1FVU5BVVRIT1JJWkVEAAIAAAAAAAAAG0VSUl9NQU5BR0lOR19SRUZTX05PVF9GT1VORBpNYW5hZ2luZ1JlZnMgaXMgbm90IGZvdW5kLgEQQ29pbkNyZWF0ZWRFdmVudAEEAA4EbmFtZQEBAAZzdXBwbHkBAQAGc3ltYm9sAQEAB2JhbGFuY2UBAQAHaXNfY29pbgEBAAdtYXhpbXVtAQEACGJhbGFuY2VzAQEACGRlY2ltYWxzAQEACG1ldGFkYXRhAQEACWlzX2Zyb3plbgEBABBtZXRhZGF0YV9hZGRyZXNzAQEAEWRlbm9tX3RvX21ldGFkYXRhAQEAEWlzX2NvaW5fYnlfc3ltYm9sAQEAEW1ldGFkYXRhX3RvX2Rlbm9tAQEAAAIBAgsBAQgCAwIBCAEEAgEKBQUCAQILAQEIAgYCAw0IBw8ICBEICQoCAQILAQEIAgABAAAEAwsAOAACAgEEAAQGCwALAgsBCwM4AQIEAQAABAULAAsBEQU4AgIHAQAABAMLADgDAgkBAAAEAwsAOAQCCwEAAAQECwALATgFAg0BAAEEEBMLABAAFAwCDgI4BgwDCgMpBAQLBQ0GAgAAAAAAAAAnCwMrBBABCwERDwIQAQAABAQLAAsBERECEgEAAAQECwALATgHAhQBAAAEAwsAOAgCFgEAAQQQEwsAEAIUDAIOAjgGDAMKAykEBAsFDQYCAAAAAAAAACcLAysEEAMLAREXAhgBAAEEEBQLABACFAwDDgM4BgwECgQpBAQLBQ0GAgAAAAAAAAAnCwQrBBADCwELAhEZAhoDAAAEBAsACwERGwIcAQQABAgLABEdCwELAwsCCwQ4CQIfAQAABAMLADgKAiEBAAAEBQsACwELAjgLAgUBAAAEBg4ADgERIxQRJAIlAQAABAULAAsBCwIRJgIdAAAABAoLABEnBwAhBAYFCQYBAAAAAAAAABEoJwIpAQAAJCoOABEqBgUAAAAAAAAAJAQSBwEMAQ4BDgAGAAAAAAAAAAAGBQAAAAAAAAARKwwCDgIRIyEMAwUUCQwDCwMEIw4AESoMBA4ABgUAAAAAAAAACwQRKwwFDgURLBEtDAYFJwcACwARBQwGCwY4AgIuAQABBCcUCwAQBBQMAg4COAYMAwoDKQQECwUNBgIAAAAAAAAAJwsDKwQQBQsBCBEvAjABAAAECgsACwELAgsDCwQLBQsGETEBAjEBAAA2Mg4DESMUDAcLAAsHETIMCA4IDAkKCQsBCwILAwsECwULBhEzCgkRNAoJETUKCRE2CgkRNwwKDgoMABIEDA4LAAsOLQQKCRE4EgI4DAoJOA0MDwoPEgUKDxIACw8SAwsJETsCPAEAAAQDCwApBAI9AQAABAULAAsBEQUpBAI+AQAAOjIOADgGDAEKABEHDAILAAcAOA4EFAoCDAQHAhFADAULBAsFIQwGBRYJDAYLBgQcBwMRQAwCBRwHAAoCEQUKASEEJAsCAgcBEUAMBw4BOA8MCA4IEUIMAg0HCwIRQwsHAkQBBAA8NAsAER0LAwwFCwQMBg4FQQgMBwoHDAgOBkELDAkLCAsJIQQTBRcLAQEGAgACAAAAAAAnCgcGAAAAAAAAAAAkBCsNBUUIDQZFCwwIDAoKAQoCCwoLCDgJCwcGAQAAAAAAAAAXDAcFLgsBAQUvBRcLBUYIAAAAAAAAAAALBkYLAAAAAAAAAAACRQEAAQQnFAsAEAQUDAIOAjgGDAMKAykEBAsFDQYCAAAAAAAAACcLAysEEAULAQkRLwIAAAQBBQAEAAMABAIAVwBYAA==",
				// dex.move
				"",
				// json.move
				"oRzrCwcAAAoLAQAGAgYWAxxKBGYIBW57B+kBswEInAMgELwDHwrbAxYM8QObAw2MBwgAAAAJAAsAAQMAAAQDAAAGAwABCAcAAgoHAQAAAAcAAQECAQEMAwQAAQINAgEBAAEADgcGAQIBAg8GAQEAAQAQCQoAAQERBwsAAQASDQcBAgEAEw0LAQIBABQOAgECAQAVEAYBAgECBgMGBAYHBgIGCAEIAwELBAEJAAABBggDAQYKAgEIAAEJAAEKAgkGCgIGCggAAQMDAwYIAAYIAAMBBggBAQoIAwEIAwgGCggACggDAwMGCAAGCAADCggDAQYJAAMHCAEIAwYJAAwGCgIGCggAAQMDAwYIAAYIAAMKAgcIAAcKAgEIAgRqc29uB0VsZW1lbnQDa2V5BXZhbHVlCkpTT05PYmplY3QFZWxlbXMJSlNPTlZhbHVlCGdldF9lbGVtBlN0cmluZwZzdHJpbmcGT3B0aW9uBm9wdGlvbgVieXRlcwRub25lCXVubWFyc2hhbARzb21lBGtleXMEdXRmOAdtYXJzaGFsEW1hcnNoYWxfdG9fc3RyaW5nCHNldF9lbGVtFHVubWFyc2hhbF9qc29uX3ZhbHVlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUY29tcGlsYXRpb25fbWV0YWRhdGEJAAMyLjADMi4wAAICAgoCAwoCAQIBBQoIAAICAQMKAgABAAAIPw4BEQEMAgoAEAAMAwkMBAYAAAAAAAAAAAwFBgAAAAAAAAAADAYKA0EFDAcKBgoHIwQqCgMKBkIFEAEUCgIUIQQlCwIBCwMBCAwECwYMBQUwCwYGAQAAAAAAAAAWDAYFLwsCAQsDAQUwBQ8LBAM2CwABOAACCwAQAAsFQgUQAhQ4ATgCAgUBAAAMIwsAEAAMAUALAAAAAAAAAAAMAgYAAAAAAAAAAAwDCgFBBQwECgMKBCMEHQoBCgNCBQwFDQILBRABFBEGRAsLAwYBAAAAAAAAABYMAwUgCwEBBSEFCgsCAgcBAgAIAQIACQEAAA9GDgERAQwDCgAQAAwECQwFBgAAAAAAAAAADAYGAAAAAAAAAAAMBwoEQQUMCAoHCggjBCgKBAoHQgUQARQKAxQhBCMLBAEIDAULBwwGBSwLBwYBAAAAAAAAABYMBwUrCwQBBSwFDwsFAzcLAA8ACwMUCwI4AxIARAUFRQsDAQsADwALBkMFCwI4AwwMDwIMDgsMCw4VAgMBAgAKAQAAAgUOABADFDgBAgEAAAAAAQIAAA==",
				// bech32.move
				"oRzrCwcAAAoIAQAEAgQEAwgMBRQIBxwjCD8gEF8fDH4IAAAAAwECBwAAAQABAAEABAEAAAEBCAACCAAKAgZiZWNoMzIGZGVjb2RlBlN0cmluZwZzdHJpbmcGZW5jb2RlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUY29tcGlsYXRpb25fbWV0YWRhdGEJAAMyLjADMi4wAAECAAEBAgAA",
				// hash.move
				"oRzrCwcAAAoHAQACAwISBRQDBxchCDggEFgfDHcMAAAAAQAAAAEAAgAAAAEAAwAAAAEBCgIEaGFzaAlyaXBlbWQxNjAIc2hhMl8yNTYIc2hhM18yNTYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARRjb21waWxhdGlvbl9tZXRhZGF0YQkAAzIuMAMyLjAAAQIAAQECAAIBAgAA",
			}

			modules := make([]vmtypes.Module, len(codes))
			for i, code := range codes {
				codeBz, err := base64.StdEncoding.DecodeString(code)
				if err != nil {
					return nil, sdkerrors.Wrap(err, "failed to decode module code")
				}

				modules[i] = vmtypes.NewModule(codeBz)
			}

			err = app.MoveKeeper.PublishModuleBundle(ctx, vmtypes.StdAddress, vmtypes.NewModuleBundle(modules...), movetypes.UpgradePolicy_COMPATIBLE)
			if err != nil {
				return nil, sdkerrors.Wrap(err, "failed to publish module bundle")
			}

			return vm, nil
		},
	)
}
