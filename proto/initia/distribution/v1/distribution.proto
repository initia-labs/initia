syntax = "proto3";
package initia.distribution.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/initia-labs/initia/x/distribution/types";
option (gogoproto.equal_all) = true;

// Params defines the set of params for the distribution module.
message Params {
  option (amino.name) = "distribution/Params";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string community_tax = 1 [
    (gogoproto.moretags) = "yaml:\"community_tax\"",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  bool withdraw_addr_enabled = 2 [(gogoproto.moretags) = "yaml:\"withdraw_addr_enabled\""];
  repeated RewardWeight reward_weights = 3 [
    (gogoproto.moretags) = "yaml:\"reward_weights\"",
    (gogoproto.nullable) = false
  ];
}

// RewardWeight represents reward allocation ratio between
// pools.
message RewardWeight {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
  string weight = 2 [
    (gogoproto.moretags) = "yaml:\"weight\"",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// Pool is a Coins wrapper with denom.
message Pool {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
  repeated cosmos.base.v1beta1.Coin coins = 2 [
    (gogoproto.moretags) = "yaml:\"coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// DecPool is a DecCoins wrapper with denom.
message DecPool {
  string denom = 1 [(gogoproto.moretags) = "yaml:\"denom\""];
  repeated cosmos.base.v1beta1.DecCoin dec_coins = 2 [
    (gogoproto.moretags) = "yaml:\"dec_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// ValidatorHistoricalRewards represents historical rewards for a validator.
// Height is implicit within the store key.
// Cumulative reward ratio is the sum from the zeroeth period
// until this period of rewards / tokens, per the spec.
// The reference count indicates the number of objects
// which might need to reference this historical entry at any point.
// ReferenceCount =
//    number of outstanding delegations which ended the associated period (and
//    might need to read that record)
//  + number of slashes which ended the associated period (and might need to
//  read that record)
//  + one per validator for the zeroeth period, set on initialization
message ValidatorHistoricalRewards {
  repeated DecPool cumulative_reward_ratios = 1 [
    (gogoproto.moretags) = "yaml:\"cumulative_reward_ratios\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
  uint32 reference_count = 2 [(gogoproto.moretags) = "yaml:\"reference_count\""];
}

// ValidatorCurrentRewards represents current rewards and current
// period for a validator kept as a running counter and incremented
// each block as long as the validator's tokens remain constant.
message ValidatorCurrentRewards {
  repeated DecPool rewards = 1 [
    (gogoproto.moretags) = "yaml:\"rewards\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
  uint64 period = 2;
}

// ValidatorAccumulatedCommission represents accumulated commission
// for a validator kept as a running counter, can be withdrawn at any time.
message ValidatorAccumulatedCommission {
  repeated DecPool commissions = 1 [
    (gogoproto.moretags) = "yaml:\"commissions\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
}

// ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
// for a validator inexpensive to track, allows simple sanity checks.
message ValidatorOutstandingRewards {
  repeated DecPool rewards = 1 [
    (gogoproto.moretags) = "yaml:\"rewards\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
}

// ValidatorSlashEvent represents a validator slash event.
// Height is implicit within the store key.
// This is needed to calculate appropriate amount of staking tokens
// for delegations which are withdrawn after a slash has occurred.
message ValidatorSlashEvent {
  uint64 validator_period = 1 [(gogoproto.moretags) = "yaml:\"validator_period\""];
  repeated cosmos.base.v1beta1.DecCoin fractions = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.moretags) = "yaml:\"fractions\""
  ];
}

// ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
message ValidatorSlashEvents {
  option (gogoproto.goproto_stringer) = false;
  repeated ValidatorSlashEvent validator_slash_events = 1 [
    (gogoproto.moretags) = "yaml:\"validator_slash_events\"",
    (gogoproto.nullable) = false
  ];
}

// DelegatorStartingInfo represents the starting info for a delegator reward
// period. It tracks the previous validator period, the delegation's amount of
// staking token, and the creation height (to check later on if any slashes have
// occurred). NOTE: Even though validators are slashed to whole staking tokens,
// the delegators within the validator may be left with less than a full token,
// thus sdk.Dec is used.
message DelegatorStartingInfo {
  uint64 previous_period = 1 [(gogoproto.moretags) = "yaml:\"previous_period\""];
  repeated cosmos.base.v1beta1.DecCoin stakes = 2 [
    (gogoproto.moretags) = "yaml:\"stakes\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
  uint64 height = 3 [
    (gogoproto.moretags) = "yaml:\"creation_height\"",
    (gogoproto.jsontag) = "creation_height"
  ];
}

// DelegationDelegatorReward represents the properties
// of a delegator's delegation reward.
message DelegationDelegatorReward {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = true;

  string validator_address = 1 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  repeated DecPool reward = 2 [
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
}
