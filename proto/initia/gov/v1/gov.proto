syntax = "proto3";
package initia.gov.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/gov/v1/gov.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/initia-labs/initia/x/gov/types";
// option (gogoproto.equal_all) = true;

// Params defines the parameters for the x/gov module.
message Params {
  option (amino.name) = "gov/Params";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // Minimum deposit for a proposal to enter voting period.
  repeated cosmos.base.v1beta1.Coin min_deposit = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Maximum period for Atom holders to deposit on a proposal. Initial value: 2
  // months.
  google.protobuf.Duration max_deposit_period = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdduration) = true
  ];

  // Duration of the voting period.
  google.protobuf.Duration voting_period = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdduration) = true
  ];

  //  Minimum percentage of total stake needed to vote for a result to be
  //  considered valid.
  string quorum = 4 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
  string threshold = 5 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  Minimum value of Veto votes to Total votes ratio for proposal to be
  //  vetoed. Default value: 1/3.
  string veto_threshold = 6 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
  string min_initial_deposit_ratio = 7 [(cosmos_proto.scalar) = "cosmos.Dec"];

  // The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.
  //
  // Since: cosmos-sdk 0.50
  string proposal_cancel_ratio = 8 [(cosmos_proto.scalar) = "cosmos.Dec"];

  // The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.
  // If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.
  //
  // Since: cosmos-sdk 0.50
  string proposal_cancel_dest = 9 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Duration of the voting period of an expedited proposal.
  //
  // Since: cosmos-sdk 0.50
  google.protobuf.Duration expedited_voting_period = 10 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdduration) = true
  ];

  // Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
  //
  // Since: cosmos-sdk 0.50
  string expedited_threshold = 11 [(cosmos_proto.scalar) = "cosmos.Dec"];

  //  Minimum expedited deposit for a proposal to enter voting period.
  repeated cosmos.base.v1beta1.Coin expedited_min_deposit = 12 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // burn deposits if a proposal does not meet quorum
  bool burn_vote_quorum = 13;

  // burn deposits if the proposal does not enter voting period
  bool burn_proposal_deposit_prevote = 14;

  // burn deposits if quorum with vote type no_veto is met
  bool burn_vote_veto = 15;

  // The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.
  // Default value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be
  // required.
  //
  // Since: cosmos-sdk 0.50
  string min_deposit_ratio = 16 [(cosmos_proto.scalar) = "cosmos.Dec"];

  // Minimum deposit for a emergency proposal to enter voting period.
  repeated cosmos.base.v1beta1.Coin emergency_min_deposit = 91 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Tally interval for emergency proposal.
  google.protobuf.Duration emergency_tally_interval = 92 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Low threshold functions for emergency and expedited proposal.
  // These are Move function identifiers and can only be applied
  // for Move execute messages.
  repeated string low_threshold_functions = 93;

  // Vesting is the vesting contract info for tally.
  Vesting vesting = 94 [
    (gogoproto.nullable) = true,
    (amino.dont_omitempty) = false
  ];
}

// Vesting defines the vesting contract info for MsgVestingVote.
// At tally time, gov module would check vesting token amount.
message Vesting {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // module_addr is the address of the vesting module.
  string module_addr = 1;

  // module_name is the name of the vesting module.
  string module_name = 2;

  // creator_addr is the address of the creator of the vesting contract.
  string creator_addr = 3;
}

message TallyResult {
  uint64 tally_height = 1;
  string total_staking_power = 2 [(cosmos_proto.scalar) = "cosmos.Int"];
  string total_vesting_power = 3 [(cosmos_proto.scalar) = "cosmos.Int"];

  // v1_tally_result is the original TallyResult from cosmos-sdk,
  // which contains both staking and vesting power.
  cosmos.gov.v1.TallyResult v1_tally_result = 4;
}

// Proposal defines the core field members of a governance proposal.
message Proposal {
  // id defines the unique id of the proposal.
  uint64 id = 1;

  // messages are the arbitrary messages to be executed if the proposal passes.
  repeated google.protobuf.Any messages = 2;

  // status defines the proposal status.
  cosmos.gov.v1.ProposalStatus status = 3;

  // final_tally_result is the final tally result of the proposal. When
  // querying a proposal via gRPC, this field is not populated until the
  // proposal's voting period has ended.
  TallyResult final_tally_result = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // submit_time is the time of proposal submission.
  google.protobuf.Timestamp submit_time = 5 [(gogoproto.stdtime) = true];

  // deposit_end_time is the end time for deposition.
  google.protobuf.Timestamp deposit_end_time = 6 [(gogoproto.stdtime) = true];

  // total_deposit is the total deposit on the proposal.
  repeated cosmos.base.v1beta1.Coin total_deposit = 7 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // voting_start_time is the starting time to vote on a proposal.
  google.protobuf.Timestamp voting_start_time = 8 [(gogoproto.stdtime) = true];

  // voting_end_time is the end time of voting on a proposal.
  google.protobuf.Timestamp voting_end_time = 9 [(gogoproto.stdtime) = true];

  google.protobuf.Timestamp emergency_start_time = 10 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp emergency_next_tally_time = 11 [(gogoproto.stdtime) = true];

  // metadata is any arbitrary metadata attached to the proposal.
  // the recommended format of the metadata is to be found here:
  // https://docs.cosmos.network/v0.47/modules/gov#proposal-3
  string metadata = 12;

  // title is the title of the proposal
  //
  // Since: cosmos-sdk 0.47
  string title = 13;

  // summary is a short summary of the proposal
  //
  // Since: cosmos-sdk 0.47
  string summary = 14;

  // proposer is the address of the proposal sumbitter
  //
  // Since: cosmos-sdk 0.47
  string proposer = 15 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // expedited defines if the proposal is expedited
  //
  // Since: cosmos-sdk 0.50
  bool expedited = 16;

  bool emergency = 17;

  // failed_reason defines the reason why the proposal failed
  //
  // Since: cosmos-sdk 0.50
  string failed_reason = 18;
}
