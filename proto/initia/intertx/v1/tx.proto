syntax = "proto3";

package initia.intertx.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "ibc/core/channel/v1/channel.proto";

option go_package = "github.com/initia-labs/initia/x/intertx/types";

// Msg defines the intertx Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);
  // SubmitTx defines a rpc handler for MsgSubmitTx
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse);
}

// MsgRegisterAccount defines the payload for Msg/RegisterAccount
message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intertx/MsgRegisterAccount";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string owner = 1;
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  string version = 3;
  ibc.core.channel.v1.Order ordering = 4;
}

// MsgRegisterAccountResponse defines the response for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx defines the payload for Msg/SubmitTx
message MsgSubmitTx {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "intertx/MsgSubmitTx";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string owner = 1;
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  google.protobuf.Any msg = 3;
}

// MsgSubmitTxResponse defines the response for Msg/SubmitTx
message MsgSubmitTxResponse {}
