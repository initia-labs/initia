// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ibc/applications/fee/v1/tx.proto

package feev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_RegisterPayee_FullMethodName             = "/ibc.applications.fee.v1.Msg/RegisterPayee"
	Msg_RegisterCounterpartyPayee_FullMethodName = "/ibc.applications.fee.v1.Msg/RegisterCounterpartyPayee"
	Msg_PayPacketFee_FullMethodName              = "/ibc.applications.fee.v1.Msg/PayPacketFee"
	Msg_PayPacketFeeAsync_FullMethodName         = "/ibc.applications.fee.v1.Msg/PayPacketFeeAsync"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterPayee defines a rpc handler method for MsgRegisterPayee
	// RegisterPayee is called by the relayer on each channelEnd and allows them to set an optional
	// payee to which reverse and timeout relayer packet fees will be paid out. The payee should be registered on
	// the source chain from which packets originate as this is where fee distribution takes place. This function may be
	// called more than once by a relayer, in which case, the latest payee is always used.
	RegisterPayee(ctx context.Context, in *MsgRegisterPayee, opts ...grpc.CallOption) (*MsgRegisterPayeeResponse, error)
	// RegisterCounterpartyPayee defines a rpc handler method for MsgRegisterCounterpartyPayee
	// RegisterCounterpartyPayee is called by the relayer on each channelEnd and allows them to specify the counterparty
	// payee address before relaying. This ensures they will be properly compensated for forward relaying since
	// the destination chain must include the registered counterparty payee address in the acknowledgement. This function
	// may be called more than once by a relayer, in which case, the latest counterparty payee address is always used.
	RegisterCounterpartyPayee(ctx context.Context, in *MsgRegisterCounterpartyPayee, opts ...grpc.CallOption) (*MsgRegisterCounterpartyPayeeResponse, error)
	// PayPacketFee defines a rpc handler method for MsgPayPacketFee
	// PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
	// incentivize the relaying of the packet at the next sequence
	// NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
	// initiates the lifecycle of the incentivized packet
	PayPacketFee(ctx context.Context, in *MsgPayPacketFee, opts ...grpc.CallOption) (*MsgPayPacketFeeResponse, error)
	// PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
	// PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
	// incentivize the relaying of a known packet (i.e. at a particular sequence)
	PayPacketFeeAsync(ctx context.Context, in *MsgPayPacketFeeAsync, opts ...grpc.CallOption) (*MsgPayPacketFeeAsyncResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterPayee(ctx context.Context, in *MsgRegisterPayee, opts ...grpc.CallOption) (*MsgRegisterPayeeResponse, error) {
	out := new(MsgRegisterPayeeResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterPayee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterCounterpartyPayee(ctx context.Context, in *MsgRegisterCounterpartyPayee, opts ...grpc.CallOption) (*MsgRegisterCounterpartyPayeeResponse, error) {
	out := new(MsgRegisterCounterpartyPayeeResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterCounterpartyPayee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayPacketFee(ctx context.Context, in *MsgPayPacketFee, opts ...grpc.CallOption) (*MsgPayPacketFeeResponse, error) {
	out := new(MsgPayPacketFeeResponse)
	err := c.cc.Invoke(ctx, Msg_PayPacketFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PayPacketFeeAsync(ctx context.Context, in *MsgPayPacketFeeAsync, opts ...grpc.CallOption) (*MsgPayPacketFeeAsyncResponse, error) {
	out := new(MsgPayPacketFeeAsyncResponse)
	err := c.cc.Invoke(ctx, Msg_PayPacketFeeAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// RegisterPayee defines a rpc handler method for MsgRegisterPayee
	// RegisterPayee is called by the relayer on each channelEnd and allows them to set an optional
	// payee to which reverse and timeout relayer packet fees will be paid out. The payee should be registered on
	// the source chain from which packets originate as this is where fee distribution takes place. This function may be
	// called more than once by a relayer, in which case, the latest payee is always used.
	RegisterPayee(context.Context, *MsgRegisterPayee) (*MsgRegisterPayeeResponse, error)
	// RegisterCounterpartyPayee defines a rpc handler method for MsgRegisterCounterpartyPayee
	// RegisterCounterpartyPayee is called by the relayer on each channelEnd and allows them to specify the counterparty
	// payee address before relaying. This ensures they will be properly compensated for forward relaying since
	// the destination chain must include the registered counterparty payee address in the acknowledgement. This function
	// may be called more than once by a relayer, in which case, the latest counterparty payee address is always used.
	RegisterCounterpartyPayee(context.Context, *MsgRegisterCounterpartyPayee) (*MsgRegisterCounterpartyPayeeResponse, error)
	// PayPacketFee defines a rpc handler method for MsgPayPacketFee
	// PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
	// incentivize the relaying of the packet at the next sequence
	// NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
	// initiates the lifecycle of the incentivized packet
	PayPacketFee(context.Context, *MsgPayPacketFee) (*MsgPayPacketFeeResponse, error)
	// PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
	// PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
	// incentivize the relaying of a known packet (i.e. at a particular sequence)
	PayPacketFeeAsync(context.Context, *MsgPayPacketFeeAsync) (*MsgPayPacketFeeAsyncResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) RegisterPayee(context.Context, *MsgRegisterPayee) (*MsgRegisterPayeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPayee not implemented")
}
func (UnimplementedMsgServer) RegisterCounterpartyPayee(context.Context, *MsgRegisterCounterpartyPayee) (*MsgRegisterCounterpartyPayeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCounterpartyPayee not implemented")
}
func (UnimplementedMsgServer) PayPacketFee(context.Context, *MsgPayPacketFee) (*MsgPayPacketFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayPacketFee not implemented")
}
func (UnimplementedMsgServer) PayPacketFeeAsync(context.Context, *MsgPayPacketFeeAsync) (*MsgPayPacketFeeAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayPacketFeeAsync not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RegisterPayee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterPayee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterPayee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterPayee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterPayee(ctx, req.(*MsgRegisterPayee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterCounterpartyPayee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCounterpartyPayee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCounterpartyPayee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterCounterpartyPayee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCounterpartyPayee(ctx, req.(*MsgRegisterCounterpartyPayee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayPacketFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayPacketFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayPacketFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PayPacketFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayPacketFee(ctx, req.(*MsgPayPacketFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PayPacketFeeAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPayPacketFeeAsync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PayPacketFeeAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PayPacketFeeAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PayPacketFeeAsync(ctx, req.(*MsgPayPacketFeeAsync))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.applications.fee.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPayee",
			Handler:    _Msg_RegisterPayee_Handler,
		},
		{
			MethodName: "RegisterCounterpartyPayee",
			Handler:    _Msg_RegisterCounterpartyPayee_Handler,
		},
		{
			MethodName: "PayPacketFee",
			Handler:    _Msg_PayPacketFee_Handler,
		},
		{
			MethodName: "PayPacketFeeAsync",
			Handler:    _Msg_PayPacketFeeAsync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/applications/fee/v1/tx.proto",
}
