// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ibc/core/channel/v1/tx.proto

package channelv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_ChannelOpenInit_FullMethodName       = "/ibc.core.channel.v1.Msg/ChannelOpenInit"
	Msg_ChannelOpenTry_FullMethodName        = "/ibc.core.channel.v1.Msg/ChannelOpenTry"
	Msg_ChannelOpenAck_FullMethodName        = "/ibc.core.channel.v1.Msg/ChannelOpenAck"
	Msg_ChannelOpenConfirm_FullMethodName    = "/ibc.core.channel.v1.Msg/ChannelOpenConfirm"
	Msg_ChannelCloseInit_FullMethodName      = "/ibc.core.channel.v1.Msg/ChannelCloseInit"
	Msg_ChannelCloseConfirm_FullMethodName   = "/ibc.core.channel.v1.Msg/ChannelCloseConfirm"
	Msg_RecvPacket_FullMethodName            = "/ibc.core.channel.v1.Msg/RecvPacket"
	Msg_Timeout_FullMethodName               = "/ibc.core.channel.v1.Msg/Timeout"
	Msg_TimeoutOnClose_FullMethodName        = "/ibc.core.channel.v1.Msg/TimeoutOnClose"
	Msg_Acknowledgement_FullMethodName       = "/ibc.core.channel.v1.Msg/Acknowledgement"
	Msg_ChannelUpgradeInit_FullMethodName    = "/ibc.core.channel.v1.Msg/ChannelUpgradeInit"
	Msg_ChannelUpgradeTry_FullMethodName     = "/ibc.core.channel.v1.Msg/ChannelUpgradeTry"
	Msg_ChannelUpgradeAck_FullMethodName     = "/ibc.core.channel.v1.Msg/ChannelUpgradeAck"
	Msg_ChannelUpgradeConfirm_FullMethodName = "/ibc.core.channel.v1.Msg/ChannelUpgradeConfirm"
	Msg_ChannelUpgradeOpen_FullMethodName    = "/ibc.core.channel.v1.Msg/ChannelUpgradeOpen"
	Msg_ChannelUpgradeTimeout_FullMethodName = "/ibc.core.channel.v1.Msg/ChannelUpgradeTimeout"
	Msg_ChannelUpgradeCancel_FullMethodName  = "/ibc.core.channel.v1.Msg/ChannelUpgradeCancel"
	Msg_UpdateChannelParams_FullMethodName   = "/ibc.core.channel.v1.Msg/UpdateChannelParams"
	Msg_PruneAcknowledgements_FullMethodName = "/ibc.core.channel.v1.Msg/PruneAcknowledgements"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
	ChannelOpenInit(ctx context.Context, in *MsgChannelOpenInit, opts ...grpc.CallOption) (*MsgChannelOpenInitResponse, error)
	// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
	ChannelOpenTry(ctx context.Context, in *MsgChannelOpenTry, opts ...grpc.CallOption) (*MsgChannelOpenTryResponse, error)
	// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
	ChannelOpenAck(ctx context.Context, in *MsgChannelOpenAck, opts ...grpc.CallOption) (*MsgChannelOpenAckResponse, error)
	// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
	ChannelOpenConfirm(ctx context.Context, in *MsgChannelOpenConfirm, opts ...grpc.CallOption) (*MsgChannelOpenConfirmResponse, error)
	// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
	ChannelCloseInit(ctx context.Context, in *MsgChannelCloseInit, opts ...grpc.CallOption) (*MsgChannelCloseInitResponse, error)
	// ChannelCloseConfirm defines a rpc handler method for
	// MsgChannelCloseConfirm.
	ChannelCloseConfirm(ctx context.Context, in *MsgChannelCloseConfirm, opts ...grpc.CallOption) (*MsgChannelCloseConfirmResponse, error)
	// RecvPacket defines a rpc handler method for MsgRecvPacket.
	RecvPacket(ctx context.Context, in *MsgRecvPacket, opts ...grpc.CallOption) (*MsgRecvPacketResponse, error)
	// Timeout defines a rpc handler method for MsgTimeout.
	Timeout(ctx context.Context, in *MsgTimeout, opts ...grpc.CallOption) (*MsgTimeoutResponse, error)
	// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
	TimeoutOnClose(ctx context.Context, in *MsgTimeoutOnClose, opts ...grpc.CallOption) (*MsgTimeoutOnCloseResponse, error)
	// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
	Acknowledgement(ctx context.Context, in *MsgAcknowledgement, opts ...grpc.CallOption) (*MsgAcknowledgementResponse, error)
	// ChannelUpgradeInit defines a rpc handler method for MsgChannelUpgradeInit.
	ChannelUpgradeInit(ctx context.Context, in *MsgChannelUpgradeInit, opts ...grpc.CallOption) (*MsgChannelUpgradeInitResponse, error)
	// ChannelUpgradeTry defines a rpc handler method for MsgChannelUpgradeTry.
	ChannelUpgradeTry(ctx context.Context, in *MsgChannelUpgradeTry, opts ...grpc.CallOption) (*MsgChannelUpgradeTryResponse, error)
	// ChannelUpgradeAck defines a rpc handler method for MsgChannelUpgradeAck.
	ChannelUpgradeAck(ctx context.Context, in *MsgChannelUpgradeAck, opts ...grpc.CallOption) (*MsgChannelUpgradeAckResponse, error)
	// ChannelUpgradeConfirm defines a rpc handler method for MsgChannelUpgradeConfirm.
	ChannelUpgradeConfirm(ctx context.Context, in *MsgChannelUpgradeConfirm, opts ...grpc.CallOption) (*MsgChannelUpgradeConfirmResponse, error)
	// ChannelUpgradeOpen defines a rpc handler method for MsgChannelUpgradeOpen.
	ChannelUpgradeOpen(ctx context.Context, in *MsgChannelUpgradeOpen, opts ...grpc.CallOption) (*MsgChannelUpgradeOpenResponse, error)
	// ChannelUpgradeTimeout defines a rpc handler method for MsgChannelUpgradeTimeout.
	ChannelUpgradeTimeout(ctx context.Context, in *MsgChannelUpgradeTimeout, opts ...grpc.CallOption) (*MsgChannelUpgradeTimeoutResponse, error)
	// ChannelUpgradeCancel defines a rpc handler method for MsgChannelUpgradeCancel.
	ChannelUpgradeCancel(ctx context.Context, in *MsgChannelUpgradeCancel, opts ...grpc.CallOption) (*MsgChannelUpgradeCancelResponse, error)
	// UpdateChannelParams defines a rpc handler method for MsgUpdateParams.
	UpdateChannelParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// PruneAcknowledgements defines a rpc handler method for MsgPruneAcknowledgements.
	PruneAcknowledgements(ctx context.Context, in *MsgPruneAcknowledgements, opts ...grpc.CallOption) (*MsgPruneAcknowledgementsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ChannelOpenInit(ctx context.Context, in *MsgChannelOpenInit, opts ...grpc.CallOption) (*MsgChannelOpenInitResponse, error) {
	out := new(MsgChannelOpenInitResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelOpenInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelOpenTry(ctx context.Context, in *MsgChannelOpenTry, opts ...grpc.CallOption) (*MsgChannelOpenTryResponse, error) {
	out := new(MsgChannelOpenTryResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelOpenTry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelOpenAck(ctx context.Context, in *MsgChannelOpenAck, opts ...grpc.CallOption) (*MsgChannelOpenAckResponse, error) {
	out := new(MsgChannelOpenAckResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelOpenAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelOpenConfirm(ctx context.Context, in *MsgChannelOpenConfirm, opts ...grpc.CallOption) (*MsgChannelOpenConfirmResponse, error) {
	out := new(MsgChannelOpenConfirmResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelOpenConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelCloseInit(ctx context.Context, in *MsgChannelCloseInit, opts ...grpc.CallOption) (*MsgChannelCloseInitResponse, error) {
	out := new(MsgChannelCloseInitResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelCloseInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelCloseConfirm(ctx context.Context, in *MsgChannelCloseConfirm, opts ...grpc.CallOption) (*MsgChannelCloseConfirmResponse, error) {
	out := new(MsgChannelCloseConfirmResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelCloseConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RecvPacket(ctx context.Context, in *MsgRecvPacket, opts ...grpc.CallOption) (*MsgRecvPacketResponse, error) {
	out := new(MsgRecvPacketResponse)
	err := c.cc.Invoke(ctx, Msg_RecvPacket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Timeout(ctx context.Context, in *MsgTimeout, opts ...grpc.CallOption) (*MsgTimeoutResponse, error) {
	out := new(MsgTimeoutResponse)
	err := c.cc.Invoke(ctx, Msg_Timeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TimeoutOnClose(ctx context.Context, in *MsgTimeoutOnClose, opts ...grpc.CallOption) (*MsgTimeoutOnCloseResponse, error) {
	out := new(MsgTimeoutOnCloseResponse)
	err := c.cc.Invoke(ctx, Msg_TimeoutOnClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Acknowledgement(ctx context.Context, in *MsgAcknowledgement, opts ...grpc.CallOption) (*MsgAcknowledgementResponse, error) {
	out := new(MsgAcknowledgementResponse)
	err := c.cc.Invoke(ctx, Msg_Acknowledgement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeInit(ctx context.Context, in *MsgChannelUpgradeInit, opts ...grpc.CallOption) (*MsgChannelUpgradeInitResponse, error) {
	out := new(MsgChannelUpgradeInitResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeTry(ctx context.Context, in *MsgChannelUpgradeTry, opts ...grpc.CallOption) (*MsgChannelUpgradeTryResponse, error) {
	out := new(MsgChannelUpgradeTryResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeTry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeAck(ctx context.Context, in *MsgChannelUpgradeAck, opts ...grpc.CallOption) (*MsgChannelUpgradeAckResponse, error) {
	out := new(MsgChannelUpgradeAckResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeConfirm(ctx context.Context, in *MsgChannelUpgradeConfirm, opts ...grpc.CallOption) (*MsgChannelUpgradeConfirmResponse, error) {
	out := new(MsgChannelUpgradeConfirmResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeOpen(ctx context.Context, in *MsgChannelUpgradeOpen, opts ...grpc.CallOption) (*MsgChannelUpgradeOpenResponse, error) {
	out := new(MsgChannelUpgradeOpenResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeTimeout(ctx context.Context, in *MsgChannelUpgradeTimeout, opts ...grpc.CallOption) (*MsgChannelUpgradeTimeoutResponse, error) {
	out := new(MsgChannelUpgradeTimeoutResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeTimeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChannelUpgradeCancel(ctx context.Context, in *MsgChannelUpgradeCancel, opts ...grpc.CallOption) (*MsgChannelUpgradeCancelResponse, error) {
	out := new(MsgChannelUpgradeCancelResponse)
	err := c.cc.Invoke(ctx, Msg_ChannelUpgradeCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChannelParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateChannelParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PruneAcknowledgements(ctx context.Context, in *MsgPruneAcknowledgements, opts ...grpc.CallOption) (*MsgPruneAcknowledgementsResponse, error) {
	out := new(MsgPruneAcknowledgementsResponse)
	err := c.cc.Invoke(ctx, Msg_PruneAcknowledgements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
	ChannelOpenInit(context.Context, *MsgChannelOpenInit) (*MsgChannelOpenInitResponse, error)
	// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
	ChannelOpenTry(context.Context, *MsgChannelOpenTry) (*MsgChannelOpenTryResponse, error)
	// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
	ChannelOpenAck(context.Context, *MsgChannelOpenAck) (*MsgChannelOpenAckResponse, error)
	// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
	ChannelOpenConfirm(context.Context, *MsgChannelOpenConfirm) (*MsgChannelOpenConfirmResponse, error)
	// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
	ChannelCloseInit(context.Context, *MsgChannelCloseInit) (*MsgChannelCloseInitResponse, error)
	// ChannelCloseConfirm defines a rpc handler method for
	// MsgChannelCloseConfirm.
	ChannelCloseConfirm(context.Context, *MsgChannelCloseConfirm) (*MsgChannelCloseConfirmResponse, error)
	// RecvPacket defines a rpc handler method for MsgRecvPacket.
	RecvPacket(context.Context, *MsgRecvPacket) (*MsgRecvPacketResponse, error)
	// Timeout defines a rpc handler method for MsgTimeout.
	Timeout(context.Context, *MsgTimeout) (*MsgTimeoutResponse, error)
	// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
	TimeoutOnClose(context.Context, *MsgTimeoutOnClose) (*MsgTimeoutOnCloseResponse, error)
	// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
	Acknowledgement(context.Context, *MsgAcknowledgement) (*MsgAcknowledgementResponse, error)
	// ChannelUpgradeInit defines a rpc handler method for MsgChannelUpgradeInit.
	ChannelUpgradeInit(context.Context, *MsgChannelUpgradeInit) (*MsgChannelUpgradeInitResponse, error)
	// ChannelUpgradeTry defines a rpc handler method for MsgChannelUpgradeTry.
	ChannelUpgradeTry(context.Context, *MsgChannelUpgradeTry) (*MsgChannelUpgradeTryResponse, error)
	// ChannelUpgradeAck defines a rpc handler method for MsgChannelUpgradeAck.
	ChannelUpgradeAck(context.Context, *MsgChannelUpgradeAck) (*MsgChannelUpgradeAckResponse, error)
	// ChannelUpgradeConfirm defines a rpc handler method for MsgChannelUpgradeConfirm.
	ChannelUpgradeConfirm(context.Context, *MsgChannelUpgradeConfirm) (*MsgChannelUpgradeConfirmResponse, error)
	// ChannelUpgradeOpen defines a rpc handler method for MsgChannelUpgradeOpen.
	ChannelUpgradeOpen(context.Context, *MsgChannelUpgradeOpen) (*MsgChannelUpgradeOpenResponse, error)
	// ChannelUpgradeTimeout defines a rpc handler method for MsgChannelUpgradeTimeout.
	ChannelUpgradeTimeout(context.Context, *MsgChannelUpgradeTimeout) (*MsgChannelUpgradeTimeoutResponse, error)
	// ChannelUpgradeCancel defines a rpc handler method for MsgChannelUpgradeCancel.
	ChannelUpgradeCancel(context.Context, *MsgChannelUpgradeCancel) (*MsgChannelUpgradeCancelResponse, error)
	// UpdateChannelParams defines a rpc handler method for MsgUpdateParams.
	UpdateChannelParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// PruneAcknowledgements defines a rpc handler method for MsgPruneAcknowledgements.
	PruneAcknowledgements(context.Context, *MsgPruneAcknowledgements) (*MsgPruneAcknowledgementsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) ChannelOpenInit(context.Context, *MsgChannelOpenInit) (*MsgChannelOpenInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenInit not implemented")
}
func (UnimplementedMsgServer) ChannelOpenTry(context.Context, *MsgChannelOpenTry) (*MsgChannelOpenTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenTry not implemented")
}
func (UnimplementedMsgServer) ChannelOpenAck(context.Context, *MsgChannelOpenAck) (*MsgChannelOpenAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenAck not implemented")
}
func (UnimplementedMsgServer) ChannelOpenConfirm(context.Context, *MsgChannelOpenConfirm) (*MsgChannelOpenConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelOpenConfirm not implemented")
}
func (UnimplementedMsgServer) ChannelCloseInit(context.Context, *MsgChannelCloseInit) (*MsgChannelCloseInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCloseInit not implemented")
}
func (UnimplementedMsgServer) ChannelCloseConfirm(context.Context, *MsgChannelCloseConfirm) (*MsgChannelCloseConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCloseConfirm not implemented")
}
func (UnimplementedMsgServer) RecvPacket(context.Context, *MsgRecvPacket) (*MsgRecvPacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvPacket not implemented")
}
func (UnimplementedMsgServer) Timeout(context.Context, *MsgTimeout) (*MsgTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}
func (UnimplementedMsgServer) TimeoutOnClose(context.Context, *MsgTimeoutOnClose) (*MsgTimeoutOnCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutOnClose not implemented")
}
func (UnimplementedMsgServer) Acknowledgement(context.Context, *MsgAcknowledgement) (*MsgAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acknowledgement not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeInit(context.Context, *MsgChannelUpgradeInit) (*MsgChannelUpgradeInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeInit not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeTry(context.Context, *MsgChannelUpgradeTry) (*MsgChannelUpgradeTryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeTry not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeAck(context.Context, *MsgChannelUpgradeAck) (*MsgChannelUpgradeAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeAck not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeConfirm(context.Context, *MsgChannelUpgradeConfirm) (*MsgChannelUpgradeConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeConfirm not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeOpen(context.Context, *MsgChannelUpgradeOpen) (*MsgChannelUpgradeOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeOpen not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeTimeout(context.Context, *MsgChannelUpgradeTimeout) (*MsgChannelUpgradeTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeTimeout not implemented")
}
func (UnimplementedMsgServer) ChannelUpgradeCancel(context.Context, *MsgChannelUpgradeCancel) (*MsgChannelUpgradeCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpgradeCancel not implemented")
}
func (UnimplementedMsgServer) UpdateChannelParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannelParams not implemented")
}
func (UnimplementedMsgServer) PruneAcknowledgements(context.Context, *MsgPruneAcknowledgements) (*MsgPruneAcknowledgementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneAcknowledgements not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_ChannelOpenInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelOpenInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelOpenInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelOpenInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelOpenInit(ctx, req.(*MsgChannelOpenInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelOpenTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelOpenTry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelOpenTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelOpenTry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelOpenTry(ctx, req.(*MsgChannelOpenTry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelOpenAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelOpenAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelOpenAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelOpenAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelOpenAck(ctx, req.(*MsgChannelOpenAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelOpenConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelOpenConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelOpenConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelOpenConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelOpenConfirm(ctx, req.(*MsgChannelOpenConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelCloseInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelCloseInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelCloseInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelCloseInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelCloseInit(ctx, req.(*MsgChannelCloseInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelCloseConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelCloseConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelCloseConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelCloseConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelCloseConfirm(ctx, req.(*MsgChannelCloseConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RecvPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecvPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RecvPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RecvPacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RecvPacket(ctx, req.(*MsgRecvPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Timeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Timeout(ctx, req.(*MsgTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TimeoutOnClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTimeoutOnClose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TimeoutOnClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TimeoutOnClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TimeoutOnClose(ctx, req.(*MsgTimeoutOnClose))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Acknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcknowledgement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Acknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Acknowledgement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Acknowledgement(ctx, req.(*MsgAcknowledgement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeInit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeInit(ctx, req.(*MsgChannelUpgradeInit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeTry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeTry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeTry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeTry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeTry(ctx, req.(*MsgChannelUpgradeTry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeAck(ctx, req.(*MsgChannelUpgradeAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeConfirm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeConfirm(ctx, req.(*MsgChannelUpgradeConfirm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeOpen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeOpen(ctx, req.(*MsgChannelUpgradeOpen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeTimeout(ctx, req.(*MsgChannelUpgradeTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChannelUpgradeCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChannelUpgradeCancel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChannelUpgradeCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChannelUpgradeCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChannelUpgradeCancel(ctx, req.(*MsgChannelUpgradeCancel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChannelParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChannelParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateChannelParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChannelParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PruneAcknowledgements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPruneAcknowledgements)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PruneAcknowledgements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_PruneAcknowledgements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PruneAcknowledgements(ctx, req.(*MsgPruneAcknowledgements))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ibc.core.channel.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChannelOpenInit",
			Handler:    _Msg_ChannelOpenInit_Handler,
		},
		{
			MethodName: "ChannelOpenTry",
			Handler:    _Msg_ChannelOpenTry_Handler,
		},
		{
			MethodName: "ChannelOpenAck",
			Handler:    _Msg_ChannelOpenAck_Handler,
		},
		{
			MethodName: "ChannelOpenConfirm",
			Handler:    _Msg_ChannelOpenConfirm_Handler,
		},
		{
			MethodName: "ChannelCloseInit",
			Handler:    _Msg_ChannelCloseInit_Handler,
		},
		{
			MethodName: "ChannelCloseConfirm",
			Handler:    _Msg_ChannelCloseConfirm_Handler,
		},
		{
			MethodName: "RecvPacket",
			Handler:    _Msg_RecvPacket_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _Msg_Timeout_Handler,
		},
		{
			MethodName: "TimeoutOnClose",
			Handler:    _Msg_TimeoutOnClose_Handler,
		},
		{
			MethodName: "Acknowledgement",
			Handler:    _Msg_Acknowledgement_Handler,
		},
		{
			MethodName: "ChannelUpgradeInit",
			Handler:    _Msg_ChannelUpgradeInit_Handler,
		},
		{
			MethodName: "ChannelUpgradeTry",
			Handler:    _Msg_ChannelUpgradeTry_Handler,
		},
		{
			MethodName: "ChannelUpgradeAck",
			Handler:    _Msg_ChannelUpgradeAck_Handler,
		},
		{
			MethodName: "ChannelUpgradeConfirm",
			Handler:    _Msg_ChannelUpgradeConfirm_Handler,
		},
		{
			MethodName: "ChannelUpgradeOpen",
			Handler:    _Msg_ChannelUpgradeOpen_Handler,
		},
		{
			MethodName: "ChannelUpgradeTimeout",
			Handler:    _Msg_ChannelUpgradeTimeout_Handler,
		},
		{
			MethodName: "ChannelUpgradeCancel",
			Handler:    _Msg_ChannelUpgradeCancel_Handler,
		},
		{
			MethodName: "UpdateChannelParams",
			Handler:    _Msg_UpdateChannelParams_Handler,
		},
		{
			MethodName: "PruneAcknowledgements",
			Handler:    _Msg_PruneAcknowledgements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ibc/core/channel/v1/tx.proto",
}
