// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: initia/tx/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGasPricesRequest is the request type for the Query/GasPrices RPC method.
type QueryGasPricesRequest struct {
}

func (m *QueryGasPricesRequest) Reset()         { *m = QueryGasPricesRequest{} }
func (m *QueryGasPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasPricesRequest) ProtoMessage()    {}
func (*QueryGasPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8303a398512dd5, []int{0}
}
func (m *QueryGasPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasPricesRequest.Merge(m, src)
}
func (m *QueryGasPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasPricesRequest proto.InternalMessageInfo

// QueryGasPricesResponse is the response type for the Query/GasPrices RPC method.
type QueryGasPricesResponse struct {
	GasPrices github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=gas_prices,json=gasPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"gas_prices" yaml:"gas_prices"`
}

func (m *QueryGasPricesResponse) Reset()         { *m = QueryGasPricesResponse{} }
func (m *QueryGasPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasPricesResponse) ProtoMessage()    {}
func (*QueryGasPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8303a398512dd5, []int{1}
}
func (m *QueryGasPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasPricesResponse.Merge(m, src)
}
func (m *QueryGasPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasPricesResponse proto.InternalMessageInfo

func (m *QueryGasPricesResponse) GetGasPrices() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.GasPrices
	}
	return nil
}

// QueryGasPriceRequest is the request type for the Query/GasPrice RPC method.
type QueryGasPriceRequest struct {
	// denom defines the denomination of the gas price to query.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGasPriceRequest) Reset()         { *m = QueryGasPriceRequest{} }
func (m *QueryGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGasPriceRequest) ProtoMessage()    {}
func (*QueryGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8303a398512dd5, []int{2}
}
func (m *QueryGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasPriceRequest.Merge(m, src)
}
func (m *QueryGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasPriceRequest proto.InternalMessageInfo

func (m *QueryGasPriceRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGasPriceResponse is the response type for the Query/GasPrice RPC method.
type QueryGasPriceResponse struct {
	GasPrice github_com_cosmos_cosmos_sdk_types.DecCoin `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3,casttype=github.com/cosmos/cosmos-sdk/types.DecCoin" json:"gas_price" yaml:"gas_price"`
}

func (m *QueryGasPriceResponse) Reset()         { *m = QueryGasPriceResponse{} }
func (m *QueryGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGasPriceResponse) ProtoMessage()    {}
func (*QueryGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8303a398512dd5, []int{3}
}
func (m *QueryGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGasPriceResponse.Merge(m, src)
}
func (m *QueryGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGasPriceResponse proto.InternalMessageInfo

func (m *QueryGasPriceResponse) GetGasPrice() github_com_cosmos_cosmos_sdk_types.DecCoin {
	if m != nil {
		return m.GasPrice
	}
	return github_com_cosmos_cosmos_sdk_types.DecCoin{}
}

// GetTxsEventV2Request is the request type for the Service.TxsByEvents
// RPC method.
type GetTxsEventV2Request struct {
	// events is the list of transaction event type.
	// Deprecated post v0.47.x: use query instead, which should contain a valid
	// events query.
	Events []string `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"` // Deprecated: Do not use.
	// pagination defines a pagination for the request.
	// Deprecated post v0.46.x: use page and limit instead.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"` // Deprecated: Do not use.
	// page is the page number to query, starts at 1. If not provided, will
	// default to first page.
	Page uint64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// limit is the total number of results to be returned in the result page.
	// If left empty it will default to a value to be set by each app.
	Limit uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// query defines the transaction event query that is proxied to Tendermint's
	// TxSearch RPC method. The query must be valid.
	//
	// Since cosmos-sdk 0.50
	Query string `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *GetTxsEventV2Request) Reset()         { *m = GetTxsEventV2Request{} }
func (m *GetTxsEventV2Request) String() string { return proto.CompactTextString(m) }
func (*GetTxsEventV2Request) ProtoMessage()    {}
func (*GetTxsEventV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8303a398512dd5, []int{4}
}
func (m *GetTxsEventV2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxsEventV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxsEventV2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxsEventV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxsEventV2Request.Merge(m, src)
}
func (m *GetTxsEventV2Request) XXX_Size() int {
	return m.Size()
}
func (m *GetTxsEventV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxsEventV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxsEventV2Request proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *GetTxsEventV2Request) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetTxsEventV2Request) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetTxsEventV2Request) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetTxsEventV2Request) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetTxsEventV2Request) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// GetTxsEventV2Response is the response type for the Service.TxsByEvents
// RPC method.
type GetTxsEventV2Response struct {
	// txs is the list of queried transactions.
	Txs []*tx.Tx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
	// tx_responses is the list of queried TxResponses.
	TxResponses []*types.TxResponse `protobuf:"bytes,2,rep,name=tx_responses,json=txResponses,proto3" json:"tx_responses,omitempty"`
	// pagination defines a pagination for the response.
	// Deprecated post v0.46.x: use total instead.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"` // Deprecated: Do not use.
	// total is total number of results available
	Total uint64 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetTxsEventV2Response) Reset()         { *m = GetTxsEventV2Response{} }
func (m *GetTxsEventV2Response) String() string { return proto.CompactTextString(m) }
func (*GetTxsEventV2Response) ProtoMessage()    {}
func (*GetTxsEventV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b8303a398512dd5, []int{5}
}
func (m *GetTxsEventV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTxsEventV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTxsEventV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTxsEventV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTxsEventV2Response.Merge(m, src)
}
func (m *GetTxsEventV2Response) XXX_Size() int {
	return m.Size()
}
func (m *GetTxsEventV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTxsEventV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_GetTxsEventV2Response proto.InternalMessageInfo

func (m *GetTxsEventV2Response) GetTxs() []*tx.Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *GetTxsEventV2Response) GetTxResponses() []*types.TxResponse {
	if m != nil {
		return m.TxResponses
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetTxsEventV2Response) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *GetTxsEventV2Response) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryGasPricesRequest)(nil), "initia.tx.v1.QueryGasPricesRequest")
	proto.RegisterType((*QueryGasPricesResponse)(nil), "initia.tx.v1.QueryGasPricesResponse")
	proto.RegisterType((*QueryGasPriceRequest)(nil), "initia.tx.v1.QueryGasPriceRequest")
	proto.RegisterType((*QueryGasPriceResponse)(nil), "initia.tx.v1.QueryGasPriceResponse")
	proto.RegisterType((*GetTxsEventV2Request)(nil), "initia.tx.v1.GetTxsEventV2Request")
	proto.RegisterType((*GetTxsEventV2Response)(nil), "initia.tx.v1.GetTxsEventV2Response")
}

func init() { proto.RegisterFile("initia/tx/v1/query.proto", fileDescriptor_8b8303a398512dd5) }

var fileDescriptor_8b8303a398512dd5 = []byte{
	// 682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xbf, 0x6f, 0x13, 0x3f,
	0x14, 0x8f, 0x93, 0xa6, 0x6a, 0xdc, 0x7e, 0xa5, 0x2f, 0x56, 0x5a, 0x4e, 0x51, 0x75, 0x89, 0xdc,
	0xaa, 0x8d, 0x0a, 0x3d, 0x2b, 0x61, 0x63, 0x42, 0xe5, 0x47, 0x11, 0x2c, 0xe5, 0x54, 0x75, 0x60,
	0xa9, 0x9c, 0xd4, 0x3a, 0x2c, 0x92, 0xf3, 0x35, 0x76, 0xa3, 0xab, 0x50, 0x07, 0x90, 0xd8, 0x91,
	0x18, 0x59, 0x98, 0xf9, 0x23, 0x98, 0x3b, 0x56, 0x62, 0x61, 0x2a, 0xa8, 0x65, 0x64, 0x62, 0x42,
	0x4c, 0xe8, 0x6c, 0x5f, 0x7a, 0x39, 0x4a, 0xca, 0x74, 0x7e, 0xcf, 0x9f, 0xf7, 0xde, 0xe7, 0x7d,
	0xee, 0x3d, 0x43, 0x87, 0x87, 0x5c, 0x71, 0x4a, 0x54, 0x4c, 0x86, 0x2d, 0xb2, 0x7f, 0xc0, 0x06,
	0x87, 0x5e, 0x34, 0x10, 0x4a, 0xa0, 0x39, 0x73, 0xe3, 0xa9, 0xd8, 0x1b, 0xb6, 0x6a, 0x6e, 0x57,
	0xc8, 0xbe, 0x90, 0xa4, 0x43, 0x25, 0x23, 0xc3, 0x56, 0x87, 0x29, 0xda, 0x22, 0x5d, 0xc1, 0x43,
	0x83, 0xae, 0x55, 0x03, 0x11, 0x08, 0x7d, 0x24, 0xc9, 0xc9, 0x7a, 0x17, 0x03, 0x21, 0x82, 0x1e,
	0x23, 0x34, 0xe2, 0x84, 0x86, 0xa1, 0x50, 0x54, 0x71, 0x11, 0x4a, 0x7b, 0x5b, 0xb3, 0x39, 0x75,
	0x6d, 0x93, 0x51, 0xc5, 0xf6, 0x6e, 0x29, 0x5b, 0x8f, 0x76, 0xba, 0x7c, 0x04, 0x49, 0x0c, 0x0b,
	0x5a, 0xcb, 0x82, 0x34, 0xf7, 0x11, 0x2a, 0xa2, 0x01, 0x0f, 0x75, 0x35, 0x83, 0xc5, 0xd7, 0xe1,
	0xfc, 0x93, 0x04, 0xb1, 0x49, 0xe5, 0xd6, 0x80, 0x77, 0x99, 0xf4, 0xd9, 0xfe, 0x01, 0x93, 0x0a,
	0xbf, 0x07, 0x70, 0x21, 0x7f, 0x23, 0x23, 0x11, 0x4a, 0x86, 0x5e, 0x03, 0x08, 0x03, 0x2a, 0x77,
	0x23, 0xed, 0x76, 0x40, 0xa3, 0xd4, 0x9c, 0x6d, 0x2f, 0x7a, 0xa6, 0xaa, 0x97, 0x54, 0xf5, 0x6c,
	0x3d, 0xef, 0x1e, 0xeb, 0xde, 0x15, 0x3c, 0xdc, 0x78, 0x78, 0x7c, 0x5a, 0x2f, 0xfc, 0x38, 0xad,
	0x5f, 0x3b, 0xa4, 0xfd, 0xde, 0x6d, 0x7c, 0x11, 0x8d, 0x3f, 0x7c, 0xa9, 0xdf, 0x08, 0xb8, 0x7a,
	0x76, 0xd0, 0xf1, 0xba, 0xa2, 0x4f, 0x2c, 0x75, 0xf3, 0x59, 0x97, 0x7b, 0xcf, 0x89, 0x3a, 0x8c,
	0x98, 0x4c, 0x13, 0x49, 0xbf, 0x12, 0xa4, 0x7c, 0xf0, 0x4d, 0x58, 0x1d, 0x63, 0x68, 0xa9, 0xa3,
	0x2a, 0x2c, 0xef, 0xb1, 0x50, 0xf4, 0x1d, 0xd0, 0x00, 0xcd, 0x8a, 0x6f, 0x0c, 0xfc, 0x0e, 0xe4,
	0x5a, 0x1d, 0xf5, 0xf3, 0x12, 0xc0, 0xca, 0x88, 0x91, 0x0e, 0xba, 0xaa, 0x9d, 0x07, 0xb6, 0x9d,
	0xff, 0x73, 0xed, 0xe0, 0x5f, 0xa7, 0xf5, 0xb5, 0x7f, 0xef, 0xc6, 0x9f, 0x49, 0x9b, 0xc1, 0x1f,
	0x01, 0xac, 0x6e, 0x32, 0xb5, 0x1d, 0xcb, 0xfb, 0x43, 0x16, 0xaa, 0x9d, 0x76, 0xda, 0x4c, 0x0d,
	0x4e, 0xb3, 0xc4, 0x63, 0x74, 0xae, 0x6c, 0x14, 0x1d, 0xe0, 0x5b, 0x0f, 0x7a, 0x04, 0xe1, 0xc5,
	0x0f, 0x75, 0x8a, 0x9a, 0xf8, 0xca, 0x18, 0x71, 0x33, 0xb9, 0x29, 0xfd, 0x2d, 0x1a, 0xa4, 0x22,
	0xe9, 0x3c, 0x99, 0x68, 0x84, 0xe0, 0x54, 0x44, 0x03, 0xe6, 0x94, 0x1a, 0xa0, 0x39, 0xe5, 0xeb,
	0x73, 0x22, 0x64, 0x8f, 0xf7, 0xb9, 0x72, 0xa6, 0xb4, 0xd3, 0x18, 0x89, 0x57, 0xa7, 0x75, 0xca,
	0x46, 0x5e, 0x6d, 0xe0, 0xef, 0x00, 0xce, 0xe7, 0x1a, 0xb0, 0xf2, 0xae, 0xc2, 0x92, 0x8a, 0xd3,
	0x31, 0x99, 0x4f, 0xe9, 0xe9, 0xfd, 0x31, 0xb4, 0xb6, 0x63, 0x3f, 0x41, 0xa0, 0x4d, 0x38, 0xa7,
	0xe2, 0xdd, 0x81, 0x8d, 0x93, 0x4e, 0x51, 0x47, 0x2c, 0x8f, 0x35, 0xa4, 0xc7, 0x3c, 0x13, 0x68,
	0xc1, 0xfe, 0xac, 0x1a, 0x9d, 0x25, 0x7a, 0x3c, 0xa6, 0x4b, 0x49, 0xeb, 0xb2, 0x7a, 0xa5, 0x2e,
	0x26, 0xfa, 0x0f, 0x61, 0xaa, 0xb0, 0xac, 0x84, 0xa2, 0xbd, 0x54, 0x04, 0x6d, 0xb4, 0x7f, 0x16,
	0x61, 0x59, 0x4f, 0x13, 0x8a, 0x61, 0x65, 0xb4, 0x22, 0x68, 0xc9, 0xcb, 0x3e, 0x0f, 0xde, 0xa5,
	0xab, 0x55, 0x5b, 0x9e, 0x0c, 0x32, 0x3c, 0x70, 0xe3, 0xd5, 0xa7, 0x6f, 0x6f, 0x8b, 0x35, 0xe4,
	0x90, 0xb1, 0xb7, 0xe8, 0x62, 0x75, 0xd0, 0x11, 0x9c, 0x49, 0xc3, 0x10, 0x9e, 0x90, 0x33, 0xad,
	0xbb, 0x34, 0x11, 0x63, 0xcb, 0x36, 0x75, 0x59, 0x8c, 0x1a, 0x7f, 0x2b, 0x4b, 0x5e, 0xe8, 0x7d,
	0x3a, 0x42, 0x43, 0xf8, 0x9f, 0xf9, 0xe1, 0x3b, 0x6d, 0xfd, 0xcb, 0xf3, 0x1c, 0x2e, 0x1b, 0xe7,
	0x3c, 0x87, 0x4b, 0x27, 0x06, 0x2f, 0x6a, 0x0e, 0x0b, 0xa8, 0x3a, 0xce, 0x41, 0xc5, 0x92, 0x0c,
	0xdb, 0x1b, 0x77, 0x8e, 0xcf, 0x5c, 0x70, 0x72, 0xe6, 0x82, 0xaf, 0x67, 0x2e, 0x78, 0x73, 0xee,
	0x16, 0x4e, 0xce, 0xdd, 0xc2, 0xe7, 0x73, 0xb7, 0xf0, 0x74, 0x25, 0xb3, 0x7a, 0x26, 0x72, 0xbd,
	0x47, 0x3b, 0x32, 0x93, 0x45, 0xaf, 0x5f, 0x67, 0x5a, 0xbf, 0x7d, 0xb7, 0x7e, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xd9, 0x15, 0xf4, 0x69, 0xe6, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GasPrices returns the gas prices for the network.
	GasPrices(ctx context.Context, in *QueryGasPricesRequest, opts ...grpc.CallOption) (*QueryGasPricesResponse, error)
	// GasPrice returns the gas price for the network.
	GasPrice(ctx context.Context, in *QueryGasPriceRequest, opts ...grpc.CallOption) (*QueryGasPriceResponse, error)
	// GetTxsEvent fetches txs by event.
	GetTxsV2Event(ctx context.Context, in *GetTxsEventV2Request, opts ...grpc.CallOption) (*GetTxsEventV2Response, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GasPrices(ctx context.Context, in *QueryGasPricesRequest, opts ...grpc.CallOption) (*QueryGasPricesResponse, error) {
	out := new(QueryGasPricesResponse)
	err := c.cc.Invoke(ctx, "/initia.tx.v1.Query/GasPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPrice(ctx context.Context, in *QueryGasPriceRequest, opts ...grpc.CallOption) (*QueryGasPriceResponse, error) {
	out := new(QueryGasPriceResponse)
	err := c.cc.Invoke(ctx, "/initia.tx.v1.Query/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTxsV2Event(ctx context.Context, in *GetTxsEventV2Request, opts ...grpc.CallOption) (*GetTxsEventV2Response, error) {
	out := new(GetTxsEventV2Response)
	err := c.cc.Invoke(ctx, "/initia.tx.v1.Query/GetTxsV2Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GasPrices returns the gas prices for the network.
	GasPrices(context.Context, *QueryGasPricesRequest) (*QueryGasPricesResponse, error)
	// GasPrice returns the gas price for the network.
	GasPrice(context.Context, *QueryGasPriceRequest) (*QueryGasPriceResponse, error)
	// GetTxsEvent fetches txs by event.
	GetTxsV2Event(context.Context, *GetTxsEventV2Request) (*GetTxsEventV2Response, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GasPrices(ctx context.Context, req *QueryGasPricesRequest) (*QueryGasPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrices not implemented")
}
func (*UnimplementedQueryServer) GasPrice(ctx context.Context, req *QueryGasPriceRequest) (*QueryGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedQueryServer) GetTxsV2Event(ctx context.Context, req *GetTxsEventV2Request) (*GetTxsEventV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxsV2Event not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GasPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.tx.v1.Query/GasPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrices(ctx, req.(*QueryGasPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.tx.v1.Query/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrice(ctx, req.(*QueryGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTxsV2Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxsEventV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTxsV2Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.tx.v1.Query/GetTxsV2Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTxsV2Event(ctx, req.(*GetTxsEventV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "initia.tx.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GasPrices",
			Handler:    _Query_GasPrices_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _Query_GasPrice_Handler,
		},
		{
			MethodName: "GetTxsV2Event",
			Handler:    _Query_GetTxsV2Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initia/tx/v1/query.proto",
}

func (m *QueryGasPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGasPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasPrices) > 0 {
		for iNdEx := len(m.GasPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTxsEventV2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxsEventV2Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxsEventV2Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Events[iNdEx])
			copy(dAtA[i:], m.Events[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Events[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTxsEventV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTxsEventV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTxsEventV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxResponses) > 0 {
		for iNdEx := len(m.TxResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGasPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGasPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPrices) > 0 {
		for _, e := range m.GasPrices {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GetTxsEventV2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, s := range m.Events {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetTxsEventV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TxResponses) > 0 {
		for _, e := range m.TxResponses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovQuery(uint64(m.Total))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGasPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrices = append(m.GasPrices, types.DecCoin{})
			if err := m.GasPrices[len(m.GasPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxsEventV2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxsEventV2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxsEventV2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTxsEventV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTxsEventV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTxsEventV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &tx.Tx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResponses = append(m.TxResponses, &types.TxResponse{})
			if err := m.TxResponses[len(m.TxResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
