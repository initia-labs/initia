// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/lightclients/tendermint_attestor/v1/attestation.proto

package tendermintattestor

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/ibc-go/v8/modules/core/23-commitment/types"
	_ "github.com/cosmos/ics23/go"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MerkleProofBytesWithAttestations struct {
	ProofBytes   []byte         `protobuf:"bytes,1,opt,name=proof_bytes,json=proofBytes,proto3" json:"proof_bytes,omitempty"`
	Attestations []*Attestation `protobuf:"bytes,2,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *MerkleProofBytesWithAttestations) Reset()         { *m = MerkleProofBytesWithAttestations{} }
func (m *MerkleProofBytesWithAttestations) String() string { return proto.CompactTextString(m) }
func (*MerkleProofBytesWithAttestations) ProtoMessage()    {}
func (*MerkleProofBytesWithAttestations) Descriptor() ([]byte, []int) {
	return fileDescriptor_f03d7611efb9a603, []int{0}
}
func (m *MerkleProofBytesWithAttestations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleProofBytesWithAttestations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleProofBytesWithAttestations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleProofBytesWithAttestations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleProofBytesWithAttestations.Merge(m, src)
}
func (m *MerkleProofBytesWithAttestations) XXX_Size() int {
	return m.Size()
}
func (m *MerkleProofBytesWithAttestations) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleProofBytesWithAttestations.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleProofBytesWithAttestations proto.InternalMessageInfo

func (m *MerkleProofBytesWithAttestations) GetProofBytes() []byte {
	if m != nil {
		return m.ProofBytes
	}
	return nil
}

func (m *MerkleProofBytesWithAttestations) GetAttestations() []*Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type Attestation struct {
	PubKey    *types.Any `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Signature []byte     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Attestation) Reset()         { *m = Attestation{} }
func (m *Attestation) String() string { return proto.CompactTextString(m) }
func (*Attestation) ProtoMessage()    {}
func (*Attestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f03d7611efb9a603, []int{1}
}
func (m *Attestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attestation.Merge(m, src)
}
func (m *Attestation) XXX_Size() int {
	return m.Size()
}
func (m *Attestation) XXX_DiscardUnknown() {
	xxx_messageInfo_Attestation.DiscardUnknown(m)
}

var xxx_messageInfo_Attestation proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MerkleProofBytesWithAttestations)(nil), "ibc.lightclients.tendermint_attestor.v1.MerkleProofBytesWithAttestations")
	proto.RegisterType((*Attestation)(nil), "ibc.lightclients.tendermint_attestor.v1.Attestation")
}

func init() {
	proto.RegisterFile("ibc/lightclients/tendermint_attestor/v1/attestation.proto", fileDescriptor_f03d7611efb9a603)
}

var fileDescriptor_f03d7611efb9a603 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbd, 0x6e, 0xd4, 0x40,
	0x10, 0xb6, 0x03, 0x0a, 0x62, 0x9d, 0xca, 0xba, 0xc2, 0x89, 0x22, 0xe7, 0x94, 0x86, 0x34, 0xde,
	0x25, 0x17, 0x24, 0x04, 0x54, 0xb9, 0x86, 0x02, 0x21, 0x45, 0xd7, 0x80, 0xa0, 0xb0, 0xbc, 0xcb,
	0x9e, 0x6f, 0x75, 0xf6, 0x8e, 0xb5, 0x3b, 0x3e, 0x61, 0x9e, 0x80, 0x92, 0x17, 0x40, 0xe2, 0x21,
	0x78, 0x08, 0x44, 0x75, 0x25, 0x25, 0xba, 0x7b, 0x11, 0xe4, 0xbf, 0xb3, 0x91, 0x28, 0xa8, 0x3c,
	0xf3, 0xcd, 0x7e, 0x9f, 0xe7, 0xfb, 0x34, 0xe4, 0x99, 0xe2, 0x82, 0x65, 0x2a, 0x5d, 0xa1, 0xc8,
	0x94, 0xd4, 0x68, 0x19, 0x4a, 0xfd, 0x41, 0x9a, 0x5c, 0x69, 0x8c, 0x13, 0x44, 0x69, 0x11, 0x0c,
	0xdb, 0x5c, 0xb3, 0xb6, 0x4e, 0x50, 0x81, 0xa6, 0x85, 0x01, 0x04, 0xff, 0x91, 0xe2, 0x82, 0x8e,
	0xa9, 0xf4, 0x1f, 0x54, 0xba, 0xb9, 0x3e, 0x3b, 0x15, 0x60, 0x73, 0xb0, 0x71, 0x43, 0x63, 0x6d,
	0xd3, 0x6a, 0x9c, 0x9d, 0xa6, 0x00, 0x69, 0x26, 0x59, 0xd3, 0xf1, 0x72, 0xc9, 0x12, 0x5d, 0x75,
	0xa3, 0x49, 0x0a, 0x29, 0xb4, 0x94, 0xba, 0xea, 0xd0, 0xf3, 0x96, 0xce, 0x94, 0xb0, 0xb3, 0x9b,
	0x7a, 0xaf, 0xc2, 0x00, 0x2c, 0x7b, 0xb9, 0x7a, 0x25, 0x26, 0xc0, 0x48, 0x26, 0x20, 0xcf, 0x15,
	0xe6, 0x52, 0x63, 0xfd, 0x68, 0xe8, 0xda, 0x87, 0x97, 0x5f, 0x5d, 0x32, 0x7d, 0x2d, 0xcd, 0x3a,
	0x93, 0x77, 0x35, 0x7f, 0x5e, 0xa1, 0xb4, 0x6f, 0x14, 0xae, 0x6e, 0x07, 0x97, 0xd6, 0xbf, 0x20,
	0x5e, 0xa3, 0x1e, 0xf3, 0x7a, 0x1c, 0xb8, 0x53, 0xf7, 0xea, 0x64, 0x41, 0x8a, 0x03, 0xc1, 0x7f,
	0x4b, 0x4e, 0x46, 0xb1, 0xd8, 0xe0, 0x68, 0x7a, 0xef, 0xca, 0x9b, 0x3d, 0xa1, 0xff, 0x19, 0x0c,
	0x1d, 0xfd, 0x6d, 0xf1, 0x97, 0xd2, 0xe5, 0x27, 0xe2, 0x8d, 0x86, 0xfe, 0x4b, 0xf2, 0xa0, 0x28,
	0x79, 0xbc, 0x96, 0x55, 0xb3, 0x85, 0x37, 0x9b, 0xd0, 0x36, 0x38, 0xda, 0x07, 0x47, 0x6f, 0x75,
	0x35, 0x0f, 0x7e, 0x7e, 0x8f, 0x26, 0x5d, 0xbe, 0xc2, 0x54, 0x05, 0x02, 0xbd, 0x2b, 0xf9, 0x2b,
	0x59, 0x2d, 0x8e, 0x8b, 0xe6, 0xeb, 0x9f, 0x93, 0x87, 0x56, 0xa5, 0x3a, 0xc1, 0xd2, 0xc8, 0xe0,
	0xa8, 0x31, 0x34, 0x00, 0xcf, 0xef, 0x7f, 0xfe, 0x76, 0xe1, 0xcc, 0xcb, 0x1f, 0xbb, 0xd0, 0xdd,
	0xee, 0x42, 0xf7, 0xf7, 0x2e, 0x74, 0xbf, 0xec, 0x43, 0x67, 0xbb, 0x0f, 0x9d, 0x5f, 0xfb, 0xd0,
	0x79, 0xf7, 0x3e, 0x55, 0xb8, 0x2a, 0x39, 0x15, 0x90, 0x33, 0xa5, 0x15, 0xaa, 0x24, 0xca, 0x12,
	0x6e, 0xbb, 0x9a, 0x7d, 0x64, 0x87, 0x63, 0x8a, 0xfa, 0x6b, 0x7a, 0xfc, 0x34, 0x1a, 0xcc, 0x47,
	0xbd, 0xf9, 0x17, 0x03, 0xd6, 0x43, 0xfc, 0xb8, 0xb1, 0x72, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0xe0, 0xf6, 0xb8, 0x92, 0x02, 0x00, 0x00,
}

func (m *MerkleProofBytesWithAttestations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleProofBytesWithAttestations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleProofBytesWithAttestations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAttestation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProofBytes) > 0 {
		i -= len(m.ProofBytes)
		copy(dAtA[i:], m.ProofBytes)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.ProofBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Attestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAttestation(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAttestation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttestation(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttestation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MerkleProofBytesWithAttestations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofBytes)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovAttestation(uint64(l))
		}
	}
	return n
}

func (m *Attestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovAttestation(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAttestation(uint64(l))
	}
	return n
}

func sovAttestation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttestation(x uint64) (n int) {
	return sovAttestation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MerkleProofBytesWithAttestations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleProofBytesWithAttestations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleProofBytesWithAttestations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofBytes = append(m.ProofBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofBytes == nil {
				m.ProofBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, &Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAttestation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAttestation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttestation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAttestation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttestation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttestation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttestation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttestation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttestation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttestation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttestation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttestation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttestation = fmt.Errorf("proto: unexpected end of group")
)
