// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/perm/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChannelState defines the channel state for the specific port-id:channel-id pair.
type ChannelState struct {
	PortId    string    `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId string    `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	HaltState HaltState `protobuf:"bytes,3,opt,name=halt_state,json=haltState,proto3" json:"halt_state"`
	Relayers  []string  `protobuf:"bytes,4,rep,name=relayers,proto3" json:"relayers,omitempty"`
}

func (m *ChannelState) Reset()         { *m = ChannelState{} }
func (m *ChannelState) String() string { return proto.CompactTextString(m) }
func (*ChannelState) ProtoMessage()    {}
func (*ChannelState) Descriptor() ([]byte, []int) {
	return fileDescriptor_58b3976370e0fa77, []int{0}
}
func (m *ChannelState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelState.Merge(m, src)
}
func (m *ChannelState) XXX_Size() int {
	return m.Size()
}
func (m *ChannelState) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelState.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelState proto.InternalMessageInfo

func (m *ChannelState) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *ChannelState) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelState) GetHaltState() HaltState {
	if m != nil {
		return m.HaltState
	}
	return HaltState{}
}

func (m *ChannelState) GetRelayers() []string {
	if m != nil {
		return m.Relayers
	}
	return nil
}

// HaltState defines the halt state for the specific port-id:channel-id pair.
type HaltState struct {
	Halted   bool   `protobuf:"varint,1,opt,name=halted,proto3" json:"halted,omitempty"`
	HaltedBy string `protobuf:"bytes,2,opt,name=halted_by,json=haltedBy,proto3" json:"halted_by,omitempty"`
}

func (m *HaltState) Reset()         { *m = HaltState{} }
func (m *HaltState) String() string { return proto.CompactTextString(m) }
func (*HaltState) ProtoMessage()    {}
func (*HaltState) Descriptor() ([]byte, []int) {
	return fileDescriptor_58b3976370e0fa77, []int{1}
}
func (m *HaltState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HaltState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HaltState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HaltState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HaltState.Merge(m, src)
}
func (m *HaltState) XXX_Size() int {
	return m.Size()
}
func (m *HaltState) XXX_DiscardUnknown() {
	xxx_messageInfo_HaltState.DiscardUnknown(m)
}

var xxx_messageInfo_HaltState proto.InternalMessageInfo

func (m *HaltState) GetHalted() bool {
	if m != nil {
		return m.Halted
	}
	return false
}

func (m *HaltState) GetHaltedBy() string {
	if m != nil {
		return m.HaltedBy
	}
	return ""
}

func init() {
	proto.RegisterType((*ChannelState)(nil), "ibc.applications.perm.v1.ChannelState")
	proto.RegisterType((*HaltState)(nil), "ibc.applications.perm.v1.HaltState")
}

func init() {
	proto.RegisterFile("ibc/applications/perm/v1/types.proto", fileDescriptor_58b3976370e0fa77)
}

var fileDescriptor_58b3976370e0fa77 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x8c, 0x69, 0x55, 0x6a, 0xc3, 0x64, 0x21, 0x88, 0x8a, 0x30, 0x55, 0x61, 0xe8, 0x82, 0xad,
	0xc2, 0x0f, 0xa0, 0xb2, 0xb4, 0x6b, 0xd8, 0x58, 0x2a, 0x3b, 0xb5, 0x1a, 0x4b, 0x6e, 0x6c, 0x25,
	0xa6, 0x22, 0x7f, 0xc1, 0x87, 0xf0, 0x21, 0x1d, 0x3b, 0x32, 0x21, 0xd4, 0xfc, 0x08, 0xb2, 0x13,
	0x2a, 0x16, 0xb6, 0xbb, 0x7b, 0xf7, 0xec, 0xd3, 0x3d, 0x74, 0xab, 0x44, 0xca, 0xb8, 0xb5, 0x5a,
	0xa5, 0xdc, 0x29, 0x93, 0x97, 0xcc, 0xca, 0x62, 0xcd, 0x36, 0x13, 0xe6, 0x2a, 0x2b, 0x4b, 0x6a,
	0x0b, 0xe3, 0x0c, 0x8e, 0x95, 0x48, 0xe9, 0x5f, 0x17, 0xf5, 0x2e, 0xba, 0x99, 0x0c, 0xce, 0x56,
	0x66, 0x65, 0x82, 0x89, 0x79, 0xd4, 0xf8, 0x47, 0x1f, 0x00, 0x9d, 0x3e, 0x65, 0x3c, 0xcf, 0xa5,
	0x7e, 0x76, 0xdc, 0x49, 0x7c, 0x81, 0x8e, 0xad, 0x29, 0xdc, 0x42, 0x2d, 0x63, 0x30, 0x04, 0x63,
	0x98, 0xf4, 0x3c, 0x9d, 0x2f, 0xf1, 0x15, 0x42, 0x69, 0x63, 0xf4, 0xb3, 0xa3, 0x30, 0x83, 0xad,
	0x32, 0x5f, 0xe2, 0x19, 0x42, 0x19, 0xd7, 0x6e, 0x51, 0xfa, 0x57, 0xe2, 0xce, 0x10, 0x8c, 0x4f,
	0xee, 0x6f, 0xe8, 0x7f, 0x69, 0xe8, 0x8c, 0x6b, 0x17, 0x3e, 0x9c, 0x76, 0xb7, 0x5f, 0xd7, 0x51,
	0x02, 0xb3, 0x5f, 0x01, 0x0f, 0x50, 0xbf, 0x90, 0x9a, 0x57, 0xb2, 0x28, 0xe3, 0xee, 0xb0, 0x33,
	0x86, 0xc9, 0x81, 0x8f, 0x1e, 0x11, 0x3c, 0x6c, 0xe2, 0x73, 0xd4, 0xf3, 0x5b, 0xb2, 0x49, 0xda,
	0x4f, 0x5a, 0x86, 0x2f, 0x11, 0x6c, 0xd0, 0x42, 0x54, 0x6d, 0xd0, 0x7e, 0x23, 0x4c, 0xab, 0xe9,
	0x6c, 0xbb, 0x27, 0x60, 0xb7, 0x27, 0xe0, 0x7b, 0x4f, 0xc0, 0x7b, 0x4d, 0xa2, 0x5d, 0x4d, 0xa2,
	0xcf, 0x9a, 0x44, 0x2f, 0x74, 0xa5, 0x5c, 0xf6, 0x2a, 0x68, 0x6a, 0xd6, 0x4c, 0xe5, 0xca, 0x29,
	0x7e, 0xa7, 0xb9, 0x28, 0x5b, 0xcc, 0xde, 0x98, 0x3f, 0x40, 0xe8, 0x3c, 0x14, 0x2e, 0x7a, 0xa1,
	0xc1, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0xab, 0x03, 0x0b, 0x99, 0x01, 0x00, 0x00,
}

func (m *ChannelState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Relayers) > 0 {
		for iNdEx := len(m.Relayers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Relayers[iNdEx])
			copy(dAtA[i:], m.Relayers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Relayers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.HaltState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HaltState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HaltState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HaltState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HaltedBy) > 0 {
		i -= len(m.HaltedBy)
		copy(dAtA[i:], m.HaltedBy)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.HaltedBy)))
		i--
		dAtA[i] = 0x12
	}
	if m.Halted {
		i--
		if m.Halted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChannelState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.HaltState.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Relayers) > 0 {
		for _, s := range m.Relayers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *HaltState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Halted {
		n += 2
	}
	l = len(m.HaltedBy)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaltState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HaltState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayers = append(m.Relayers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HaltState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HaltState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HaltState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Halted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Halted = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaltedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HaltedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
