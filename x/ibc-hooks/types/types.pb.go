// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: initia/ibchooks/v1/types.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of hook parameters.
type Params struct {
	// if the ACL of a address is not set,
	// then we use this value to decide the ACL.
	DefaultAllowed bool `protobuf:"varint,1,opt,name=default_allowed,json=defaultAllowed,proto3" json:"default_allowed,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_655343d3ce5046ea, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// ACL defines the ACL entry of an address.
type ACL struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Allowed bool   `protobuf:"varint,2,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (m *ACL) Reset()         { *m = ACL{} }
func (m *ACL) String() string { return proto.CompactTextString(m) }
func (*ACL) ProtoMessage()    {}
func (*ACL) Descriptor() ([]byte, []int) {
	return fileDescriptor_655343d3ce5046ea, []int{1}
}
func (m *ACL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACL.Merge(m, src)
}
func (m *ACL) XXX_Size() int {
	return m.Size()
}
func (m *ACL) XXX_DiscardUnknown() {
	xxx_messageInfo_ACL.DiscardUnknown(m)
}

var xxx_messageInfo_ACL proto.InternalMessageInfo

// TransferFunds defines the transfer funds.
type TransferFunds struct {
	BalanceChange  types.Coin `protobuf:"bytes,1,opt,name=balance_change,json=balanceChange,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance_change" yaml:"balance_change"`
	AmountInPacket types.Coin `protobuf:"bytes,2,opt,name=amount_in_packet,json=amountInPacket,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount_in_packet" yaml:"amount_in_packet"`
}

func (m *TransferFunds) Reset()         { *m = TransferFunds{} }
func (m *TransferFunds) String() string { return proto.CompactTextString(m) }
func (*TransferFunds) ProtoMessage()    {}
func (*TransferFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_655343d3ce5046ea, []int{2}
}
func (m *TransferFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFunds.Merge(m, src)
}
func (m *TransferFunds) XXX_Size() int {
	return m.Size()
}
func (m *TransferFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFunds.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFunds proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "initia.ibchooks.v1.Params")
	proto.RegisterType((*ACL)(nil), "initia.ibchooks.v1.ACL")
	proto.RegisterType((*TransferFunds)(nil), "initia.ibchooks.v1.TransferFunds")
}

func init() { proto.RegisterFile("initia/ibchooks/v1/types.proto", fileDescriptor_655343d3ce5046ea) }

var fileDescriptor_655343d3ce5046ea = []byte{
	// 434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0xe3, 0x22, 0x15, 0x30, 0xea, 0x15, 0x22, 0x10, 0xa5, 0x42, 0x0e, 0xca, 0x52, 0x54,
	0xe9, 0x6c, 0x1d, 0x4c, 0x74, 0x6b, 0x4f, 0x42, 0x42, 0x02, 0xb5, 0x9c, 0x98, 0x58, 0xa2, 0x97,
	0xc4, 0xcd, 0x59, 0x97, 0xd8, 0xa7, 0xd8, 0x39, 0xe8, 0x57, 0x60, 0x81, 0x81, 0x81, 0xb1, 0x63,
	0xc5, 0xd4, 0x91, 0x8f, 0x70, 0x63, 0x47, 0xa6, 0x02, 0xb9, 0xa1, 0xcc, 0x7c, 0x02, 0x14, 0xdb,
	0x87, 0x80, 0x01, 0x89, 0x25, 0x79, 0x7e, 0xff, 0xf8, 0x97, 0xff, 0xdf, 0x7e, 0x98, 0x08, 0x29,
	0x8c, 0x00, 0x26, 0xd2, 0x6c, 0xac, 0xd4, 0x44, 0xb3, 0xd9, 0x80, 0x99, 0xa3, 0x29, 0xd7, 0x74,
	0x5a, 0x2b, 0xa3, 0xc2, 0xd0, 0xe9, 0x74, 0xa9, 0xd3, 0xd9, 0x60, 0xf3, 0x06, 0x54, 0x42, 0x2a,
	0x66, 0x9f, 0xee, 0xb3, 0x4d, 0x92, 0x29, 0x5d, 0x29, 0xcd, 0x52, 0xd0, 0x9c, 0xcd, 0x06, 0x29,
	0x37, 0x30, 0x60, 0x99, 0x12, 0xd2, 0xeb, 0x37, 0x0b, 0x55, 0x28, 0x5b, 0xb2, 0xae, 0x72, 0xdd,
	0x78, 0x1f, 0xaf, 0x1e, 0x40, 0x0d, 0x95, 0x0e, 0xb7, 0xf0, 0x7a, 0xce, 0x0f, 0xa1, 0x29, 0x4d,
	0x02, 0x65, 0xa9, 0x5e, 0xf1, 0x7c, 0x03, 0xdd, 0x43, 0xf7, 0xaf, 0x8c, 0x7a, 0xbe, 0xbd, 0xeb,
	0xba, 0x3b, 0x77, 0x3f, 0x1c, 0x47, 0xc1, 0xf7, 0xe3, 0x08, 0xbd, 0xb9, 0x38, 0xdd, 0x5e, 0xff,
	0xe5, 0xda, 0x61, 0xe2, 0x47, 0xf8, 0xd2, 0xee, 0xf0, 0x69, 0xb8, 0x81, 0x2f, 0x43, 0x9e, 0xd7,
	0x5c, 0x6b, 0x4b, 0xb9, 0x3a, 0x5a, 0x2e, 0xad, 0xe2, 0xf9, 0x2b, 0x96, 0xbf, 0x5c, 0xc6, 0x9f,
	0x56, 0xf0, 0xda, 0x8b, 0x1a, 0xa4, 0x3e, 0xe4, 0xf5, 0xe3, 0x46, 0xe6, 0x3a, 0x7c, 0x8b, 0x70,
	0x2f, 0x85, 0x12, 0x64, 0xc6, 0x93, 0x6c, 0x0c, 0xb2, 0xe0, 0x96, 0x76, 0xed, 0xc1, 0x1d, 0xea,
	0xd2, 0xd2, 0x2e, 0x2d, 0xf5, 0x69, 0xe9, 0x50, 0x09, 0xb9, 0xf7, 0x6c, 0x7e, 0x1e, 0x05, 0x3f,
	0xce, 0xa3, 0x5b, 0x47, 0x50, 0x95, 0x3b, 0xf1, 0x9f, 0xdb, 0xe3, 0x8f, 0x5f, 0xa2, 0xad, 0x42,
	0x98, 0x71, 0x93, 0xd2, 0x4c, 0x55, 0xcc, 0x9f, 0x99, 0x7b, 0xf5, 0x75, 0x3e, 0xf1, 0x27, 0xdf,
	0x91, 0x4e, 0x2e, 0x4e, 0xb7, 0xd1, 0x68, 0xcd, 0x03, 0x86, 0x76, 0x7f, 0xf8, 0x1e, 0xe1, 0xeb,
	0x50, 0xa9, 0x46, 0x9a, 0x44, 0xc8, 0x64, 0x0a, 0xd9, 0x84, 0x1b, 0x9b, 0xe3, 0x9f, 0x9e, 0xf6,
	0xbd, 0xa7, 0xdb, 0xce, 0xd3, 0xdf, 0x80, 0xff, 0x77, 0xd5, 0x73, 0x88, 0x27, 0xf2, 0xc0, 0x02,
	0xf6, 0x9e, 0xcf, 0xbf, 0x91, 0xe0, 0xa4, 0x25, 0x68, 0xde, 0x12, 0x74, 0xd6, 0x12, 0xf4, 0xb5,
	0x25, 0xe8, 0xdd, 0x82, 0x04, 0x67, 0x0b, 0x12, 0x7c, 0x5e, 0x90, 0xe0, 0x25, 0xfb, 0x8d, 0xef,
	0x06, 0xaa, 0x5f, 0x42, 0xaa, 0x7d, 0xcd, 0x5e, 0x77, 0xe3, 0xd7, 0x77, 0x37, 0x69, 0x7f, 0x96,
	0xae, 0xda, 0x01, 0x79, 0xf8, 0x33, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xd9, 0x81, 0x29, 0x9f, 0x02,
	0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DefaultAllowed != that1.DefaultAllowed {
		return false
	}
	return true
}
func (this *ACL) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ACL)
	if !ok {
		that2, ok := that.(ACL)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Allowed != that1.Allowed {
		return false
	}
	return true
}
func (this *TransferFunds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferFunds)
	if !ok {
		that2, ok := that.(TransferFunds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BalanceChange.Equal(&that1.BalanceChange) {
		return false
	}
	if !this.AmountInPacket.Equal(&that1.AmountInPacket) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultAllowed {
		i--
		if m.DefaultAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ACL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ACL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Allowed {
		i--
		if m.Allowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AmountInPacket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BalanceChange.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultAllowed {
		n += 2
	}
	return n
}

func (m *ACL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Allowed {
		n += 2
	}
	return n
}

func (m *TransferFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BalanceChange.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.AmountInPacket.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DefaultAllowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountInPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountInPacket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
