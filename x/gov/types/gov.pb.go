// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: initia/gov/v1/gov.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	v1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the x/gov module.
type Params struct {
	// Minimum deposit for a proposal to enter voting period.
	MinDeposit []types.Coin `protobuf:"bytes,1,rep,name=min_deposit,json=minDeposit,proto3" json:"min_deposit"`
	// Maximum period for Atom holders to deposit on a proposal. Initial value: 2
	// months.
	MaxDepositPeriod time.Duration `protobuf:"bytes,2,opt,name=max_deposit_period,json=maxDepositPeriod,proto3,stdduration" json:"max_deposit_period"`
	// Duration of the voting period.
	VotingPeriod time.Duration `protobuf:"bytes,3,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period"`
	//  Minimum percentage of total stake needed to vote for a result to be
	//  considered valid.
	Quorum string `protobuf:"bytes,4,opt,name=quorum,proto3" json:"quorum,omitempty"`
	//  Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
	Threshold string `protobuf:"bytes,5,opt,name=threshold,proto3" json:"threshold,omitempty"`
	//  Minimum value of Veto votes to Total votes ratio for proposal to be
	//  vetoed. Default value: 1/3.
	VetoThreshold string `protobuf:"bytes,6,opt,name=veto_threshold,json=vetoThreshold,proto3" json:"veto_threshold,omitempty"`
	//  The ratio representing the proportion of the deposit value that must be paid at proposal submission.
	MinInitialDepositRatio string `protobuf:"bytes,7,opt,name=min_initial_deposit_ratio,json=minInitialDepositRatio,proto3" json:"min_initial_deposit_ratio,omitempty"`
	// The cancel ratio which will not be returned back to the depositors when a proposal is cancelled.
	//
	// Since: cosmos-sdk 0.50
	ProposalCancelRatio string `protobuf:"bytes,8,opt,name=proposal_cancel_ratio,json=proposalCancelRatio,proto3" json:"proposal_cancel_ratio,omitempty"`
	// The address which will receive (proposal_cancel_ratio * deposit) proposal deposits.
	// If empty, the (proposal_cancel_ratio * deposit) proposal deposits will be burned.
	//
	// Since: cosmos-sdk 0.50
	ProposalCancelDest string `protobuf:"bytes,9,opt,name=proposal_cancel_dest,json=proposalCancelDest,proto3" json:"proposal_cancel_dest,omitempty"`
	// Duration of the voting period of an expedited proposal.
	//
	// Since: cosmos-sdk 0.50
	ExpeditedVotingPeriod time.Duration `protobuf:"bytes,10,opt,name=expedited_voting_period,json=expeditedVotingPeriod,proto3,stdduration" json:"expedited_voting_period"`
	// Minimum proportion of Yes votes for proposal to pass. Default value: 0.67.
	//
	// Since: cosmos-sdk 0.50
	ExpeditedThreshold string `protobuf:"bytes,11,opt,name=expedited_threshold,json=expeditedThreshold,proto3" json:"expedited_threshold,omitempty"`
	//  Minimum expedited deposit for a proposal to enter voting period.
	ExpeditedMinDeposit []types.Coin `protobuf:"bytes,12,rep,name=expedited_min_deposit,json=expeditedMinDeposit,proto3" json:"expedited_min_deposit"`
	// burn deposits if a proposal does not meet quorum
	BurnVoteQuorum bool `protobuf:"varint,13,opt,name=burn_vote_quorum,json=burnVoteQuorum,proto3" json:"burn_vote_quorum,omitempty"`
	// burn deposits if the proposal does not enter voting period
	BurnProposalDepositPrevote bool `protobuf:"varint,14,opt,name=burn_proposal_deposit_prevote,json=burnProposalDepositPrevote,proto3" json:"burn_proposal_deposit_prevote,omitempty"`
	// burn deposits if quorum with vote type no_veto is met
	BurnVoteVeto bool `protobuf:"varint,15,opt,name=burn_vote_veto,json=burnVoteVeto,proto3" json:"burn_vote_veto,omitempty"`
	// The ratio representing the proportion of the deposit value minimum that must be met when making a deposit.
	// Default value: 0.01. Meaning that for a chain with a min_deposit of 100stake, a deposit of 1stake would be
	// required.
	//
	// Since: cosmos-sdk 0.50
	MinDepositRatio string `protobuf:"bytes,16,opt,name=min_deposit_ratio,json=minDepositRatio,proto3" json:"min_deposit_ratio,omitempty"`
	// Minimum deposit for a emergency proposal to enter voting period.
	EmergencyMinDeposit []types.Coin `protobuf:"bytes,91,rep,name=emergency_min_deposit,json=emergencyMinDeposit,proto3" json:"emergency_min_deposit"`
	// Tally interval for emergency proposal.
	EmergencyTallyInterval time.Duration `protobuf:"bytes,92,opt,name=emergency_tally_interval,json=emergencyTallyInterval,proto3,stdduration" json:"emergency_tally_interval"`
	// Whitelist addresses that can submit emergency proposals.
	EmergencySubmitters []string `protobuf:"bytes,93,rep,name=emergency_submitters,json=emergencySubmitters,proto3" json:"emergency_submitters,omitempty"`
	// Low threshold functions for emergency and expedited proposal.
	// These are Move function identifiers and can only be applied
	// for Move execute messages.
	LowThresholdFunctions []string `protobuf:"bytes,94,rep,name=low_threshold_functions,json=lowThresholdFunctions,proto3" json:"low_threshold_functions,omitempty"`
	// Vesting is the vesting contract info for tally.
	Vesting *Vesting `protobuf:"bytes,95,opt,name=vesting,proto3" json:"vesting,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adfe7a550f5e4ec, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinDeposit() []types.Coin {
	if m != nil {
		return m.MinDeposit
	}
	return nil
}

func (m *Params) GetMaxDepositPeriod() time.Duration {
	if m != nil {
		return m.MaxDepositPeriod
	}
	return 0
}

func (m *Params) GetVotingPeriod() time.Duration {
	if m != nil {
		return m.VotingPeriod
	}
	return 0
}

func (m *Params) GetQuorum() string {
	if m != nil {
		return m.Quorum
	}
	return ""
}

func (m *Params) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

func (m *Params) GetVetoThreshold() string {
	if m != nil {
		return m.VetoThreshold
	}
	return ""
}

func (m *Params) GetMinInitialDepositRatio() string {
	if m != nil {
		return m.MinInitialDepositRatio
	}
	return ""
}

func (m *Params) GetProposalCancelRatio() string {
	if m != nil {
		return m.ProposalCancelRatio
	}
	return ""
}

func (m *Params) GetProposalCancelDest() string {
	if m != nil {
		return m.ProposalCancelDest
	}
	return ""
}

func (m *Params) GetExpeditedVotingPeriod() time.Duration {
	if m != nil {
		return m.ExpeditedVotingPeriod
	}
	return 0
}

func (m *Params) GetExpeditedThreshold() string {
	if m != nil {
		return m.ExpeditedThreshold
	}
	return ""
}

func (m *Params) GetExpeditedMinDeposit() []types.Coin {
	if m != nil {
		return m.ExpeditedMinDeposit
	}
	return nil
}

func (m *Params) GetBurnVoteQuorum() bool {
	if m != nil {
		return m.BurnVoteQuorum
	}
	return false
}

func (m *Params) GetBurnProposalDepositPrevote() bool {
	if m != nil {
		return m.BurnProposalDepositPrevote
	}
	return false
}

func (m *Params) GetBurnVoteVeto() bool {
	if m != nil {
		return m.BurnVoteVeto
	}
	return false
}

func (m *Params) GetMinDepositRatio() string {
	if m != nil {
		return m.MinDepositRatio
	}
	return ""
}

func (m *Params) GetEmergencyMinDeposit() []types.Coin {
	if m != nil {
		return m.EmergencyMinDeposit
	}
	return nil
}

func (m *Params) GetEmergencyTallyInterval() time.Duration {
	if m != nil {
		return m.EmergencyTallyInterval
	}
	return 0
}

func (m *Params) GetEmergencySubmitters() []string {
	if m != nil {
		return m.EmergencySubmitters
	}
	return nil
}

func (m *Params) GetLowThresholdFunctions() []string {
	if m != nil {
		return m.LowThresholdFunctions
	}
	return nil
}

func (m *Params) GetVesting() *Vesting {
	if m != nil {
		return m.Vesting
	}
	return nil
}

// Vesting defines the vesting contract info for MsgVestingVote.
// At tally time, gov module would check vesting token amount.
type Vesting struct {
	// module_addr is the address of the vesting module.
	ModuleAddr string `protobuf:"bytes,1,opt,name=module_addr,json=moduleAddr,proto3" json:"module_addr,omitempty"`
	// module_name is the name of the vesting module.
	ModuleName string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// creator_addr is the address of the creator of the vesting contract.
	CreatorAddr string `protobuf:"bytes,3,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
}

func (m *Vesting) Reset()      { *m = Vesting{} }
func (*Vesting) ProtoMessage() {}
func (*Vesting) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adfe7a550f5e4ec, []int{1}
}
func (m *Vesting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vesting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vesting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vesting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vesting.Merge(m, src)
}
func (m *Vesting) XXX_Size() int {
	return m.Size()
}
func (m *Vesting) XXX_DiscardUnknown() {
	xxx_messageInfo_Vesting.DiscardUnknown(m)
}

var xxx_messageInfo_Vesting proto.InternalMessageInfo

func (m *Vesting) GetModuleAddr() string {
	if m != nil {
		return m.ModuleAddr
	}
	return ""
}

func (m *Vesting) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *Vesting) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

// TallyResult defines the result of a tally.
type TallyResult struct {
	TallyHeight       uint64 `protobuf:"varint,1,opt,name=tally_height,json=tallyHeight,proto3" json:"tally_height,omitempty"`
	TotalStakingPower string `protobuf:"bytes,2,opt,name=total_staking_power,json=totalStakingPower,proto3" json:"total_staking_power,omitempty"`
	TotalVestingPower string `protobuf:"bytes,3,opt,name=total_vesting_power,json=totalVestingPower,proto3" json:"total_vesting_power,omitempty"`
	// v1_tally_result is the original TallyResult from cosmos-sdk,
	// which contains both staking and vesting power.
	V1TallyResult *v1.TallyResult `protobuf:"bytes,4,opt,name=v1_tally_result,json=v1TallyResult,proto3" json:"v1_tally_result,omitempty"`
}

func (m *TallyResult) Reset()         { *m = TallyResult{} }
func (m *TallyResult) String() string { return proto.CompactTextString(m) }
func (*TallyResult) ProtoMessage()    {}
func (*TallyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adfe7a550f5e4ec, []int{2}
}
func (m *TallyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TallyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TallyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TallyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TallyResult.Merge(m, src)
}
func (m *TallyResult) XXX_Size() int {
	return m.Size()
}
func (m *TallyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TallyResult.DiscardUnknown(m)
}

var xxx_messageInfo_TallyResult proto.InternalMessageInfo

func (m *TallyResult) GetTallyHeight() uint64 {
	if m != nil {
		return m.TallyHeight
	}
	return 0
}

func (m *TallyResult) GetTotalStakingPower() string {
	if m != nil {
		return m.TotalStakingPower
	}
	return ""
}

func (m *TallyResult) GetTotalVestingPower() string {
	if m != nil {
		return m.TotalVestingPower
	}
	return ""
}

func (m *TallyResult) GetV1TallyResult() *v1.TallyResult {
	if m != nil {
		return m.V1TallyResult
	}
	return nil
}

// Proposal defines the core field members of a governance proposal.
type Proposal struct {
	// id defines the unique id of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// messages are the arbitrary messages to be executed if the proposal passes.
	Messages []*types1.Any `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// status defines the proposal status.
	Status v1.ProposalStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cosmos.gov.v1.ProposalStatus" json:"status,omitempty"`
	// final_tally_result is the final tally result of the proposal. When
	// querying a proposal via gRPC, this field is not populated until the
	// proposal's voting period has ended.
	FinalTallyResult TallyResult `protobuf:"bytes,4,opt,name=final_tally_result,json=finalTallyResult,proto3" json:"final_tally_result"`
	// submit_time is the time of proposal submission.
	SubmitTime *time.Time `protobuf:"bytes,5,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time,omitempty"`
	// deposit_end_time is the end time for deposition.
	DepositEndTime *time.Time `protobuf:"bytes,6,opt,name=deposit_end_time,json=depositEndTime,proto3,stdtime" json:"deposit_end_time,omitempty"`
	// total_deposit is the total deposit on the proposal.
	TotalDeposit []types.Coin `protobuf:"bytes,7,rep,name=total_deposit,json=totalDeposit,proto3" json:"total_deposit"`
	// voting_start_time is the starting time to vote on a proposal.
	VotingStartTime *time.Time `protobuf:"bytes,8,opt,name=voting_start_time,json=votingStartTime,proto3,stdtime" json:"voting_start_time,omitempty"`
	// voting_end_time is the end time of voting on a proposal.
	VotingEndTime          *time.Time `protobuf:"bytes,9,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time,omitempty"`
	EmergencyStartTime     *time.Time `protobuf:"bytes,10,opt,name=emergency_start_time,json=emergencyStartTime,proto3,stdtime" json:"emergency_start_time,omitempty"`
	EmergencyNextTallyTime *time.Time `protobuf:"bytes,11,opt,name=emergency_next_tally_time,json=emergencyNextTallyTime,proto3,stdtime" json:"emergency_next_tally_time,omitempty"`
	// metadata is any arbitrary metadata attached to the proposal.
	// the recommended format of the metadata is to be found here:
	// https://docs.cosmos.network/v0.47/modules/gov#proposal-3
	Metadata string `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// title is the title of the proposal
	//
	// Since: cosmos-sdk 0.47
	Title string `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
	// summary is a short summary of the proposal
	//
	// Since: cosmos-sdk 0.47
	Summary string `protobuf:"bytes,14,opt,name=summary,proto3" json:"summary,omitempty"`
	// proposer is the address of the proposal sumbitter
	//
	// Since: cosmos-sdk 0.47
	Proposer string `protobuf:"bytes,15,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// expedited defines if the proposal is expedited
	//
	// Since: cosmos-sdk 0.50
	Expedited bool `protobuf:"varint,16,opt,name=expedited,proto3" json:"expedited,omitempty"`
	Emergency bool `protobuf:"varint,17,opt,name=emergency,proto3" json:"emergency,omitempty"`
	// failed_reason defines the reason why the proposal failed
	//
	// Since: cosmos-sdk 0.50
	FailedReason string `protobuf:"bytes,18,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6adfe7a550f5e4ec, []int{3}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Proposal) GetMessages() []*types1.Any {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Proposal) GetStatus() v1.ProposalStatus {
	if m != nil {
		return m.Status
	}
	return v1.ProposalStatus_PROPOSAL_STATUS_UNSPECIFIED
}

func (m *Proposal) GetFinalTallyResult() TallyResult {
	if m != nil {
		return m.FinalTallyResult
	}
	return TallyResult{}
}

func (m *Proposal) GetSubmitTime() *time.Time {
	if m != nil {
		return m.SubmitTime
	}
	return nil
}

func (m *Proposal) GetDepositEndTime() *time.Time {
	if m != nil {
		return m.DepositEndTime
	}
	return nil
}

func (m *Proposal) GetTotalDeposit() []types.Coin {
	if m != nil {
		return m.TotalDeposit
	}
	return nil
}

func (m *Proposal) GetVotingStartTime() *time.Time {
	if m != nil {
		return m.VotingStartTime
	}
	return nil
}

func (m *Proposal) GetVotingEndTime() *time.Time {
	if m != nil {
		return m.VotingEndTime
	}
	return nil
}

func (m *Proposal) GetEmergencyStartTime() *time.Time {
	if m != nil {
		return m.EmergencyStartTime
	}
	return nil
}

func (m *Proposal) GetEmergencyNextTallyTime() *time.Time {
	if m != nil {
		return m.EmergencyNextTallyTime
	}
	return nil
}

func (m *Proposal) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Proposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Proposal) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Proposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *Proposal) GetExpedited() bool {
	if m != nil {
		return m.Expedited
	}
	return false
}

func (m *Proposal) GetEmergency() bool {
	if m != nil {
		return m.Emergency
	}
	return false
}

func (m *Proposal) GetFailedReason() string {
	if m != nil {
		return m.FailedReason
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "initia.gov.v1.Params")
	proto.RegisterType((*Vesting)(nil), "initia.gov.v1.Vesting")
	proto.RegisterType((*TallyResult)(nil), "initia.gov.v1.TallyResult")
	proto.RegisterType((*Proposal)(nil), "initia.gov.v1.Proposal")
}

func init() { proto.RegisterFile("initia/gov/v1/gov.proto", fileDescriptor_6adfe7a550f5e4ec) }

var fileDescriptor_6adfe7a550f5e4ec = []byte{
	// 1279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x72, 0x1b, 0xc5,
	0x13, 0xf6, 0xda, 0x89, 0x2d, 0xb5, 0xfe, 0xd8, 0x9e, 0x38, 0xf1, 0xda, 0xf5, 0x8b, 0xe4, 0x9f,
	0xa1, 0x28, 0x93, 0x22, 0x12, 0x0e, 0x84, 0x43, 0xa8, 0x82, 0xb2, 0xe2, 0x50, 0x71, 0x20, 0x29,
	0xb3, 0x4e, 0xb9, 0x28, 0x02, 0x2c, 0x23, 0xed, 0x58, 0x9e, 0x62, 0x77, 0x47, 0xec, 0xcc, 0x2a,
	0xf2, 0x2b, 0x70, 0xca, 0x31, 0xc7, 0x1c, 0x39, 0xe6, 0x90, 0x37, 0xe0, 0x92, 0x63, 0x2a, 0x27,
	0x4e, 0x09, 0x95, 0x1c, 0xc2, 0x03, 0xf0, 0x00, 0xd4, 0xfc, 0xdb, 0x95, 0x84, 0xca, 0x65, 0x5d,
	0x6c, 0x4d, 0xf7, 0xf7, 0x7d, 0xd3, 0xdd, 0xd3, 0xd3, 0xb3, 0xb0, 0x4a, 0x63, 0x2a, 0x28, 0x6e,
	0x76, 0x59, 0xbf, 0xd9, 0xdf, 0x96, 0xff, 0x1a, 0xbd, 0x84, 0x09, 0x86, 0x2a, 0xda, 0xd1, 0x90,
	0x96, 0xfe, 0xf6, 0xfa, 0x32, 0x8e, 0x68, 0xcc, 0x9a, 0xea, 0xaf, 0x46, 0xac, 0xd7, 0x3a, 0x8c,
	0x47, 0x8c, 0x37, 0xdb, 0x98, 0x93, 0x66, 0x7f, 0xbb, 0x4d, 0x04, 0xde, 0x6e, 0x76, 0x18, 0x8d,
	0x8d, 0x7f, 0xd5, 0xf8, 0xc7, 0xa5, 0xd7, 0xd7, 0xb4, 0xc3, 0x57, 0xab, 0xa6, 0x5e, 0x18, 0xd7,
	0x4a, 0x97, 0x75, 0x99, 0xb6, 0xcb, 0x5f, 0x96, 0xd0, 0x65, 0xac, 0x1b, 0x92, 0xa6, 0x5a, 0xb5,
	0xd3, 0xa3, 0x26, 0x8e, 0x4f, 0x6c, 0x10, 0xe3, 0xae, 0x20, 0x4d, 0xb0, 0xa0, 0xcc, 0x06, 0x51,
	0x1f, 0xf7, 0x0b, 0x1a, 0x11, 0x2e, 0x70, 0xd4, 0xd3, 0x80, 0xcd, 0x3f, 0x4a, 0x30, 0xbf, 0x8f,
	0x13, 0x1c, 0x71, 0x74, 0x0b, 0x4a, 0x11, 0x8d, 0xfd, 0x80, 0xf4, 0x18, 0xa7, 0xc2, 0x75, 0x36,
	0xe6, 0xb6, 0x4a, 0xd7, 0xd6, 0x1a, 0x26, 0x40, 0x99, 0x66, 0xc3, 0xa4, 0xd9, 0xb8, 0xc9, 0x68,
	0xdc, 0x2a, 0x3e, 0x7f, 0x55, 0x9f, 0xf9, 0xfd, 0xdd, 0xd3, 0x2b, 0x8e, 0x07, 0x11, 0x8d, 0x77,
	0x35, 0x0f, 0x1d, 0x02, 0x8a, 0xf0, 0xc0, 0xca, 0xf8, 0x3d, 0x92, 0x50, 0x16, 0xb8, 0xb3, 0x1b,
	0x8e, 0x52, 0xd3, 0xf1, 0x34, 0x6c, 0x3c, 0x8d, 0x5d, 0x13, 0x6f, 0xab, 0x22, 0xd5, 0x1e, 0xbf,
	0xae, 0x3b, 0x5a, 0x71, 0x29, 0xc2, 0x03, 0xa3, 0xb8, 0xaf, 0x14, 0xd0, 0x5d, 0xa8, 0xf4, 0x99,
	0xa0, 0x71, 0xd7, 0x4a, 0xce, 0x4d, 0x29, 0x59, 0xd6, 0x74, 0x23, 0xf7, 0x01, 0xcc, 0xff, 0x9a,
	0xb2, 0x24, 0x8d, 0xdc, 0x73, 0x1b, 0xce, 0x56, 0xb1, 0x55, 0x7d, 0xf9, 0xec, 0x2a, 0x98, 0x5c,
	0x77, 0x49, 0xc7, 0x33, 0x5e, 0xf4, 0x11, 0x14, 0xc5, 0x71, 0x42, 0xf8, 0x31, 0x0b, 0x03, 0xf7,
	0xfc, 0x44, 0x68, 0x0e, 0x40, 0xd7, 0xa1, 0xda, 0x27, 0x82, 0xf9, 0x39, 0x65, 0x7e, 0x22, 0xa5,
	0x22, 0x51, 0xf7, 0x33, 0xda, 0x1e, 0xac, 0xc9, 0xd2, 0xeb, 0x9e, 0x0b, 0xb3, 0xda, 0xa9, 0x3c,
	0xdc, 0x85, 0x89, 0x0a, 0x97, 0x22, 0x1a, 0xef, 0x69, 0xbc, 0xa9, 0x93, 0x27, 0xd1, 0xa8, 0x05,
	0x17, 0x7b, 0x09, 0xeb, 0x31, 0x8e, 0x43, 0xbf, 0x83, 0xe3, 0x0e, 0x09, 0x8d, 0x4c, 0x61, 0xa2,
	0xcc, 0x05, 0x0b, 0xbe, 0xa9, 0xb0, 0x5a, 0xe3, 0x0e, 0xac, 0x8c, 0x6b, 0x04, 0x84, 0x0b, 0xb7,
	0xa8, 0x24, 0xdc, 0x97, 0xcf, 0xae, 0xae, 0x18, 0x89, 0x9d, 0x20, 0x48, 0x08, 0xe7, 0x07, 0x22,
	0xa1, 0x71, 0xd7, 0x43, 0xa3, 0x62, 0xbb, 0x84, 0x0b, 0xf4, 0x33, 0xac, 0x92, 0x41, 0x8f, 0x04,
	0x54, 0x90, 0xc0, 0x1f, 0x3d, 0x40, 0x98, 0xf2, 0x00, 0x2f, 0x66, 0x42, 0x87, 0xc3, 0x27, 0xf9,
	0x25, 0x5c, 0xc8, 0x77, 0xc8, 0x0b, 0x5f, 0x9a, 0x98, 0x2f, 0xca, 0xa0, 0x79, 0xf5, 0xbf, 0x83,
	0x5c, 0xd9, 0x1f, 0xbe, 0x02, 0xe5, 0x29, 0xae, 0x40, 0x1e, 0xc3, 0xdd, 0xfc, 0x2e, 0x6c, 0xc1,
	0x52, 0x3b, 0x4d, 0x62, 0x99, 0x37, 0xf1, 0x4d, 0xbb, 0x55, 0x36, 0x9c, 0xad, 0x82, 0x57, 0x95,
	0xf6, 0x43, 0x26, 0xc8, 0xb7, 0xba, 0xcd, 0x76, 0xe0, 0xb2, 0x42, 0x66, 0x75, 0xcf, 0xee, 0x4f,
	0x42, 0x24, 0xdb, 0xad, 0x2a, 0xda, 0xba, 0x04, 0xed, 0x1b, 0x8c, 0xbd, 0x1f, 0x1a, 0x81, 0xde,
	0x87, 0x6a, 0xbe, 0x99, 0xec, 0x2f, 0x77, 0x51, 0x71, 0xca, 0x76, 0xab, 0x43, 0x22, 0x18, 0xba,
	0x01, 0xcb, 0x43, 0x29, 0x9a, 0xde, 0x58, 0x9a, 0x58, 0xab, 0xc5, 0xfc, 0x56, 0xeb, 0xbe, 0x90,
	0x85, 0x8a, 0x48, 0xd2, 0x25, 0x71, 0xe7, 0x64, 0xa4, 0x50, 0x0f, 0xa6, 0x2a, 0x94, 0x95, 0x18,
	0x2a, 0x54, 0x1b, 0xdc, 0x5c, 0x59, 0xe0, 0x30, 0x3c, 0xf1, 0x69, 0x2c, 0x48, 0xd2, 0xc7, 0xa1,
	0xfb, 0xc3, 0x94, 0x6d, 0x72, 0x29, 0x53, 0xba, 0x2f, 0x85, 0xf6, 0x8c, 0x0e, 0xfa, 0x1a, 0x56,
	0xf2, 0x3d, 0x78, 0xda, 0x8e, 0xa8, 0x10, 0x24, 0xe1, 0xee, 0x8f, 0x1b, 0x73, 0xa7, 0x76, 0x75,
	0x1e, 0xf0, 0x41, 0x46, 0x42, 0x9f, 0xc1, 0x6a, 0xc8, 0x1e, 0xe6, 0xed, 0xe6, 0x1f, 0xa5, 0x71,
	0x47, 0x46, 0xc3, 0xdd, 0x9f, 0xa4, 0x9e, 0x77, 0x31, 0x64, 0x0f, 0xb3, 0x16, 0xfb, 0xca, 0x3a,
	0xd1, 0xe7, 0xb0, 0xd0, 0x27, 0x5c, 0x76, 0xaf, 0xeb, 0xab, 0xbc, 0x2e, 0x35, 0x46, 0x5e, 0x9a,
	0xc6, 0xa1, 0xf6, 0xaa, 0x8a, 0xa9, 0x84, 0x66, 0x3c, 0xcb, 0xb8, 0xb1, 0xfa, 0xf8, 0x49, 0x7d,
	0xe6, 0xef, 0x27, 0x75, 0xe7, 0xb7, 0x77, 0x4f, 0xaf, 0x80, 0x7c, 0x58, 0xf4, 0xe8, 0xde, 0x1c,
	0xc0, 0x82, 0xe1, 0xa1, 0x3a, 0x94, 0x22, 0x16, 0xa4, 0x21, 0xf1, 0x71, 0x10, 0x24, 0xae, 0x23,
	0x4f, 0xd6, 0x03, 0x6d, 0x92, 0x79, 0x0d, 0x01, 0x62, 0x1c, 0x11, 0x35, 0x98, 0x33, 0xc0, 0x3d,
	0x1c, 0x11, 0xf4, 0x7f, 0x28, 0x77, 0x12, 0x82, 0x05, 0x4b, 0xb4, 0xc4, 0x9c, 0x42, 0x94, 0x8c,
	0x4d, 0x6a, 0xdc, 0x28, 0xd8, 0x40, 0x36, 0xff, 0x71, 0xa0, 0xa4, 0xca, 0xec, 0x11, 0x9e, 0x86,
	0x42, 0x92, 0xf5, 0xf1, 0x1d, 0x13, 0xda, 0x3d, 0x16, 0x6a, 0xff, 0x73, 0x5e, 0x49, 0xd9, 0x6e,
	0x2b, 0x13, 0xfa, 0x02, 0x2e, 0x08, 0x26, 0x70, 0xe8, 0x73, 0x81, 0x7f, 0x51, 0xe3, 0x80, 0x3d,
	0x24, 0x89, 0x0e, 0x64, 0xa4, 0x07, 0xf7, 0x62, 0xe1, 0x2d, 0x2b, 0xe8, 0x81, 0x46, 0xee, 0x4b,
	0x60, 0xce, 0x37, 0x65, 0x31, 0xfc, 0xb9, 0x53, 0xf8, 0xa6, 0x38, 0x9a, 0xdf, 0x82, 0xc5, 0xfe,
	0xb6, 0x69, 0xb2, 0x44, 0x45, 0xad, 0x9e, 0x80, 0xd2, 0xb5, 0x75, 0xdb, 0xbf, 0xe6, 0x28, 0x86,
	0xf2, 0xf2, 0x2a, 0xfd, 0xed, 0xa1, 0xe5, 0xe6, 0xab, 0x05, 0x28, 0xd8, 0x6b, 0x88, 0xaa, 0x30,
	0x4b, 0x03, 0x93, 0xe9, 0x2c, 0x0d, 0xd0, 0xc7, 0x50, 0x88, 0x08, 0xe7, 0xb8, 0x4b, 0xb8, 0x3b,
	0xab, 0x6e, 0xc6, 0xca, 0x7f, 0x9a, 0x77, 0x27, 0x3e, 0xf1, 0x32, 0x14, 0xba, 0x0e, 0xf3, 0x5c,
	0x60, 0x91, 0x72, 0x95, 0x45, 0xf5, 0xda, 0xe5, 0xb1, 0x48, 0xec, 0x56, 0x07, 0x0a, 0xe4, 0x19,
	0x30, 0x3a, 0x00, 0x74, 0x44, 0x63, 0x1c, 0x4e, 0x4e, 0x66, 0xb4, 0xaf, 0x86, 0xa2, 0x1f, 0xbe,
	0x8d, 0x4b, 0x4a, 0x60, 0xf8, 0x04, 0x77, 0xa0, 0xa4, 0x2f, 0x87, 0x2f, 0xbf, 0x15, 0xd4, 0x93,
	0x27, 0xd5, 0xc6, 0x13, 0xb8, 0x6f, 0x3f, 0x24, 0x5a, 0xe7, 0x1e, 0xbd, 0xae, 0x3b, 0x1e, 0x68,
	0x92, 0x34, 0xa3, 0x3b, 0xb0, 0x64, 0xe7, 0x0b, 0x89, 0x03, 0xad, 0x33, 0x7f, 0x46, 0x9d, 0xaa,
	0x61, 0xde, 0x8a, 0x03, 0xa5, 0xb5, 0x07, 0x15, 0x7d, 0xda, 0x76, 0xd6, 0x2c, 0x4c, 0x31, 0x6b,
	0xca, 0x8a, 0x6a, 0x87, 0xcc, 0x37, 0xb0, 0x6c, 0x1e, 0x20, 0x2e, 0x70, 0x62, 0xf2, 0x2b, 0x9c,
	0x31, 0xae, 0x45, 0x4d, 0x3d, 0x90, 0x4c, 0x15, 0xd8, 0x6d, 0x30, 0xa6, 0x3c, 0xc7, 0xe2, 0x19,
	0xb5, 0xcc, 0x87, 0x8c, 0x4d, 0xd1, 0x1b, 0x19, 0x4c, 0x79, 0x68, 0x70, 0x46, 0x39, 0x94, 0x0f,
	0xa8, 0x2c, 0xba, 0x07, 0xb0, 0x96, 0x6b, 0xc6, 0x64, 0x20, 0x4c, 0x8f, 0x28, 0xe1, 0xd2, 0x19,
	0x85, 0xf3, 0x49, 0x7a, 0x8f, 0x0c, 0x84, 0x6a, 0x12, 0x25, 0xbe, 0x2e, 0x1b, 0x5c, 0xe0, 0x00,
	0x0b, 0xec, 0x96, 0xd5, 0x74, 0xc8, 0xd6, 0x68, 0x05, 0xce, 0x0b, 0x2a, 0x42, 0xa2, 0xde, 0xb9,
	0xa2, 0xa7, 0x17, 0xc8, 0x85, 0x05, 0x9e, 0x46, 0x11, 0x4e, 0x4e, 0xd4, 0x43, 0x56, 0xf4, 0xec,
	0x12, 0x7d, 0x0a, 0x05, 0xfd, 0xe6, 0x91, 0x44, 0xbd, 0x57, 0xa7, 0x4d, 0xe2, 0x0c, 0x89, 0xfe,
	0x07, 0xc5, 0xec, 0xbd, 0x55, 0xaf, 0x57, 0xc1, 0xcb, 0x0d, 0xca, 0x6b, 0x23, 0x77, 0x97, 0x8d,
	0xd7, 0x1a, 0xd0, 0x7b, 0x50, 0x39, 0xc2, 0x34, 0x24, 0x81, 0x9f, 0x10, 0xcc, 0x59, 0xec, 0x22,
	0x15, 0x51, 0x59, 0x1b, 0x3d, 0x65, 0x6b, 0xdd, 0x7c, 0xfe, 0xa6, 0xe6, 0xbc, 0x78, 0x53, 0x73,
	0xfe, 0x7a, 0x53, 0x73, 0x1e, 0xbd, 0xad, 0xcd, 0xbc, 0x78, 0x5b, 0x9b, 0xf9, 0xf3, 0x6d, 0x6d,
	0xe6, 0xfb, 0x0f, 0xbb, 0x54, 0x1c, 0xa7, 0xed, 0x46, 0x87, 0x45, 0x4d, 0x7d, 0xc5, 0xae, 0x86,
	0xb8, 0xcd, 0xcd, 0xef, 0xe6, 0x40, 0x7d, 0xf0, 0x8b, 0x93, 0x1e, 0xe1, 0xed, 0x79, 0x55, 0xd9,
	0x4f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x7e, 0xcf, 0x87, 0x66, 0x0c, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MinDeposit) != len(that1.MinDeposit) {
		return false
	}
	for i := range this.MinDeposit {
		if !this.MinDeposit[i].Equal(&that1.MinDeposit[i]) {
			return false
		}
	}
	if this.MaxDepositPeriod != that1.MaxDepositPeriod {
		return false
	}
	if this.VotingPeriod != that1.VotingPeriod {
		return false
	}
	if this.Quorum != that1.Quorum {
		return false
	}
	if this.Threshold != that1.Threshold {
		return false
	}
	if this.VetoThreshold != that1.VetoThreshold {
		return false
	}
	if this.MinInitialDepositRatio != that1.MinInitialDepositRatio {
		return false
	}
	if this.ProposalCancelRatio != that1.ProposalCancelRatio {
		return false
	}
	if this.ProposalCancelDest != that1.ProposalCancelDest {
		return false
	}
	if this.ExpeditedVotingPeriod != that1.ExpeditedVotingPeriod {
		return false
	}
	if this.ExpeditedThreshold != that1.ExpeditedThreshold {
		return false
	}
	if len(this.ExpeditedMinDeposit) != len(that1.ExpeditedMinDeposit) {
		return false
	}
	for i := range this.ExpeditedMinDeposit {
		if !this.ExpeditedMinDeposit[i].Equal(&that1.ExpeditedMinDeposit[i]) {
			return false
		}
	}
	if this.BurnVoteQuorum != that1.BurnVoteQuorum {
		return false
	}
	if this.BurnProposalDepositPrevote != that1.BurnProposalDepositPrevote {
		return false
	}
	if this.BurnVoteVeto != that1.BurnVoteVeto {
		return false
	}
	if this.MinDepositRatio != that1.MinDepositRatio {
		return false
	}
	if len(this.EmergencyMinDeposit) != len(that1.EmergencyMinDeposit) {
		return false
	}
	for i := range this.EmergencyMinDeposit {
		if !this.EmergencyMinDeposit[i].Equal(&that1.EmergencyMinDeposit[i]) {
			return false
		}
	}
	if this.EmergencyTallyInterval != that1.EmergencyTallyInterval {
		return false
	}
	if len(this.EmergencySubmitters) != len(that1.EmergencySubmitters) {
		return false
	}
	for i := range this.EmergencySubmitters {
		if this.EmergencySubmitters[i] != that1.EmergencySubmitters[i] {
			return false
		}
	}
	if len(this.LowThresholdFunctions) != len(that1.LowThresholdFunctions) {
		return false
	}
	for i := range this.LowThresholdFunctions {
		if this.LowThresholdFunctions[i] != that1.LowThresholdFunctions[i] {
			return false
		}
	}
	if !this.Vesting.Equal(that1.Vesting) {
		return false
	}
	return true
}
func (this *Vesting) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Vesting)
	if !ok {
		that2, ok := that.(Vesting)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ModuleAddr != that1.ModuleAddr {
		return false
	}
	if this.ModuleName != that1.ModuleName {
		return false
	}
	if this.CreatorAddr != that1.CreatorAddr {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vesting != nil {
		{
			size, err := m.Vesting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	if len(m.LowThresholdFunctions) > 0 {
		for iNdEx := len(m.LowThresholdFunctions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LowThresholdFunctions[iNdEx])
			copy(dAtA[i:], m.LowThresholdFunctions[iNdEx])
			i = encodeVarintGov(dAtA, i, uint64(len(m.LowThresholdFunctions[iNdEx])))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.EmergencySubmitters) > 0 {
		for iNdEx := len(m.EmergencySubmitters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EmergencySubmitters[iNdEx])
			copy(dAtA[i:], m.EmergencySubmitters[iNdEx])
			i = encodeVarintGov(dAtA, i, uint64(len(m.EmergencySubmitters[iNdEx])))
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xea
		}
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.EmergencyTallyInterval, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.EmergencyTallyInterval):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGov(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5
	i--
	dAtA[i] = 0xe2
	if len(m.EmergencyMinDeposit) > 0 {
		for iNdEx := len(m.EmergencyMinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmergencyMinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5
			i--
			dAtA[i] = 0xda
		}
	}
	if len(m.MinDepositRatio) > 0 {
		i -= len(m.MinDepositRatio)
		copy(dAtA[i:], m.MinDepositRatio)
		i = encodeVarintGov(dAtA, i, uint64(len(m.MinDepositRatio)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.BurnVoteVeto {
		i--
		if m.BurnVoteVeto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.BurnProposalDepositPrevote {
		i--
		if m.BurnProposalDepositPrevote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.BurnVoteQuorum {
		i--
		if m.BurnVoteQuorum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.ExpeditedMinDeposit) > 0 {
		for iNdEx := len(m.ExpeditedMinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpeditedMinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ExpeditedThreshold) > 0 {
		i -= len(m.ExpeditedThreshold)
		copy(dAtA[i:], m.ExpeditedThreshold)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ExpeditedThreshold)))
		i--
		dAtA[i] = 0x5a
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ExpeditedVotingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ExpeditedVotingPeriod):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGov(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x52
	if len(m.ProposalCancelDest) > 0 {
		i -= len(m.ProposalCancelDest)
		copy(dAtA[i:], m.ProposalCancelDest)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ProposalCancelDest)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ProposalCancelRatio) > 0 {
		i -= len(m.ProposalCancelRatio)
		copy(dAtA[i:], m.ProposalCancelRatio)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ProposalCancelRatio)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MinInitialDepositRatio) > 0 {
		i -= len(m.MinInitialDepositRatio)
		copy(dAtA[i:], m.MinInitialDepositRatio)
		i = encodeVarintGov(dAtA, i, uint64(len(m.MinInitialDepositRatio)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VetoThreshold) > 0 {
		i -= len(m.VetoThreshold)
		copy(dAtA[i:], m.VetoThreshold)
		i = encodeVarintGov(dAtA, i, uint64(len(m.VetoThreshold)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Quorum) > 0 {
		i -= len(m.Quorum)
		copy(dAtA[i:], m.Quorum)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Quorum)))
		i--
		dAtA[i] = 0x22
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.VotingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VotingPeriod):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGov(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.MaxDepositPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxDepositPeriod):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGov(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vesting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vesting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vesting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreatorAddr) > 0 {
		i -= len(m.CreatorAddr)
		copy(dAtA[i:], m.CreatorAddr)
		i = encodeVarintGov(dAtA, i, uint64(len(m.CreatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleAddr) > 0 {
		i -= len(m.ModuleAddr)
		copy(dAtA[i:], m.ModuleAddr)
		i = encodeVarintGov(dAtA, i, uint64(len(m.ModuleAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TallyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TallyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TallyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V1TallyResult != nil {
		{
			size, err := m.V1TallyResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGov(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalVestingPower) > 0 {
		i -= len(m.TotalVestingPower)
		copy(dAtA[i:], m.TotalVestingPower)
		i = encodeVarintGov(dAtA, i, uint64(len(m.TotalVestingPower)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalStakingPower) > 0 {
		i -= len(m.TotalStakingPower)
		copy(dAtA[i:], m.TotalStakingPower)
		i = encodeVarintGov(dAtA, i, uint64(len(m.TotalStakingPower)))
		i--
		dAtA[i] = 0x12
	}
	if m.TallyHeight != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.TallyHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailedReason) > 0 {
		i -= len(m.FailedReason)
		copy(dAtA[i:], m.FailedReason)
		i = encodeVarintGov(dAtA, i, uint64(len(m.FailedReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Emergency {
		i--
		if m.Emergency {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Expedited {
		i--
		if m.Expedited {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x62
	}
	if m.EmergencyNextTallyTime != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EmergencyNextTallyTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EmergencyNextTallyTime):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintGov(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x5a
	}
	if m.EmergencyStartTime != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EmergencyStartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EmergencyStartTime):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintGov(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x52
	}
	if m.VotingEndTime != nil {
		n9, err9 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.VotingEndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.VotingEndTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintGov(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x4a
	}
	if m.VotingStartTime != nil {
		n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.VotingStartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.VotingStartTime):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintGov(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TotalDeposit) > 0 {
		for iNdEx := len(m.TotalDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DepositEndTime != nil {
		n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.DepositEndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DepositEndTime):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintGov(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x32
	}
	if m.SubmitTime != nil {
		n12, err12 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.SubmitTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SubmitTime):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintGov(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.FinalTallyResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Status != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.MaxDepositPeriod)
	n += 1 + l + sovGov(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.VotingPeriod)
	n += 1 + l + sovGov(uint64(l))
	l = len(m.Quorum)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.VetoThreshold)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.MinInitialDepositRatio)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.ProposalCancelRatio)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.ProposalCancelDest)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ExpeditedVotingPeriod)
	n += 1 + l + sovGov(uint64(l))
	l = len(m.ExpeditedThreshold)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if len(m.ExpeditedMinDeposit) > 0 {
		for _, e := range m.ExpeditedMinDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	if m.BurnVoteQuorum {
		n += 2
	}
	if m.BurnProposalDepositPrevote {
		n += 2
	}
	if m.BurnVoteVeto {
		n += 2
	}
	l = len(m.MinDepositRatio)
	if l > 0 {
		n += 2 + l + sovGov(uint64(l))
	}
	if len(m.EmergencyMinDeposit) > 0 {
		for _, e := range m.EmergencyMinDeposit {
			l = e.Size()
			n += 2 + l + sovGov(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.EmergencyTallyInterval)
	n += 2 + l + sovGov(uint64(l))
	if len(m.EmergencySubmitters) > 0 {
		for _, s := range m.EmergencySubmitters {
			l = len(s)
			n += 2 + l + sovGov(uint64(l))
		}
	}
	if len(m.LowThresholdFunctions) > 0 {
		for _, s := range m.LowThresholdFunctions {
			l = len(s)
			n += 2 + l + sovGov(uint64(l))
		}
	}
	if m.Vesting != nil {
		l = m.Vesting.Size()
		n += 2 + l + sovGov(uint64(l))
	}
	return n
}

func (m *Vesting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleAddr)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *TallyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TallyHeight != 0 {
		n += 1 + sovGov(uint64(m.TallyHeight))
	}
	l = len(m.TotalStakingPower)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.TotalVestingPower)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.V1TallyResult != nil {
		l = m.V1TallyResult.Size()
		n += 1 + l + sovGov(uint64(l))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGov(uint64(m.Id))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovGov(uint64(m.Status))
	}
	l = m.FinalTallyResult.Size()
	n += 1 + l + sovGov(uint64(l))
	if m.SubmitTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.SubmitTime)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.DepositEndTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.DepositEndTime)
		n += 1 + l + sovGov(uint64(l))
	}
	if len(m.TotalDeposit) > 0 {
		for _, e := range m.TotalDeposit {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	if m.VotingStartTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.VotingStartTime)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.VotingEndTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.VotingEndTime)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.EmergencyStartTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EmergencyStartTime)
		n += 1 + l + sovGov(uint64(l))
	}
	if m.EmergencyNextTallyTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EmergencyNextTallyTime)
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.Expedited {
		n += 3
	}
	if m.Emergency {
		n += 3
	}
	l = len(m.FailedReason)
	if l > 0 {
		n += 2 + l + sovGov(uint64(l))
	}
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepositPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.MaxDepositPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quorum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetoThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VetoThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDepositRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinInitialDepositRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalCancelRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalCancelRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalCancelDest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalCancelDest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpeditedVotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ExpeditedVotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpeditedThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpeditedThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpeditedMinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpeditedMinDeposit = append(m.ExpeditedMinDeposit, types.Coin{})
			if err := m.ExpeditedMinDeposit[len(m.ExpeditedMinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnVoteQuorum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnVoteQuorum = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnProposalDepositPrevote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnProposalDepositPrevote = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnVoteVeto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnVoteVeto = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDepositRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencyMinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmergencyMinDeposit = append(m.EmergencyMinDeposit, types.Coin{})
			if err := m.EmergencyMinDeposit[len(m.EmergencyMinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencyTallyInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.EmergencyTallyInterval, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencySubmitters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmergencySubmitters = append(m.EmergencySubmitters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowThresholdFunctions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowThresholdFunctions = append(m.LowThresholdFunctions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vesting == nil {
				m.Vesting = &Vesting{}
			}
			if err := m.Vesting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vesting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vesting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vesting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TallyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TallyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TallyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TallyHeight", wireType)
			}
			m.TallyHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TallyHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStakingPower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVestingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalVestingPower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V1TallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.V1TallyResult == nil {
				m.V1TallyResult = &v1.TallyResult{}
			}
			if err := m.V1TallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &types1.Any{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v1.ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalTallyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FinalTallyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmitTime == nil {
				m.SubmitTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositEndTime == nil {
				m.DepositEndTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.DepositEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDeposit = append(m.TotalDeposit, types.Coin{})
			if err := m.TotalDeposit[len(m.TotalDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotingStartTime == nil {
				m.VotingStartTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.VotingStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotingEndTime == nil {
				m.VotingEndTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencyStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmergencyStartTime == nil {
				m.EmergencyStartTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EmergencyStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmergencyNextTallyTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmergencyNextTallyTime == nil {
				m.EmergencyNextTallyTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EmergencyNextTallyTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expedited", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expedited = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emergency", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Emergency = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
