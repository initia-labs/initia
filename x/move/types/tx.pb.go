// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: initia/move/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgPublish is the message to store compiled Move module
type MsgPublish struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// CodeBytes is raw move module bytes code
	CodeBytes [][]byte `protobuf:"bytes,2,rep,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// UpgradePolicy defines upgrade rules which will be applied
	// at next publish message.
	// Upgrades in the direction of enhancing security are permitted.
	// `ARBITRARY` => `COMPATIBLE`
	// `ARBITRARY` => `IMMUTABLE`
	// `COMPATIBLE` => `IMMUTABLE`
	// but reverse ways are not allowed (ignored).
	UpgradePolicy UpgradePolicy `protobuf:"varint,3,opt,name=upgrade_policy,json=upgradePolicy,proto3,enum=initia.move.v1.UpgradePolicy" json:"upgrade_policy,omitempty"`
}

func (m *MsgPublish) Reset()         { *m = MsgPublish{} }
func (m *MsgPublish) String() string { return proto.CompactTextString(m) }
func (*MsgPublish) ProtoMessage()    {}
func (*MsgPublish) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{0}
}
func (m *MsgPublish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublish.Merge(m, src)
}
func (m *MsgPublish) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublish) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublish.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublish proto.InternalMessageInfo

// MsgPublishResponse returns store result data.
type MsgPublishResponse struct {
}

func (m *MsgPublishResponse) Reset()         { *m = MsgPublishResponse{} }
func (m *MsgPublishResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishResponse) ProtoMessage()    {}
func (*MsgPublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{1}
}
func (m *MsgPublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishResponse.Merge(m, src)
}
func (m *MsgPublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishResponse proto.InternalMessageInfo

// MsgExecute is the message to execute the given module function
type MsgExecute struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// ModuleAddr is the address of the module deployer
	ModuleAddress string `protobuf:"bytes,2,opt,name=module_address,json=moduleAddress,proto3" json:"module_address,omitempty"`
	// ModuleName is the name of module to execute
	ModuleName string `protobuf:"bytes,3,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// FunctionName is the name of a function to execute
	FunctionName string `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,5,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute
	// - number: little endian
	// - string: base64 bytes
	Args [][]byte `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgExecute) Reset()         { *m = MsgExecute{} }
func (m *MsgExecute) String() string { return proto.CompactTextString(m) }
func (*MsgExecute) ProtoMessage()    {}
func (*MsgExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{2}
}
func (m *MsgExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecute.Merge(m, src)
}
func (m *MsgExecute) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecute proto.InternalMessageInfo

// MsgExecuteResponse returns execution result data.
type MsgExecuteResponse struct {
}

func (m *MsgExecuteResponse) Reset()         { *m = MsgExecuteResponse{} }
func (m *MsgExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteResponse) ProtoMessage()    {}
func (*MsgExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{3}
}
func (m *MsgExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteResponse.Merge(m, src)
}
func (m *MsgExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteResponse proto.InternalMessageInfo

// MsgExecuteJSON is the message to execute the given module function
type MsgExecuteJSON struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// ModuleAddr is the address of the module deployer
	ModuleAddress string `protobuf:"bytes,2,opt,name=module_address,json=moduleAddress,proto3" json:"module_address,omitempty"`
	// ModuleName is the name of module to execute
	ModuleName string `protobuf:"bytes,3,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// FunctionName is the name of a function to execute
	FunctionName string `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,5,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute in json stringify format
	Args []string `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgExecuteJSON) Reset()         { *m = MsgExecuteJSON{} }
func (m *MsgExecuteJSON) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteJSON) ProtoMessage()    {}
func (*MsgExecuteJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{4}
}
func (m *MsgExecuteJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteJSON.Merge(m, src)
}
func (m *MsgExecuteJSON) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteJSON.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteJSON proto.InternalMessageInfo

// MsgExecuteJSONResponse returns execution result data.
type MsgExecuteJSONResponse struct {
}

func (m *MsgExecuteJSONResponse) Reset()         { *m = MsgExecuteJSONResponse{} }
func (m *MsgExecuteJSONResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteJSONResponse) ProtoMessage()    {}
func (*MsgExecuteJSONResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{5}
}
func (m *MsgExecuteJSONResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteJSONResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteJSONResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteJSONResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteJSONResponse.Merge(m, src)
}
func (m *MsgExecuteJSONResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteJSONResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteJSONResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteJSONResponse proto.InternalMessageInfo

// MsgScript is the message to execute script code with sender as signer
type MsgScript struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// CodeBytes is the script bytes code to execute
	CodeBytes []byte `protobuf:"bytes,2,opt,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,3,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute
	// - number: little endian
	// - string: base64 bytes
	Args [][]byte `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgScript) Reset()         { *m = MsgScript{} }
func (m *MsgScript) String() string { return proto.CompactTextString(m) }
func (*MsgScript) ProtoMessage()    {}
func (*MsgScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{6}
}
func (m *MsgScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgScript.Merge(m, src)
}
func (m *MsgScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgScript proto.InternalMessageInfo

// MsgScriptResponse returns execution result data.
type MsgScriptResponse struct {
}

func (m *MsgScriptResponse) Reset()         { *m = MsgScriptResponse{} }
func (m *MsgScriptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgScriptResponse) ProtoMessage()    {}
func (*MsgScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{7}
}
func (m *MsgScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgScriptResponse.Merge(m, src)
}
func (m *MsgScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgScriptResponse proto.InternalMessageInfo

// MsgScriptJSON is the message to execute script code with sender as signer
type MsgScriptJSON struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// CodeBytes is the script bytes code to execute
	CodeBytes []byte `protobuf:"bytes,2,opt,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,3,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute in json stringify format
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgScriptJSON) Reset()         { *m = MsgScriptJSON{} }
func (m *MsgScriptJSON) String() string { return proto.CompactTextString(m) }
func (*MsgScriptJSON) ProtoMessage()    {}
func (*MsgScriptJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{8}
}
func (m *MsgScriptJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgScriptJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgScriptJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgScriptJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgScriptJSON.Merge(m, src)
}
func (m *MsgScriptJSON) XXX_Size() int {
	return m.Size()
}
func (m *MsgScriptJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgScriptJSON.DiscardUnknown(m)
}

var xxx_messageInfo_MsgScriptJSON proto.InternalMessageInfo

// MsgScriptJSONResponse returns execution result data.
type MsgScriptJSONResponse struct {
}

func (m *MsgScriptJSONResponse) Reset()         { *m = MsgScriptJSONResponse{} }
func (m *MsgScriptJSONResponse) String() string { return proto.CompactTextString(m) }
func (*MsgScriptJSONResponse) ProtoMessage()    {}
func (*MsgScriptJSONResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{9}
}
func (m *MsgScriptJSONResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgScriptJSONResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgScriptJSONResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgScriptJSONResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgScriptJSONResponse.Merge(m, src)
}
func (m *MsgScriptJSONResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgScriptJSONResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgScriptJSONResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgScriptJSONResponse proto.InternalMessageInfo

// MsgGovPublish is the message to store compiled Move module via gov proposal
type MsgGovPublish struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// CodeBytes is raw move module bytes code
	CodeBytes [][]byte `protobuf:"bytes,3,rep,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// UpgradePolicy defines upgrade rules which will be applied
	// at next publish message.
	// Upgrades in the direction of enhancing security are permitted.
	// `ARBITRARY` => `COMPATIBLE`
	// `ARBITRARY` => `IMMUTABLE`
	// `COMPATIBLE` => `IMMUTABLE`
	// but reverse ways are not allowed (ignored).
	UpgradePolicy UpgradePolicy `protobuf:"varint,4,opt,name=upgrade_policy,json=upgradePolicy,proto3,enum=initia.move.v1.UpgradePolicy" json:"upgrade_policy,omitempty"`
}

func (m *MsgGovPublish) Reset()         { *m = MsgGovPublish{} }
func (m *MsgGovPublish) String() string { return proto.CompactTextString(m) }
func (*MsgGovPublish) ProtoMessage()    {}
func (*MsgGovPublish) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{10}
}
func (m *MsgGovPublish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovPublish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovPublish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovPublish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovPublish.Merge(m, src)
}
func (m *MsgGovPublish) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovPublish) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovPublish.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovPublish proto.InternalMessageInfo

// MsgGovPublishResponse returns execution result data.
type MsgGovPublishResponse struct {
}

func (m *MsgGovPublishResponse) Reset()         { *m = MsgGovPublishResponse{} }
func (m *MsgGovPublishResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovPublishResponse) ProtoMessage()    {}
func (*MsgGovPublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{11}
}
func (m *MsgGovPublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovPublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovPublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovPublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovPublishResponse.Merge(m, src)
}
func (m *MsgGovPublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovPublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovPublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovPublishResponse proto.InternalMessageInfo

// MsgGovExecute is the message to execute the given module
// function via gov proposal
type MsgGovExecute struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// ModuleAddr is the address of the module deployer
	ModuleAddress string `protobuf:"bytes,3,opt,name=module_address,json=moduleAddress,proto3" json:"module_address,omitempty"`
	// ModuleName is the name of module to execute
	ModuleName string `protobuf:"bytes,4,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// FunctionName is the name of a function to execute
	FunctionName string `protobuf:"bytes,5,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,6,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute
	// - number: little endian
	// - string: base64 bytes
	Args [][]byte `protobuf:"bytes,7,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgGovExecute) Reset()         { *m = MsgGovExecute{} }
func (m *MsgGovExecute) String() string { return proto.CompactTextString(m) }
func (*MsgGovExecute) ProtoMessage()    {}
func (*MsgGovExecute) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{12}
}
func (m *MsgGovExecute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovExecute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovExecute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovExecute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovExecute.Merge(m, src)
}
func (m *MsgGovExecute) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovExecute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovExecute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovExecute proto.InternalMessageInfo

// MsgGovExecuteResponse returns execution result data.
type MsgGovExecuteResponse struct {
}

func (m *MsgGovExecuteResponse) Reset()         { *m = MsgGovExecuteResponse{} }
func (m *MsgGovExecuteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovExecuteResponse) ProtoMessage()    {}
func (*MsgGovExecuteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{13}
}
func (m *MsgGovExecuteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovExecuteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovExecuteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovExecuteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovExecuteResponse.Merge(m, src)
}
func (m *MsgGovExecuteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovExecuteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovExecuteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovExecuteResponse proto.InternalMessageInfo

// MsgGovExecuteJSON is the message to execute the given module
// function via gov proposal
type MsgGovExecuteJSON struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// ModuleAddr is the address of the module deployer
	ModuleAddress string `protobuf:"bytes,3,opt,name=module_address,json=moduleAddress,proto3" json:"module_address,omitempty"`
	// ModuleName is the name of module to execute
	ModuleName string `protobuf:"bytes,4,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// FunctionName is the name of a function to execute
	FunctionName string `protobuf:"bytes,5,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,6,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute in json stringify format
	Args []string `protobuf:"bytes,7,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgGovExecuteJSON) Reset()         { *m = MsgGovExecuteJSON{} }
func (m *MsgGovExecuteJSON) String() string { return proto.CompactTextString(m) }
func (*MsgGovExecuteJSON) ProtoMessage()    {}
func (*MsgGovExecuteJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{14}
}
func (m *MsgGovExecuteJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovExecuteJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovExecuteJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovExecuteJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovExecuteJSON.Merge(m, src)
}
func (m *MsgGovExecuteJSON) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovExecuteJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovExecuteJSON.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovExecuteJSON proto.InternalMessageInfo

// MsgGovExecuteJSONResponse returns execution result data.
type MsgGovExecuteJSONResponse struct {
}

func (m *MsgGovExecuteJSONResponse) Reset()         { *m = MsgGovExecuteJSONResponse{} }
func (m *MsgGovExecuteJSONResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovExecuteJSONResponse) ProtoMessage()    {}
func (*MsgGovExecuteJSONResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{15}
}
func (m *MsgGovExecuteJSONResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovExecuteJSONResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovExecuteJSONResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovExecuteJSONResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovExecuteJSONResponse.Merge(m, src)
}
func (m *MsgGovExecuteJSONResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovExecuteJSONResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovExecuteJSONResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovExecuteJSONResponse proto.InternalMessageInfo

// MsgGovScript is the message to execute script code with sender as signer via gov
type MsgGovScript struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// CodeBytes is the script bytes code to execute
	CodeBytes []byte `protobuf:"bytes,3,opt,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,4,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute
	// - number: little endian
	// - string: base64 bytes
	Args [][]byte `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgGovScript) Reset()         { *m = MsgGovScript{} }
func (m *MsgGovScript) String() string { return proto.CompactTextString(m) }
func (*MsgGovScript) ProtoMessage()    {}
func (*MsgGovScript) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{16}
}
func (m *MsgGovScript) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovScript) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovScript.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovScript) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovScript.Merge(m, src)
}
func (m *MsgGovScript) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovScript) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovScript.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovScript proto.InternalMessageInfo

// MsgGovScriptResponse returns execution result data.
type MsgGovScriptResponse struct {
}

func (m *MsgGovScriptResponse) Reset()         { *m = MsgGovScriptResponse{} }
func (m *MsgGovScriptResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovScriptResponse) ProtoMessage()    {}
func (*MsgGovScriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{17}
}
func (m *MsgGovScriptResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovScriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovScriptResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovScriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovScriptResponse.Merge(m, src)
}
func (m *MsgGovScriptResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovScriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovScriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovScriptResponse proto.InternalMessageInfo

// MsgGovScriptJSON is the message to execute script code with sender as signer via gov
type MsgGovScriptJSON struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// CodeBytes is the script bytes code to execute
	CodeBytes []byte `protobuf:"bytes,3,opt,name=code_bytes,json=codeBytes,proto3" json:"code_bytes,omitempty"`
	// TypeArgs is the type arguments of a function to execute
	// ex) "0x1::BasicCoin::Initia", "bool", "u8", "u64"
	TypeArgs []string `protobuf:"bytes,4,rep,name=type_args,json=typeArgs,proto3" json:"type_args,omitempty"`
	// Args is the arguments of a function to execute in json stringify format
	Args []string `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *MsgGovScriptJSON) Reset()         { *m = MsgGovScriptJSON{} }
func (m *MsgGovScriptJSON) String() string { return proto.CompactTextString(m) }
func (*MsgGovScriptJSON) ProtoMessage()    {}
func (*MsgGovScriptJSON) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{18}
}
func (m *MsgGovScriptJSON) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovScriptJSON) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovScriptJSON.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovScriptJSON) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovScriptJSON.Merge(m, src)
}
func (m *MsgGovScriptJSON) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovScriptJSON) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovScriptJSON.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovScriptJSON proto.InternalMessageInfo

// MsgGovScriptJSONResponse returns execution result data.
type MsgGovScriptJSONResponse struct {
}

func (m *MsgGovScriptJSONResponse) Reset()         { *m = MsgGovScriptJSONResponse{} }
func (m *MsgGovScriptJSONResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovScriptJSONResponse) ProtoMessage()    {}
func (*MsgGovScriptJSONResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{19}
}
func (m *MsgGovScriptJSONResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovScriptJSONResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovScriptJSONResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovScriptJSONResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovScriptJSONResponse.Merge(m, src)
}
func (m *MsgGovScriptJSONResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovScriptJSONResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovScriptJSONResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovScriptJSONResponse proto.InternalMessageInfo

// MsgWhitelist is a message to register a dex pair to
// whitelist of various features.
// - whitelist from coin register operation
// - allow counter party denom can be used as gas fee
// - register lp denom as staking denom
type MsgWhitelist struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Dex coin LP metadata address
	MetadataLP string `protobuf:"bytes,2,opt,name=metadata_lp,json=metadataLp,proto3" json:"metadata_lp,omitempty"`
	// RewardWeight is registered to distribution's Params
	RewardWeight cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=reward_weight,json=rewardWeight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward_weight"`
}

func (m *MsgWhitelist) Reset()         { *m = MsgWhitelist{} }
func (m *MsgWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelist) ProtoMessage()    {}
func (*MsgWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{20}
}
func (m *MsgWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelist.Merge(m, src)
}
func (m *MsgWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelist proto.InternalMessageInfo

// MsgWhitelistResponse returns result data.
type MsgWhitelistResponse struct {
}

func (m *MsgWhitelistResponse) Reset()         { *m = MsgWhitelistResponse{} }
func (m *MsgWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelistResponse) ProtoMessage()    {}
func (*MsgWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{21}
}
func (m *MsgWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelistResponse.Merge(m, src)
}
func (m *MsgWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelistResponse proto.InternalMessageInfo

// MsgDelist is a message to unregister a dex pair
// from the whitelist of various features.
type MsgDelist struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Dex coin LP metadata address
	MetadataLP string `protobuf:"bytes,2,opt,name=metadata_lp,json=metadataLp,proto3" json:"metadata_lp,omitempty"`
}

func (m *MsgDelist) Reset()         { *m = MsgDelist{} }
func (m *MsgDelist) String() string { return proto.CompactTextString(m) }
func (*MsgDelist) ProtoMessage()    {}
func (*MsgDelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{22}
}
func (m *MsgDelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelist.Merge(m, src)
}
func (m *MsgDelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelist proto.InternalMessageInfo

// MsgDelistResponse returns result data.
type MsgDelistResponse struct {
}

func (m *MsgDelistResponse) Reset()         { *m = MsgDelistResponse{} }
func (m *MsgDelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelistResponse) ProtoMessage()    {}
func (*MsgDelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{23}
}
func (m *MsgDelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelistResponse.Merge(m, src)
}
func (m *MsgDelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelistResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/staking parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{24}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fc2f2cef57f41a3, []int{25}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPublish)(nil), "initia.move.v1.MsgPublish")
	proto.RegisterType((*MsgPublishResponse)(nil), "initia.move.v1.MsgPublishResponse")
	proto.RegisterType((*MsgExecute)(nil), "initia.move.v1.MsgExecute")
	proto.RegisterType((*MsgExecuteResponse)(nil), "initia.move.v1.MsgExecuteResponse")
	proto.RegisterType((*MsgExecuteJSON)(nil), "initia.move.v1.MsgExecuteJSON")
	proto.RegisterType((*MsgExecuteJSONResponse)(nil), "initia.move.v1.MsgExecuteJSONResponse")
	proto.RegisterType((*MsgScript)(nil), "initia.move.v1.MsgScript")
	proto.RegisterType((*MsgScriptResponse)(nil), "initia.move.v1.MsgScriptResponse")
	proto.RegisterType((*MsgScriptJSON)(nil), "initia.move.v1.MsgScriptJSON")
	proto.RegisterType((*MsgScriptJSONResponse)(nil), "initia.move.v1.MsgScriptJSONResponse")
	proto.RegisterType((*MsgGovPublish)(nil), "initia.move.v1.MsgGovPublish")
	proto.RegisterType((*MsgGovPublishResponse)(nil), "initia.move.v1.MsgGovPublishResponse")
	proto.RegisterType((*MsgGovExecute)(nil), "initia.move.v1.MsgGovExecute")
	proto.RegisterType((*MsgGovExecuteResponse)(nil), "initia.move.v1.MsgGovExecuteResponse")
	proto.RegisterType((*MsgGovExecuteJSON)(nil), "initia.move.v1.MsgGovExecuteJSON")
	proto.RegisterType((*MsgGovExecuteJSONResponse)(nil), "initia.move.v1.MsgGovExecuteJSONResponse")
	proto.RegisterType((*MsgGovScript)(nil), "initia.move.v1.MsgGovScript")
	proto.RegisterType((*MsgGovScriptResponse)(nil), "initia.move.v1.MsgGovScriptResponse")
	proto.RegisterType((*MsgGovScriptJSON)(nil), "initia.move.v1.MsgGovScriptJSON")
	proto.RegisterType((*MsgGovScriptJSONResponse)(nil), "initia.move.v1.MsgGovScriptJSONResponse")
	proto.RegisterType((*MsgWhitelist)(nil), "initia.move.v1.MsgWhitelist")
	proto.RegisterType((*MsgWhitelistResponse)(nil), "initia.move.v1.MsgWhitelistResponse")
	proto.RegisterType((*MsgDelist)(nil), "initia.move.v1.MsgDelist")
	proto.RegisterType((*MsgDelistResponse)(nil), "initia.move.v1.MsgDelistResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "initia.move.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "initia.move.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("initia/move/v1/tx.proto", fileDescriptor_0fc2f2cef57f41a3) }

var fileDescriptor_0fc2f2cef57f41a3 = []byte{
	// 1159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x8e, 0x5b, 0xbf, 0xc4, 0x2e, 0xdd, 0xa6, 0x89, 0xb3, 0x21, 0x76, 0xe2, 0x34,
	0xd4, 0x8d, 0x54, 0x2f, 0x0d, 0x12, 0x12, 0xb9, 0xd5, 0x0a, 0x50, 0xaa, 0xa4, 0x8d, 0x36, 0x8a,
	0x8a, 0x40, 0xc2, 0xda, 0x78, 0x87, 0xf5, 0x0a, 0xaf, 0x77, 0xb5, 0xb3, 0x4e, 0x93, 0x1b, 0x42,
	0xe2, 0x02, 0x17, 0x6e, 0xfc, 0x0b, 0x5c, 0x2a, 0xe5, 0x00, 0xd7, 0x1e, 0x51, 0xc4, 0xa9, 0xe2,
	0x84, 0x38, 0x44, 0x90, 0x1c, 0x72, 0xe3, 0xc8, 0x0d, 0x09, 0xed, 0xcc, 0xec, 0xec, 0x4f, 0xdb,
	0xc8, 0x8a, 0x82, 0x04, 0x97, 0xc8, 0xf3, 0x7e, 0xf9, 0x7d, 0xdf, 0xbc, 0xf9, 0x66, 0x62, 0x98,
	0x33, 0x7a, 0x86, 0x6b, 0xa8, 0xb2, 0x69, 0x1d, 0x20, 0xf9, 0xe0, 0x81, 0xec, 0x1e, 0x36, 0x6c,
	0xc7, 0x72, 0x2d, 0xb1, 0x44, 0x1d, 0x0d, 0xcf, 0xd1, 0x38, 0x78, 0x20, 0xdd, 0x54, 0x4d, 0xa3,
	0x67, 0xc9, 0xe4, 0x2f, 0x0d, 0x91, 0xe6, 0xda, 0x16, 0x36, 0x2d, 0x2c, 0x9b, 0x58, 0xf7, 0x52,
	0x4d, 0xac, 0x33, 0xc7, 0x3c, 0x75, 0xb4, 0xc8, 0x4a, 0xa6, 0x0b, 0xe6, 0x9a, 0xd1, 0x2d, 0xdd,
	0xa2, 0x76, 0xef, 0x13, 0xb3, 0x4a, 0xf1, 0x2e, 0x8e, 0x6c, 0xc4, 0x32, 0x6a, 0x3f, 0x09, 0x00,
	0xdb, 0x58, 0xdf, 0xe9, 0xef, 0x77, 0x0d, 0xdc, 0x11, 0xdf, 0x84, 0x3c, 0x46, 0x3d, 0x0d, 0x39,
	0x65, 0x61, 0x49, 0xa8, 0x17, 0x9a, 0xe5, 0x9f, 0xbf, 0xbf, 0x3f, 0xc3, 0xbe, 0xe2, 0xa1, 0xa6,
	0x39, 0x08, 0xe3, 0x5d, 0xd7, 0x31, 0x7a, 0xba, 0xc2, 0xe2, 0xc4, 0x45, 0x80, 0xb6, 0xa5, 0xa1,
	0xd6, 0xfe, 0x91, 0x8b, 0x70, 0x39, 0xb3, 0x94, 0xad, 0x4f, 0x2b, 0x05, 0xcf, 0xd2, 0xf4, 0x0c,
	0xe2, 0x63, 0x28, 0xf5, 0x6d, 0xdd, 0x51, 0x35, 0xd4, 0xb2, 0xad, 0xae, 0xd1, 0x3e, 0x2a, 0x67,
	0x97, 0x84, 0x7a, 0x69, 0x7d, 0xb1, 0x11, 0x65, 0xa0, 0xb1, 0x47, 0xa3, 0x76, 0x48, 0x50, 0x33,
	0x77, 0x72, 0x5a, 0x15, 0x94, 0x62, 0x3f, 0x6c, 0xdc, 0xa8, 0x7e, 0x71, 0x71, 0xbc, 0xc6, 0xbe,
	0xf7, 0xab, 0x8b, 0xe3, 0xb5, 0x1b, 0x04, 0x50, 0xd0, 0x7d, 0x6d, 0x06, 0xc4, 0x60, 0xa5, 0x20,
	0x6c, 0x5b, 0x3d, 0x8c, 0x6a, 0x7f, 0x51, 0x88, 0xef, 0x1e, 0xa2, 0x76, 0xdf, 0x45, 0x63, 0x40,
	0x5c, 0x85, 0x92, 0x69, 0x69, 0xfd, 0x2e, 0x6a, 0xa9, 0xd4, 0x5f, 0xce, 0x78, 0x99, 0x4a, 0x91,
	0x5a, 0x59, 0x92, 0x58, 0x85, 0x29, 0x16, 0xd6, 0x53, 0x4d, 0x44, 0x70, 0x16, 0x14, 0xa0, 0xa6,
	0x27, 0xaa, 0x89, 0xc4, 0x15, 0x28, 0x7e, 0xda, 0xef, 0xb5, 0x5d, 0xc3, 0xea, 0xd1, 0x90, 0x1c,
	0x09, 0x99, 0xf6, 0x8d, 0x24, 0x68, 0x01, 0x0a, 0xde, 0xfe, 0xb4, 0x54, 0x47, 0xc7, 0xe5, 0xc9,
	0xa5, 0x6c, 0xbd, 0xa0, 0x5c, 0xf7, 0x0c, 0x0f, 0x1d, 0x1d, 0x8b, 0x22, 0xe4, 0x88, 0x3d, 0x4f,
	0x68, 0x26, 0x9f, 0x07, 0xb3, 0xc2, 0x00, 0x33, 0x56, 0xd8, 0x8a, 0xb3, 0xf2, 0x65, 0x06, 0x4a,
	0x81, 0xf9, 0xf1, 0xee, 0xd3, 0x27, 0xff, 0x19, 0x66, 0x0a, 0x8c, 0x99, 0x95, 0x18, 0x33, 0xb7,
	0x62, 0xcc, 0x78, 0xa0, 0x6b, 0x65, 0x98, 0x8d, 0x5a, 0x38, 0x43, 0x2f, 0x04, 0x28, 0x6c, 0x63,
	0x7d, 0xb7, 0xed, 0x18, 0xb6, 0x7b, 0x09, 0x27, 0x43, 0x88, 0x9e, 0x8c, 0x08, 0x9c, 0xec, 0x00,
	0x38, 0xb9, 0xd0, 0x46, 0x57, 0x62, 0x70, 0x4a, 0x3e, 0x1c, 0xda, 0x61, 0xed, 0x16, 0xdc, 0xe4,
	0x0b, 0x0e, 0xe2, 0x07, 0x01, 0x8a, 0xdc, 0x3a, 0xe6, 0x2e, 0x5f, 0x16, 0x10, 0x7f, 0x5f, 0x6a,
	0x31, 0x20, 0x62, 0x14, 0x08, 0xd9, 0x96, 0x39, 0xb8, 0x1d, 0x31, 0x70, 0x40, 0x5f, 0x67, 0x08,
	0xa0, 0xf7, 0xad, 0x03, 0x5f, 0xb3, 0xde, 0x86, 0x82, 0xda, 0x77, 0x3b, 0x96, 0x63, 0xb8, 0x47,
	0x23, 0x31, 0x05, 0xa1, 0x21, 0x22, 0x32, 0x63, 0x11, 0x91, 0x1d, 0xad, 0x75, 0xb9, 0xb1, 0xb5,
	0x6e, 0xd5, 0xe3, 0x28, 0x68, 0x36, 0x42, 0x53, 0x80, 0x9d, 0xd1, 0x14, 0x18, 0x38, 0x4d, 0x2f,
	0x39, 0x4d, 0xbe, 0xee, 0x5d, 0x1d, 0x4d, 0x49, 0x55, 0xc8, 0xfe, 0x03, 0x55, 0xc8, 0x8d, 0x56,
	0x85, 0xc9, 0x51, 0xaa, 0x90, 0x1f, 0x30, 0x7d, 0xd7, 0x42, 0xc7, 0x68, 0x04, 0xb3, 0xbe, 0x6a,
	0x72, 0x66, 0xe3, 0xc2, 0xf9, 0x63, 0x86, 0x9c, 0xb3, 0xc0, 0x43, 0x4e, 0xd5, 0xff, 0x9d, 0x5d,
	0xff, 0x6c, 0xdf, 0x4b, 0xb2, 0x3b, 0x9b, 0x64, 0x97, 0x1c, 0xf1, 0x05, 0x98, 0x4f, 0x18, 0x39,
	0xcb, 0x7f, 0x08, 0x30, 0x4d, 0xbd, 0x4c, 0x7f, 0xff, 0xbd, 0x53, 0x3e, 0x4c, 0xee, 0x72, 0x03,
	0x28, 0x99, 0x0c, 0x0d, 0xdc, 0x9d, 0x24, 0x25, 0x37, 0x43, 0x94, 0x30, 0xf5, 0x9e, 0x85, 0x99,
	0xf0, 0x9a, 0x13, 0xf1, 0xa7, 0x00, 0xaf, 0x85, 0x1d, 0x57, 0x3c, 0x6d, 0x97, 0x45, 0x86, 0x3f,
	0x1f, 0xf5, 0x24, 0x19, 0xb7, 0x13, 0x64, 0x90, 0xf1, 0x90, 0xa0, 0x1c, 0xb7, 0x71, 0x52, 0x2e,
	0xe8, 0x74, 0x3c, 0xeb, 0x18, 0x2e, 0xea, 0x1a, 0x78, 0xfc, 0xe9, 0x90, 0x61, 0xca, 0x44, 0xae,
	0xaa, 0xa9, 0xae, 0xda, 0xea, 0xda, 0x8c, 0x95, 0xd2, 0xd9, 0x69, 0x15, 0xb6, 0x99, 0x79, 0x6b,
	0x47, 0x01, 0x3f, 0x64, 0xcb, 0x16, 0x1f, 0x41, 0xd1, 0x41, 0xcf, 0x55, 0x47, 0x6b, 0x3d, 0x47,
	0x86, 0xde, 0x71, 0xe9, 0xe1, 0x6b, 0xae, 0x9c, 0x9c, 0x56, 0x27, 0x7e, 0x3d, 0xad, 0x2e, 0xd0,
	0x2f, 0xc4, 0xda, 0x67, 0x0d, 0xc3, 0x92, 0x4d, 0xd5, 0xed, 0x34, 0xb6, 0x90, 0xae, 0xb6, 0x8f,
	0x36, 0x51, 0x5b, 0x99, 0xa6, 0x99, 0xcf, 0x48, 0xe2, 0xd0, 0xb1, 0xe0, 0xc0, 0xd8, 0x58, 0xf0,
	0x35, 0x67, 0xe0, 0x5b, 0xfa, 0x38, 0xd9, 0xbc, 0x5a, 0xf8, 0x1b, 0xcb, 0xc9, 0xa6, 0xf9, 0x33,
	0x84, 0xf6, 0xc2, 0x9e, 0x21, 0x9b, 0xd1, 0x76, 0x5f, 0x08, 0x70, 0x63, 0x1b, 0xeb, 0x7b, 0xb6,
	0xa6, 0xba, 0x68, 0x47, 0x75, 0x54, 0x13, 0x8f, 0xdd, 0xf4, 0x3b, 0x90, 0xb7, 0x49, 0x05, 0xd2,
	0xef, 0xd4, 0xfa, 0x6c, 0xfc, 0x7a, 0xa5, 0xf5, 0x9b, 0x05, 0x6f, 0x4f, 0xbe, 0xbb, 0x38, 0x5e,
	0x13, 0x14, 0x96, 0xb0, 0x71, 0x37, 0xd9, 0xfe, 0x8c, 0xdf, 0x7e, 0xb8, 0xb7, 0xda, 0x3c, 0xcc,
	0xc5, 0x4c, 0x3e, 0x94, 0xf5, 0x97, 0xd7, 0x21, 0xbb, 0x8d, 0x75, 0xf1, 0x03, 0xb8, 0xe6, 0xbf,
	0x40, 0xa4, 0x78, 0x07, 0xc1, 0x7f, 0x21, 0x52, 0x6d, 0xb0, 0xcf, 0x2f, 0xe9, 0x95, 0xf2, 0x6f,
	0xe9, 0xb4, 0x52, 0xcc, 0x97, 0x5a, 0x2a, 0x76, 0x3b, 0x89, 0x7b, 0x30, 0x15, 0xbe, 0x96, 0x2a,
	0x83, 0x53, 0x3c, 0xbf, 0xf4, 0xc6, 0x70, 0x3f, 0x2f, 0xfb, 0x1e, 0xe4, 0x99, 0x0e, 0xcf, 0xa7,
	0x64, 0x50, 0x97, 0xb4, 0x3c, 0xd0, 0xc5, 0xeb, 0x28, 0x00, 0x21, 0x19, 0x5b, 0x1c, 0x98, 0x40,
	0x9a, 0x5b, 0x1d, 0xea, 0x0e, 0xd7, 0x0c, 0xbd, 0x06, 0xd3, 0x6a, 0x06, 0xee, 0xd4, 0x9a, 0xc9,
	0xe7, 0x13, 0xab, 0xe9, 0x6f, 0xca, 0x80, 0x9a, 0xfe, 0xbe, 0xac, 0x0e, 0x75, 0xf3, 0x9a, 0x9f,
	0x40, 0x29, 0xf6, 0x68, 0x58, 0x1e, 0x9a, 0x48, 0x38, 0xb8, 0x37, 0x32, 0x84, 0xd7, 0x7f, 0x0a,
	0x85, 0xe0, 0xba, 0x7c, 0x3d, 0x3d, 0x8f, 0xed, 0xd4, 0x9d, 0x61, 0x5e, 0x5e, 0xf0, 0x63, 0x28,
	0x46, 0xaf, 0x9d, 0xa5, 0x61, 0x69, 0xa4, 0xdd, 0xfa, 0xa8, 0x88, 0x70, 0xb7, 0x81, 0x7c, 0xa7,
	0x75, 0xcb, 0xbd, 0xa9, 0xdd, 0x26, 0x14, 0xd1, 0x1b, 0x51, 0xa6, 0x86, 0x69, 0x23, 0x4a, 0x5d,
	0xa9, 0x23, 0x1a, 0x95, 0x2a, 0xf1, 0x43, 0x98, 0x8e, 0xc8, 0x54, 0x35, 0x25, 0x25, 0x1c, 0x20,
	0xdd, 0x1d, 0x11, 0xe0, 0x57, 0x96, 0x26, 0x3f, 0xf7, 0xc4, 0xa8, 0xf9, 0xe8, 0xe4, 0xf7, 0xca,
	0xc4, 0xc9, 0x59, 0x45, 0x78, 0x75, 0x56, 0x11, 0x7e, 0x3b, 0xab, 0x08, 0xdf, 0x9c, 0x57, 0x26,
	0x5e, 0x9d, 0x57, 0x26, 0x7e, 0x39, 0xaf, 0x4c, 0x7c, 0xb4, 0xa6, 0x1b, 0x6e, 0xa7, 0xbf, 0xdf,
	0x68, 0x5b, 0xa6, 0x4c, 0xeb, 0xde, 0xef, 0xaa, 0xfb, 0x98, 0x7d, 0x96, 0x0f, 0xe9, 0xaf, 0x38,
	0xe4, 0x27, 0x9c, 0xfd, 0x3c, 0xf9, 0x0d, 0xe7, 0xad, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7c,
	0x74, 0xfe, 0xa5, 0x67, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Publish stores compiled Move module
	Publish(ctx context.Context, in *MsgPublish, opts ...grpc.CallOption) (*MsgPublishResponse, error)
	// Deprecated: Use ExecuteJSON instead
	// Execute runs a entry function with the given message
	Execute(ctx context.Context, in *MsgExecute, opts ...grpc.CallOption) (*MsgExecuteResponse, error)
	// ExecuteJSON runs a entry function with the given message
	ExecuteJSON(ctx context.Context, in *MsgExecuteJSON, opts ...grpc.CallOption) (*MsgExecuteJSONResponse, error)
	// Deprecated: Use ScriptJSON instead
	// Script runs a scripts with the given message
	Script(ctx context.Context, in *MsgScript, opts ...grpc.CallOption) (*MsgScriptResponse, error)
	// ScriptJSON runs a scripts with the given message
	ScriptJSON(ctx context.Context, in *MsgScriptJSON, opts ...grpc.CallOption) (*MsgScriptJSONResponse, error)
	// GovPublish stores compiled Move module via gov proposal
	GovPublish(ctx context.Context, in *MsgGovPublish, opts ...grpc.CallOption) (*MsgGovPublishResponse, error)
	// Deprecated: Use GovExecuteJSON instead
	// GovExecute runs a entry function with the given message via gov proposal
	GovExecute(ctx context.Context, in *MsgGovExecute, opts ...grpc.CallOption) (*MsgGovExecuteResponse, error)
	// GovExecuteJSON runs a entry function with the given message via gov proposal
	GovExecuteJSON(ctx context.Context, in *MsgGovExecuteJSON, opts ...grpc.CallOption) (*MsgGovExecuteJSONResponse, error)
	// Deprecated: Use GovScriptJSON instead
	// GovScript runs a scripts with the given message via gov proposal
	GovScript(ctx context.Context, in *MsgGovScript, opts ...grpc.CallOption) (*MsgGovScriptResponse, error)
	// GovScriptJSON runs a scripts with the given message via gov proposal
	GovScriptJSON(ctx context.Context, in *MsgGovScriptJSON, opts ...grpc.CallOption) (*MsgGovScriptJSONResponse, error)
	// Whitelist registers a dex pair to whitelist of various features.
	// - whitelist from coin register operation
	// - allow counter party denom can be used as gas fee
	// - register lp denom as staking denom
	Whitelist(ctx context.Context, in *MsgWhitelist, opts ...grpc.CallOption) (*MsgWhitelistResponse, error)
	// Delist unregisters a dex pair from the whitelist.
	Delist(ctx context.Context, in *MsgDelist, opts ...grpc.CallOption) (*MsgDelistResponse, error)
	// UpdateParams defines an operation for updating the x/move module
	// parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Publish(ctx context.Context, in *MsgPublish, opts ...grpc.CallOption) (*MsgPublishResponse, error) {
	out := new(MsgPublishResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Execute(ctx context.Context, in *MsgExecute, opts ...grpc.CallOption) (*MsgExecuteResponse, error) {
	out := new(MsgExecuteResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteJSON(ctx context.Context, in *MsgExecuteJSON, opts ...grpc.CallOption) (*MsgExecuteJSONResponse, error) {
	out := new(MsgExecuteJSONResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/ExecuteJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Script(ctx context.Context, in *MsgScript, opts ...grpc.CallOption) (*MsgScriptResponse, error) {
	out := new(MsgScriptResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/Script", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ScriptJSON(ctx context.Context, in *MsgScriptJSON, opts ...grpc.CallOption) (*MsgScriptJSONResponse, error) {
	out := new(MsgScriptJSONResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/ScriptJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovPublish(ctx context.Context, in *MsgGovPublish, opts ...grpc.CallOption) (*MsgGovPublishResponse, error) {
	out := new(MsgGovPublishResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/GovPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovExecute(ctx context.Context, in *MsgGovExecute, opts ...grpc.CallOption) (*MsgGovExecuteResponse, error) {
	out := new(MsgGovExecuteResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/GovExecute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovExecuteJSON(ctx context.Context, in *MsgGovExecuteJSON, opts ...grpc.CallOption) (*MsgGovExecuteJSONResponse, error) {
	out := new(MsgGovExecuteJSONResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/GovExecuteJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovScript(ctx context.Context, in *MsgGovScript, opts ...grpc.CallOption) (*MsgGovScriptResponse, error) {
	out := new(MsgGovScriptResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/GovScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovScriptJSON(ctx context.Context, in *MsgGovScriptJSON, opts ...grpc.CallOption) (*MsgGovScriptJSONResponse, error) {
	out := new(MsgGovScriptJSONResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/GovScriptJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Whitelist(ctx context.Context, in *MsgWhitelist, opts ...grpc.CallOption) (*MsgWhitelistResponse, error) {
	out := new(MsgWhitelistResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/Whitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delist(ctx context.Context, in *MsgDelist, opts ...grpc.CallOption) (*MsgDelistResponse, error) {
	out := new(MsgDelistResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/Delist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/initia.move.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Publish stores compiled Move module
	Publish(context.Context, *MsgPublish) (*MsgPublishResponse, error)
	// Deprecated: Use ExecuteJSON instead
	// Execute runs a entry function with the given message
	Execute(context.Context, *MsgExecute) (*MsgExecuteResponse, error)
	// ExecuteJSON runs a entry function with the given message
	ExecuteJSON(context.Context, *MsgExecuteJSON) (*MsgExecuteJSONResponse, error)
	// Deprecated: Use ScriptJSON instead
	// Script runs a scripts with the given message
	Script(context.Context, *MsgScript) (*MsgScriptResponse, error)
	// ScriptJSON runs a scripts with the given message
	ScriptJSON(context.Context, *MsgScriptJSON) (*MsgScriptJSONResponse, error)
	// GovPublish stores compiled Move module via gov proposal
	GovPublish(context.Context, *MsgGovPublish) (*MsgGovPublishResponse, error)
	// Deprecated: Use GovExecuteJSON instead
	// GovExecute runs a entry function with the given message via gov proposal
	GovExecute(context.Context, *MsgGovExecute) (*MsgGovExecuteResponse, error)
	// GovExecuteJSON runs a entry function with the given message via gov proposal
	GovExecuteJSON(context.Context, *MsgGovExecuteJSON) (*MsgGovExecuteJSONResponse, error)
	// Deprecated: Use GovScriptJSON instead
	// GovScript runs a scripts with the given message via gov proposal
	GovScript(context.Context, *MsgGovScript) (*MsgGovScriptResponse, error)
	// GovScriptJSON runs a scripts with the given message via gov proposal
	GovScriptJSON(context.Context, *MsgGovScriptJSON) (*MsgGovScriptJSONResponse, error)
	// Whitelist registers a dex pair to whitelist of various features.
	// - whitelist from coin register operation
	// - allow counter party denom can be used as gas fee
	// - register lp denom as staking denom
	Whitelist(context.Context, *MsgWhitelist) (*MsgWhitelistResponse, error)
	// Delist unregisters a dex pair from the whitelist.
	Delist(context.Context, *MsgDelist) (*MsgDelistResponse, error)
	// UpdateParams defines an operation for updating the x/move module
	// parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Publish(ctx context.Context, req *MsgPublish) (*MsgPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedMsgServer) Execute(ctx context.Context, req *MsgExecute) (*MsgExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedMsgServer) ExecuteJSON(ctx context.Context, req *MsgExecuteJSON) (*MsgExecuteJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteJSON not implemented")
}
func (*UnimplementedMsgServer) Script(ctx context.Context, req *MsgScript) (*MsgScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Script not implemented")
}
func (*UnimplementedMsgServer) ScriptJSON(ctx context.Context, req *MsgScriptJSON) (*MsgScriptJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptJSON not implemented")
}
func (*UnimplementedMsgServer) GovPublish(ctx context.Context, req *MsgGovPublish) (*MsgGovPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovPublish not implemented")
}
func (*UnimplementedMsgServer) GovExecute(ctx context.Context, req *MsgGovExecute) (*MsgGovExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovExecute not implemented")
}
func (*UnimplementedMsgServer) GovExecuteJSON(ctx context.Context, req *MsgGovExecuteJSON) (*MsgGovExecuteJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovExecuteJSON not implemented")
}
func (*UnimplementedMsgServer) GovScript(ctx context.Context, req *MsgGovScript) (*MsgGovScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovScript not implemented")
}
func (*UnimplementedMsgServer) GovScriptJSON(ctx context.Context, req *MsgGovScriptJSON) (*MsgGovScriptJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovScriptJSON not implemented")
}
func (*UnimplementedMsgServer) Whitelist(ctx context.Context, req *MsgWhitelist) (*MsgWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelist not implemented")
}
func (*UnimplementedMsgServer) Delist(ctx context.Context, req *MsgDelist) (*MsgDelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delist not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Publish(ctx, req.(*MsgPublish))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Execute(ctx, req.(*MsgExecute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteJSON)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/ExecuteJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteJSON(ctx, req.(*MsgExecuteJSON))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Script_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Script(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/Script",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Script(ctx, req.(*MsgScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ScriptJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgScriptJSON)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ScriptJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/ScriptJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ScriptJSON(ctx, req.(*MsgScriptJSON))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovPublish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/GovPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovPublish(ctx, req.(*MsgGovPublish))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovExecute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/GovExecute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovExecute(ctx, req.(*MsgGovExecute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovExecuteJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovExecuteJSON)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovExecuteJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/GovExecuteJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovExecuteJSON(ctx, req.(*MsgGovExecuteJSON))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovScript)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/GovScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovScript(ctx, req.(*MsgGovScript))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovScriptJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovScriptJSON)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovScriptJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/GovScriptJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovScriptJSON(ctx, req.(*MsgGovScriptJSON))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Whitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Whitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/Whitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Whitelist(ctx, req.(*MsgWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/Delist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delist(ctx, req.(*MsgDelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/initia.move.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "initia.move.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Msg_Publish_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Msg_Execute_Handler,
		},
		{
			MethodName: "ExecuteJSON",
			Handler:    _Msg_ExecuteJSON_Handler,
		},
		{
			MethodName: "Script",
			Handler:    _Msg_Script_Handler,
		},
		{
			MethodName: "ScriptJSON",
			Handler:    _Msg_ScriptJSON_Handler,
		},
		{
			MethodName: "GovPublish",
			Handler:    _Msg_GovPublish_Handler,
		},
		{
			MethodName: "GovExecute",
			Handler:    _Msg_GovExecute_Handler,
		},
		{
			MethodName: "GovExecuteJSON",
			Handler:    _Msg_GovExecuteJSON_Handler,
		},
		{
			MethodName: "GovScript",
			Handler:    _Msg_GovScript_Handler,
		},
		{
			MethodName: "GovScriptJSON",
			Handler:    _Msg_GovScriptJSON_Handler,
		},
		{
			MethodName: "Whitelist",
			Handler:    _Msg_Whitelist_Handler,
		},
		{
			MethodName: "Delist",
			Handler:    _Msg_Delist_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "initia/move/v1/tx.proto",
}

func (m *MsgPublish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpgradePolicy != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UpgradePolicy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CodeBytes) > 0 {
		for iNdEx := len(m.CodeBytes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CodeBytes[iNdEx])
			copy(dAtA[i:], m.CodeBytes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CodeBytes[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FunctionName) > 0 {
		i -= len(m.FunctionName)
		copy(dAtA[i:], m.FunctionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FunctionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModuleAddress) > 0 {
		i -= len(m.ModuleAddress)
		copy(dAtA[i:], m.ModuleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FunctionName) > 0 {
		i -= len(m.FunctionName)
		copy(dAtA[i:], m.FunctionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FunctionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModuleAddress) > 0 {
		i -= len(m.ModuleAddress)
		copy(dAtA[i:], m.ModuleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteJSONResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteJSONResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteJSONResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CodeBytes) > 0 {
		i -= len(m.CodeBytes)
		copy(dAtA[i:], m.CodeBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CodeBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgScriptJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgScriptJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgScriptJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CodeBytes) > 0 {
		i -= len(m.CodeBytes)
		copy(dAtA[i:], m.CodeBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CodeBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgScriptJSONResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgScriptJSONResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgScriptJSONResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovPublish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovPublish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovPublish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpgradePolicy != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UpgradePolicy))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CodeBytes) > 0 {
		for iNdEx := len(m.CodeBytes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CodeBytes[iNdEx])
			copy(dAtA[i:], m.CodeBytes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CodeBytes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovPublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovPublishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovPublishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovExecute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovExecute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FunctionName) > 0 {
		i -= len(m.FunctionName)
		copy(dAtA[i:], m.FunctionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FunctionName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModuleAddress) > 0 {
		i -= len(m.ModuleAddress)
		copy(dAtA[i:], m.ModuleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovExecuteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovExecuteJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovExecuteJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovExecuteJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FunctionName) > 0 {
		i -= len(m.FunctionName)
		copy(dAtA[i:], m.FunctionName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FunctionName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModuleAddress) > 0 {
		i -= len(m.ModuleAddress)
		copy(dAtA[i:], m.ModuleAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovExecuteJSONResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovExecuteJSONResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovExecuteJSONResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovScript) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovScript) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovScript) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CodeBytes) > 0 {
		i -= len(m.CodeBytes)
		copy(dAtA[i:], m.CodeBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CodeBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovScriptResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovScriptResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovScriptResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovScriptJSON) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovScriptJSON) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovScriptJSON) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TypeArgs) > 0 {
		for iNdEx := len(m.TypeArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeArgs[iNdEx])
			copy(dAtA[i:], m.TypeArgs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TypeArgs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CodeBytes) > 0 {
		i -= len(m.CodeBytes)
		copy(dAtA[i:], m.CodeBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CodeBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovScriptJSONResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovScriptJSONResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovScriptJSONResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardWeight.Size()
		i -= size
		if _, err := m.RewardWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MetadataLP) > 0 {
		i -= len(m.MetadataLP)
		copy(dAtA[i:], m.MetadataLP)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataLP)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MetadataLP) > 0 {
		i -= len(m.MetadataLP)
		copy(dAtA[i:], m.MetadataLP)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MetadataLP)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPublish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CodeBytes) > 0 {
		for _, b := range m.CodeBytes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpgradePolicy != 0 {
		n += 1 + sovTx(uint64(m.UpgradePolicy))
	}
	return n
}

func (m *MsgPublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgExecuteJSONResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CodeBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgScriptJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CodeBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgScriptJSONResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovPublish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CodeBytes) > 0 {
		for _, b := range m.CodeBytes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.UpgradePolicy != 0 {
		n += 1 + sovTx(uint64(m.UpgradePolicy))
	}
	return n
}

func (m *MsgGovPublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovExecute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGovExecuteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovExecuteJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGovExecuteJSONResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovScript) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CodeBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGovScriptResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovScriptJSON) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CodeBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.TypeArgs) > 0 {
		for _, s := range m.TypeArgs {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgGovScriptJSONResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataLP)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RewardWeight.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MetadataLP)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPublish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = append(m.CodeBytes, make([]byte, postIndex-iNdEx))
			copy(m.CodeBytes[len(m.CodeBytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradePolicy", wireType)
			}
			m.UpgradePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradePolicy |= UpgradePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteJSONResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteJSONResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteJSONResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = append(m.CodeBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeBytes == nil {
				m.CodeBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgScriptJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgScriptJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgScriptJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = append(m.CodeBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeBytes == nil {
				m.CodeBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgScriptJSONResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgScriptJSONResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgScriptJSONResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovPublish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovPublish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovPublish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = append(m.CodeBytes, make([]byte, postIndex-iNdEx))
			copy(m.CodeBytes[len(m.CodeBytes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradePolicy", wireType)
			}
			m.UpgradePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradePolicy |= UpgradePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovPublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovPublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovPublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovExecuteJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovExecuteJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovExecuteJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovExecuteJSONResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovExecuteJSONResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovExecuteJSONResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovScript) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovScript: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovScript: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = append(m.CodeBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeBytes == nil {
				m.CodeBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovScriptResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovScriptResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovScriptResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovScriptJSON) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovScriptJSON: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovScriptJSON: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeBytes = append(m.CodeBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeBytes == nil {
				m.CodeBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeArgs = append(m.TypeArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovScriptJSONResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovScriptJSONResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovScriptJSONResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataLP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataLP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataLP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataLP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
